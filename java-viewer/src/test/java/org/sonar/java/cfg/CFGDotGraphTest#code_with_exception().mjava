  @Test
  public void code_with_exception() {
    String code = "abstract class A {"
      + "  int foo() {"
      + "    int result = 42;"
      + "    try {"
      + "      result = getValue();"
      + "    } catch (Exception e) {"
      + "      result = -1;"
      + "    }"
      + "    return result;"
      + "  }"
      + "  abstract int getValue() throws IllegalStateException;"
      + "}";

    Viewer.Base base = new Viewer.Base(code);

    CFGDotGraph cfgDotGraph = new CFGDotGraph(base.cfgFirstMethod);
    cfgDotGraph.build();

    assertThat(cfgDotGraph.toDot())
      .isEqualTo("graph CFG {5[label=\"B5 (START)\",highlighting=\"firstNode\"];4[label=\"B4\"];3[label=\"B3\"];2[label=\"B2\"];1[label=\"B1\"];0[label=\"B0 (EXIT)\",highlighting=\"exitNode\"];5->4[];4->2[];4->0[label=\"EXCEPTION\",highlighting=\"exceptionEdge\"];4->3[label=\"EXCEPTION\",highlighting=\"exceptionEdge\"];3->1[];2->1[];1->0[label=\"EXIT\"];5[label=\"B5 (START)\",highlighting=\"firstNode\"];4[label=\"B4\"];3[label=\"B3\"];2[label=\"B2\"];1[label=\"B1\"];0[label=\"B0 (EXIT)\",highlighting=\"exitNode\"];5->4[];4->2[];4->0[label=\"EXCEPTION\",highlighting=\"exceptionEdge\"];4->3[label=\"EXCEPTION\",highlighting=\"exceptionEdge\"];3->1[];2->1[];1->0[label=\"EXIT\"];}");
  }

