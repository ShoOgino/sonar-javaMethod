  @Test
  public void method_with_behavior_populate_methodYields_and_methodName_with_constraints_and_index() {
    String source = "abstract class A {"
      + "  void foo() {"
      + "    doSomething();"
      + "  }"
      + "  abstract Boolean doSomething();"
      + "}";

    Viewer.Base base = new Viewer.Base(source);

    Mockito.when(mockBehaviorCache.get(Mockito.any(Symbol.MethodSymbol.class))).thenAnswer(new Answer<MethodBehavior>() {
      @Override
      public MethodBehavior answer(InvocationOnMock invocation) throws Throwable {
        Symbol.MethodSymbol methodSymbol = invocation.getArgument(0);
        MethodBehavior mb = new MethodBehavior(methodSymbol);
        HappyPathYield hpy = new HappyPathYield(mb);
        hpy.setResult(2, ConstraintsByDomain.empty().put(ObjectConstraint.NOT_NULL).put(BooleanConstraint.FALSE));
        mb.addYield(hpy);
        return mb;
      }
    });

    Node node = newNode(base.cfgFirstMethod.blocks().get(0), 1);
    EGDotNode egDotNode = new EGDotNode(0, node, mockBehaviorCache, false, 1);

    JsonObject details = egDotNode.details();

    JsonValue methodName = details.get("methodName");
    assertThat(methodName).isNotNull();
    assertThat(methodName.toString()).isEqualTo("\"doSomething\"");

    JsonValue yields = details.get("methodYields");
    assertThat(yields).isNotNull();
    assertThat(yields.getValueType()).isEqualTo(ValueType.ARRAY);
    // order is alphabetical for constraint
    assertThat(yields.toString()).isEqualTo("[{\"params\":[],\"result\":[\"FALSE\",\"NOT_NULL\"],\"resultIndex\":2}]");
  }

