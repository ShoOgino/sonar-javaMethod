  private static String toString(Tree tree) {
    Stream.Builder<String> sb = Stream.builder();
    switch (tree.kind()) {
      case TOKEN:
        sb.add(((SyntaxToken) tree).text());
        break;
      case VARIABLE:
        VariableTree vt = (VariableTree) tree;
        // skip initializer
        addTrees(sb, vt.type(), vt.simpleName());
        break;
      case NEW_CLASS:
        NewClassTree nct = (NewClassTree) tree;
        // skip body for anonymous classes
        addTrees(sb, nct.newKeyword(), nct.identifier(), nct.arguments());
        break;
      case MEMBER_SELECT:
        MemberSelectExpressionTree mset = (MemberSelectExpressionTree) tree;
        if (mset.expression().is(Tree.Kind.METHOD_INVOCATION)) {
          // skip method invocation
          addTrees(sb, mset.identifier());
        } else {
          addChildren(sb, tree);
        }
        break;
      case IF_STATEMENT:
        IfStatementTree ist = (IfStatementTree) tree;
        // skip thenClause and elseClause
        addTrees(sb, ist.ifKeyword(), ist.openParenToken(), ist.condition(), ist.closeParenToken());
        break;
      default:
        addChildren(sb, tree);
        break;
    }
    return sb.build().filter(text -> !text.isEmpty()).collect(Collectors.joining(" "));
  }

