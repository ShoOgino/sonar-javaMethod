  @Test
  void issues() throws IOException {
    List<ExternalIssue> externalIssues = execute("pmd-report.xml");
    assertThat(externalIssues).hasSize(3);

    ExternalIssue first = externalIssues.get(0);

    ExternalIssueAssert.assertThat(first)
      .hasFileName(PROJECT_ID + ":file1.java")
      .hasEngineId("pmd")
      .hasRuleId("UnusedFormalParameter")
      .hasRuleKey("UnusedFormalParameter")
      .hasRuleType(RuleType.CODE_SMELL)
      .hasSeverity(Severity.MAJOR)
      .hasMessage("Avoid unused constructor parameters such as 'arg2'.")
      .hasTextRange(new DefaultTextRange(new DefaultTextPointer(3, 34), new DefaultTextPointer(3, 38)))
      .hasRemediationEffort(5)
      .verify();

    ExternalIssue second = externalIssues.get(1);

    ExternalIssueAssert.assertThat(second)
      .hasFileName(PROJECT_ID + ":file1.java")
      .hasRuleKey("UnusedLocalVariable")
      .hasRuleType(RuleType.CODE_SMELL)
      .hasSeverity(Severity.MAJOR)
      .hasMessage("Avoid unused local variables such as 'x'.")
      .hasTextRange(new DefaultTextRange(new DefaultTextPointer(4, 8), new DefaultTextPointer(5, 10)))
      .hasRemediationEffort(5)
      .verify();

    ExternalIssue third = externalIssues.get(2);

    ExternalIssueAssert.assertThat(third)
      .hasFileName(PROJECT_ID + ":file2.java")
      .hasRuleKey("UnusedPrivateMethod")
      .hasRuleType(RuleType.CODE_SMELL)
      .hasSeverity(Severity.CRITICAL)
      .hasMessage("Avoid unused private methods such as 'privateMethod()'.")
      .hasTextRangeStartLine(5)
      .hasRemediationEffort(5)
      .verify();

    assertThat(logTester.logs(LoggerLevel.ERROR)).isEmpty();
    assertThat(logTester.logs(LoggerLevel.WARN)).containsExactly("No input file found for unknown-file.java. No PMD issue will be imported on this file.");
  }

