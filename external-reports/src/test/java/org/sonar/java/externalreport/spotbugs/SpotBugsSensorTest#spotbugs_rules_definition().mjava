  @Test
  public void spotbugs_rules_definition() {
    Plugin.Context sensorContext = ExternalReportTestUtils.sensorContext(7, 2);
    SpotBugsSensor.defineSensor(sensorContext);
    assertThat(sensorContext.getExtensions()).hasSize(1);
    SpotBugsSensor.defineRulesAndProperties(sensorContext);
    assertThat(sensorContext.getExtensions()).hasSize(4);

    RulesDefinition.Context context = new RulesDefinition.Context();
    sensorContext.getExtensions().stream()
      .filter(RulesDefinition.class::isInstance)
      .forEach(ext -> ((RulesDefinition) ext).define(context));

    assertThat(context.repositories()).hasSize(2);

    RulesDefinition.Repository repository = context.repository("external_spotbugs");
    assertThat(repository.name()).isEqualTo("SpotBugs");
    assertThat(repository.language()).isEqualTo("java");
    assertThat(repository.isExternal()).isEqualTo(true);
    assertThat(repository.rules().size()).isEqualTo(458);

    RulesDefinition.Rule rule = repository.rule("AM_CREATES_EMPTY_JAR_FILE_ENTRY");
    assertThat(rule).isNotNull();
    assertThat(rule.name()).isEqualTo("Bad practice - Creates an empty jar file entry");
    assertThat(rule.type()).isEqualTo(RuleType.CODE_SMELL);
    assertThat(rule.severity()).isEqualTo("MAJOR");
    assertThat(rule.htmlDescription()).isEqualTo("<p>The code calls <code>putNextEntry()</code>, immediately\n" +
      "followed by a call to <code>closeEntry()</code>. This results\n" +
      "in an empty JarFile entry. The contents of the entry\n" +
      "should be written to the JarFile between the calls to\n" +
      "<code>putNextEntry()</code> and\n" +
      "<code>closeEntry()</code>.</p>");
    assertThat(rule.tags()).containsExactlyInAnyOrder("bad-practice");
    assertThat(rule.debtRemediationFunction().baseEffort()).isEqualTo("1h");

    RulesDefinition.Repository findsecbugsRepo = context.repository("external_findsecbugs");
    assertThat(findsecbugsRepo.name()).isEqualTo("FindSecBugs");
    assertThat(findsecbugsRepo.language()).isEqualTo("java");
    assertThat(findsecbugsRepo.isExternal()).isEqualTo(true);
    repository = context.repository("external_findsecbugs");
    assertThat(repository.rules().size()).isEqualTo(104);
  }

