  private void buildCondition(Tree syntaxNode, Block trueBlock, Block falseBlock) {
    switch (syntaxNode.kind()) {
      case CONDITIONAL_OR: {
        BinaryExpressionTree e = (BinaryExpressionTree) syntaxNode;
        // process RHS
        buildCondition(e.rightOperand(), trueBlock, falseBlock);
        falseBlock = currentBlock;
        // process LHS
        currentBlock = createBranch(e, trueBlock, falseBlock);
        buildCondition(e.leftOperand(), trueBlock, falseBlock);
        break;
      }
      case CONDITIONAL_AND: {
        // process RHS
        BinaryExpressionTree e = (BinaryExpressionTree) syntaxNode;
        buildCondition(e.rightOperand(), trueBlock, falseBlock);
        trueBlock = currentBlock;
        // process LHS
        currentBlock = createBranch(e, trueBlock, falseBlock);
        buildCondition(e.leftOperand(), trueBlock, falseBlock);
        break;
      }
      // Skip syntactic sugar:
      case PARENTHESIZED_EXPRESSION:
        buildCondition(((ParenthesizedTree) syntaxNode).expression(), trueBlock, falseBlock);
        break;
      default:
        build(syntaxNode);
        break;
    }
  }

