  private void build(Tree tree) {
    switch (tree.kind()) {
      case BLOCK:
        for (StatementTree statementTree : Lists.reverse(((BlockTree) tree).body())) {
          build(statementTree);
        }
        break;
      case RETURN_STATEMENT: {
        ReturnStatementTree s = (ReturnStatementTree) tree;
        currentBlock = createUnconditionalJump(s, exitBlock);
        ExpressionTree expression = s.expression();
        if (expression != null) {
          build(expression);
        }
        break;
      }
      case EXPRESSION_STATEMENT:
        build(((ExpressionStatementTree) tree).expression());
        break;
      case METHOD_INVOCATION:
        MethodInvocationTree mit = (MethodInvocationTree) tree;
        currentBlock.elements.add(mit);
        build(mit.methodSelect());
        for (ExpressionTree arg : Lists.reverse(mit.arguments())) {
          build(arg);
        }
        break;
      case IF_STATEMENT: {
        IfStatementTree ifStatementTree = (IfStatementTree) tree;
        Block next = currentBlock;
        // process else-branch
        Block elseBlock = next;
        StatementTree elseStatement = ifStatementTree.elseStatement();
        if (elseStatement != null) {
          // if statement will create the required block.
          if (!elseStatement.is(Tree.Kind.IF_STATEMENT)) {
            currentBlock = createBlock(next);
          }
          build(elseStatement);
          elseBlock = currentBlock;
        }
        // process then-branch
        currentBlock = createBlock(next);
        build(ifStatementTree.thenStatement());
        Block thenBlock = currentBlock;
        // process condition
        currentBlock = createBranch(ifStatementTree, thenBlock, elseBlock);
        buildCondition(ifStatementTree.condition(), thenBlock, elseBlock);
        break;
      }
      case CONDITIONAL_EXPRESSION: {
        ConditionalExpressionTree cond = (ConditionalExpressionTree) tree;
        Block next = currentBlock;
        // process else-branch
        ExpressionTree elseStatement = cond.falseExpression();
        currentBlock = createBlock(next);
        build(elseStatement);
        Block elseBlock = currentBlock;
        // process then-branch
        currentBlock = createBlock(next);
        build(cond.trueExpression());
        Block thenBlock = currentBlock;
        // process condition
        currentBlock = createBranch(cond, thenBlock, elseBlock);
        buildCondition(cond.condition(), thenBlock, elseBlock);
        break;
      }
      case VARIABLE:
        currentBlock.elements.add(tree);
        VariableTree variableTree = (VariableTree) tree;
        if (variableTree.initializer() != null) {
          build(variableTree.initializer());
        }
        break;
      case MULTIPLY:
      case DIVIDE:
      case REMAINDER:
      case PLUS:
      case MINUS:
      case LEFT_SHIFT:
      case RIGHT_SHIFT:
      case UNSIGNED_RIGHT_SHIFT:
      case AND:
      case XOR:
      case OR:
      case GREATER_THAN:
      case GREATER_THAN_OR_EQUAL_TO:
      case LESS_THAN:
      case LESS_THAN_OR_EQUAL_TO:
      case EQUAL_TO:
      case NOT_EQUAL_TO:
        BinaryExpressionTree binaryExpressionTree = (BinaryExpressionTree) tree;
        currentBlock.elements.add(tree);
        build(binaryExpressionTree.rightOperand());
        build(binaryExpressionTree.leftOperand());
        break;
      case ASSIGNMENT:
        AssignmentExpressionTree assignmentExpressionTree = (AssignmentExpressionTree) tree;
        currentBlock.elements.add(tree);
        build(assignmentExpressionTree.variable());
        build(assignmentExpressionTree.expression());
        break;
      case MEMBER_SELECT:
        MemberSelectExpressionTree mse = (MemberSelectExpressionTree) tree;
        currentBlock.elements.add(mse);
        build(mse.expression());
        break;
      case CONDITIONAL_AND: {
        BinaryExpressionTree e = (BinaryExpressionTree) tree;
        // process RHS
        Block falseBlock = currentBlock;
        currentBlock = createBlock(falseBlock);
        build(e.rightOperand());
        Block trueBlock = currentBlock;
        // process LHS
        currentBlock = createBranch(e, trueBlock, falseBlock);
        build(e.leftOperand());
        break;
      }
      case CONDITIONAL_OR: {
        BinaryExpressionTree e = (BinaryExpressionTree) tree;
        // process RHS
        Block trueBlock = currentBlock;
        currentBlock = createBlock(trueBlock);
        build(e.rightOperand());
        Block falseBlock = currentBlock;
        // process LHS
        currentBlock = createBranch(e, trueBlock, falseBlock);
        build(e.leftOperand());
        break;
      }
      case LABELED_STATEMENT: {
        LabeledStatementTree s = (LabeledStatementTree) tree;
        build(s.statement());
        currentBlock = createBlock(currentBlock);
        labels.put(s.label().name(), currentBlock);
        break;
      }
      case SWITCH_STATEMENT: {
        // FIXME useless node created for default cases.
        SwitchStatementTree switchStatementTree = (SwitchStatementTree) tree;
        Block switchSuccessor = currentBlock;
        // process condition
        currentBlock = createBlock();
        currentBlock.terminator = switchStatementTree;
        switches.addLast(currentBlock);
        build(switchStatementTree.expression());
        // process body
        currentBlock = createBlock(switchSuccessor);
        breakTargets.addLast(switchSuccessor);
        if (!switchStatementTree.cases().isEmpty()) {
          CaseGroupTree firstCase = switchStatementTree.cases().get(0);
          for (CaseGroupTree caseGroupTree : switchStatementTree.cases()) {
            build(caseGroupTree.body());
            switches.getLast().successors.add(currentBlock);
            if (caseGroupTree != firstCase) {
              // No block predecessing the first case group.
              currentBlock = createBlock(currentBlock);
            }
          }
        }
        breakTargets.removeLast();
        // process condition
        currentBlock = switches.removeLast();
        break;
      }
      case BREAK_STATEMENT: {
        BreakStatementTree breakStatementTree = (BreakStatementTree) tree;
        if(breakStatementTree.label() == null) {
          if (breakTargets.isEmpty()) {
            throw new IllegalStateException("'break' statement not in loop or switch statement");
          }
          currentBlock = createUnconditionalJump(tree, breakTargets.getLast());
        } else {
          currentBlock = createUnconditionalJump(tree, null);
          gotos.add(currentBlock);
        }
        break;
      }
      case CONTINUE_STATEMENT: {
        ContinueStatementTree continueStatementTree = (ContinueStatementTree) tree;
        if(continueStatementTree.label() == null) {
          if (continueTargets.isEmpty()) {
            throw new IllegalStateException("'break' statement not in loop or switch statement");
          }
          currentBlock = createUnconditionalJump(tree, continueTargets.getLast());
        } else {
          currentBlock = createUnconditionalJump(tree, null);
          gotos.add(currentBlock);
        }
        break;
      }
      case WHILE_STATEMENT: {
        WhileStatementTree s = (WhileStatementTree) tree;
        Block falseBranch = currentBlock;
        Block loopback = createBlock();
        // process body
        currentBlock = createBlock(loopback);
        continueTargets.addLast(loopback);
        breakTargets.addLast(falseBranch);
        build(s.statement());
        breakTargets.removeLast();
        continueTargets.removeLast();
        Block bodyBlock = currentBlock;
        // process condition
        currentBlock = createBranch(s, bodyBlock, falseBranch);
        buildCondition(s.condition(), bodyBlock, falseBranch);
        loopback.successors.add(currentBlock);
        currentBlock = createBlock(currentBlock);
        break;
      }
      case DO_STATEMENT: {
        DoWhileStatementTree s = (DoWhileStatementTree) tree;
        Block falseBranch = currentBlock;
        Block loopback = createBlock();
        // process condition
        currentBlock = createBranch(s, loopback, falseBranch);
        buildCondition(s.condition(), loopback, falseBranch);
        // process body
        currentBlock = createBlock(currentBlock);
        continueTargets.addLast(loopback);
        breakTargets.addLast(falseBranch);
        build(s.statement());
        breakTargets.removeLast();
        continueTargets.removeLast();
        loopback.successors.add(currentBlock);
        currentBlock = createBlock(currentBlock);
        break;
      }
      case FOR_EACH_STATEMENT: {
        //TODO(npe) One solution is to create a forstatement node depending on type of expression (iterable or array) and build CFG from it.
        break;
      }
      case FOR_STATEMENT: {
        ForStatementTree s = (ForStatementTree) tree;
        Block falseBranch = currentBlock;
        // process step
        currentBlock = createBlock();
        Block stepBlock = currentBlock;
        for (StatementTree updateTree : Lists.reverse(s.update())) {
          build(updateTree);
        }
        // process body
        currentBlock = createBlock(currentBlock);
        continueTargets.addLast(stepBlock);
        breakTargets.addLast(falseBranch);
        build(s.statement());
        breakTargets.removeLast();
        continueTargets.removeLast();
        Block body = currentBlock;
        // process condition
        currentBlock = createBranch(s, body, falseBranch);
        ExpressionTree condition = s.condition();
        if (condition != null) {
          buildCondition(condition, body, falseBranch);
        }
        stepBlock.successors.add(currentBlock);
        // process init
        currentBlock = createBlock(currentBlock);
        for (StatementTree init : Lists.reverse(s.initializer())) {
          build(init);
        }
        break;
      }
      case TRY_STATEMENT: {
        //FIXME only path with no failure constructed for now, (not taking try with resources into consideration).
        TryStatementTree tryStatementTree = (TryStatementTree) tree;
        currentBlock = createBlock(currentBlock);
        BlockTree finallyBlock = tryStatementTree.finallyBlock();
        if(finallyBlock != null) {
          build(finallyBlock);
        }
        currentBlock = createBlock(currentBlock);
        build(tryStatementTree.block());
        break;
      }
      case THROW_STATEMENT: {
        //FIXME this won't work if it is intended to be caught by a try statement.
        ThrowStatementTree throwStatementTree = (ThrowStatementTree) tree;
        currentBlock = createUnconditionalJump(throwStatementTree, exitBlock);
        build(throwStatementTree.expression());
        break;
      }
      case SYNCHRONIZED_STATEMENT: {
        SynchronizedStatementTree sst = (SynchronizedStatementTree) tree;
        //Naively build synchronized statement.
        build(sst.block());
        build(sst.expression());
        break;
      }
      case POSTFIX_INCREMENT:
      case POSTFIX_DECREMENT:
      case PREFIX_INCREMENT:
      case PREFIX_DECREMENT:
      case UNARY_MINUS:
      case UNARY_PLUS:
      case BITWISE_COMPLEMENT:
      case LOGICAL_COMPLEMENT:
        UnaryExpressionTree e = (UnaryExpressionTree) tree;
        currentBlock.elements.add(e);
        build(e.expression());
        break;
      case PARENTHESIZED_EXPRESSION:
        build(((ParenthesizedTree) tree).expression());
        break;
      case ARRAY_ACCESS_EXPRESSION: {
        ArrayAccessExpressionTree aaet = (ArrayAccessExpressionTree) tree;
        currentBlock.elements.add(aaet);
        build(aaet.expression());
        build(aaet.dimension());
        break;
      }
      case ARRAY_DIMENSION: {
        ArrayDimensionTree arrayDimensionTree = (ArrayDimensionTree) tree;
        build(arrayDimensionTree.expression());
        break;
      }
      case IDENTIFIER:
      case INT_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      default:
        currentBlock.elements.add(tree);
    }

  }

