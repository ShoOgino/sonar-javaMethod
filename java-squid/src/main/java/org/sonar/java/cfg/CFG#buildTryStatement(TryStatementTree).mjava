  private void buildTryStatement(TryStatementTree tryStatementTree) {
    // FIXME only path with no failure constructed for now, (not taking try with resources into consideration).
    currentBlock = createBlock(currentBlock);
    BlockTree finallyBlockTree = tryStatementTree.finallyBlock();
    if (finallyBlockTree != null) {
      currentBlock.isFinallyBlock = true;
      Block finallyBlock = currentBlock;
      build(finallyBlockTree);
      finallyBlock.addExitSuccessor(exitBlock());
      exitBlocks.push(currentBlock);
    }
    Block finallyOrEndBlock = currentBlock;
    Block beforeFinally = createBlock(currentBlock);
    List<Block> catches = new ArrayList<>();
    for (CatchTree catchTree : tryStatementTree.catches()) {
      currentBlock = createBlock(finallyOrEndBlock);
      build(catchTree.block());
      catches.add(currentBlock);
    }
    currentBlock = beforeFinally;
    build(tryStatementTree.block());
    if(currentBlock.exitBlock != null && currentBlock.exitBlock.isFinallyBlock) {
      for (Block catchBlock : catches) {
        currentBlock.exitBlock.addSuccessor(catchBlock);
      }
    } else {
      for (Block catchBlock : catches) {
        currentBlock.addSuccessor(catchBlock);
      }
    }
    build((List<? extends Tree>) tryStatementTree.resources());
    currentBlock = createBlock(currentBlock);
    currentBlock.elements.add(tryStatementTree);
    if (finallyBlockTree != null) {
      exitBlocks.pop();
      if(catches.isEmpty()) {
        currentBlock.addExitSuccessor(finallyOrEndBlock);
      }
    }
    for (Block catchBlock : catches) {
      currentBlock.addSuccessor(catchBlock);
    }
  }

