  protected void init() {
    if (!initalized) {
      initalized = true;
      validateLibraries = project.getModules().isEmpty();
      FilePredicates predicates = fs.predicates();
      hasJavaSources = fs.hasFiles(predicates.and(predicates.hasLanguage("java"), predicates.hasType(InputFile.Type.MAIN)));
      binaries = getFilesFromProperty(JavaClasspathProperties.SONAR_JAVA_BINARIES);
      List<File> libraries = getFilesFromProperty(JavaClasspathProperties.SONAR_JAVA_LIBRARIES);
      boolean useDeprecatedProperties = binaries.isEmpty() && libraries.isEmpty();
      if (useDeprecatedProperties) {
        binaries = getFilesFromProperty("sonar.binaries");
        libraries = getFilesFromProperty("sonar.libraries");
      }
      if (pom != null && libraries.isEmpty()) {
        //check mojo
        elements = getLibrariesFromMaven(pom);
      } else {
        elements = Lists.newArrayList(binaries);
        elements.addAll(libraries);
        if (useDeprecatedProperties && !elements.isEmpty()) {
          LOG.warn("sonar.binaries and sonar.libraries are deprecated since version 2.5 of sonar-java-plugin, please use sonar.java.binaries and sonar.java.libraries instead");
        }
      }
    }
  }

