  public CompilationUnitTree compilationUnit(AstNode astNode) {
    checkType(astNode, JavaLexer.COMPILATION_UNIT);
    ImmutableList.Builder<ImportTree> imports = ImmutableList.builder();
    for (AstNode importTree : astNode.getChildren(Kind.IMPORT)) {
      imports.add((ImportTreeImpl) importTree);
    }
    ImmutableList.Builder<Tree> types = ImmutableList.builder();
    for (AstNode typeNode : astNode.getChildren(Kind.CLASS,
      Kind.ENUM,
      Kind.INTERFACE,
      Kind.ANNOTATION_TYPE)) {
      types.add((Tree) typeNode);
    }

    ExpressionTree packageDeclaration = null;
    ImmutableList.Builder<AnnotationTree> packageAnnotations = ImmutableList.builder();
    if (astNode.hasDirectChildren(JavaLexer.PACKAGE_DECLARATION)) {
      AstNode packageDeclarationNode = astNode.getFirstChild(JavaLexer.PACKAGE_DECLARATION);
      packageDeclaration = (ExpressionTree) packageDeclarationNode.getFirstChild(QUALIFIED_EXPRESSION_KINDS);
      for (AstNode annotationNode : packageDeclarationNode.getChildren(Kind.ANNOTATION)) {
        packageAnnotations.add((AnnotationTree) annotationNode);
      }
    }
    return new JavaTree.CompilationUnitTreeImpl(
      astNode,
      packageDeclaration,
      imports.build(),
      types.build(),
      packageAnnotations.build());
  }

