  /**
   * 9.6.1. Annotation Type Elements
   */
  private void appendAnnotationTypeElementDeclaration(ImmutableList.Builder<Tree> members, ModifiersTree modifiers, AstNode astNode) {
    checkType(astNode, JavaGrammar.ANNOTATION_TYPE_ELEMENT_REST);
    AstNode declarationNode = astNode.getFirstChild(
      JavaGrammar.INTERFACE_DECLARATION,
      JavaGrammar.CLASS_DECLARATION,
      JavaGrammar.ENUM_DECLARATION,
      JavaGrammar.ANNOTATION_TYPE_DECLARATION
      );
    if (declarationNode != null) {
      members.add(typeDeclaration(modifiers, declarationNode));
      return;
    }
    AstNode typeNode = astNode.getFirstChild(TYPE_KINDS);
    AstNode identifierNode = astNode.getFirstChild(JavaTokenType.IDENTIFIER);
    AstNode annotationMethodRestNode = astNode.getFirstChild(JavaGrammar.ANNOTATION_METHOD_OR_CONSTANT_REST).getFirstChild(JavaGrammar.ANNOTATION_METHOD_REST);
    if (annotationMethodRestNode != null) {
      members.add(new MethodTreeImpl(
        annotationMethodRestNode,
        /* modifiers */modifiers,
        /* type parameters */ImmutableList.<TypeParameterTree>of(),
        /* return type */(Tree) typeNode,
        /* name */identifier(identifierNode),
        /* parameters */ImmutableList.<VariableTree>of(),
        /* block */null,
        /* throws */ImmutableList.<ExpressionTree>of(),
        // TODO DEFAULT_VALUE
        /* default value */null
        ));
    } else {
      appendConstantDeclarations(modifiers, members, astNode);
    }
  }

