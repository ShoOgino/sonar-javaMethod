  /**
   * 14.20. The try statement
   */
  private TryStatementTree tryStatement(AstNode astNode) {
    if (astNode.hasDirectChildren(JavaGrammar.TRY_WITH_RESOURCES_STATEMENT)) {
      astNode = astNode.getFirstChild(JavaGrammar.TRY_WITH_RESOURCES_STATEMENT);
    }
    ImmutableList.Builder<CatchTree> catches = ImmutableList.builder();
    for (AstNode catchNode : astNode.getChildren(JavaGrammar.CATCH_CLAUSE)) {
      AstNode catchFormalParameterNode = catchNode.getFirstChild(JavaGrammar.CATCH_FORMAL_PARAMETER);
      catches.add(new CatchTreeImpl(
        catchNode,
        new VariableTreeImpl(
          catchFormalParameterNode,
          // TODO modifiers:
          ModifiersTreeImpl.EMPTY,
          catchType(catchFormalParameterNode.getFirstChild(JavaGrammar.CATCH_TYPE)),
          // TODO WTF why VARIABLE_DECLARATOR_ID in grammar?
          identifier(catchFormalParameterNode.getFirstChild(JavaGrammar.VARIABLE_DECLARATOR_ID).getFirstChild(JavaTokenType.IDENTIFIER)),
          /* initializer: */null
        ),
        (BlockTree) catchNode.getFirstChild(JavaGrammar.BLOCK)
        ));
    }
    BlockTree finallyBlock = null;
    if (astNode.hasDirectChildren(JavaGrammar.FINALLY_)) {
      finallyBlock = (BlockTree) astNode.getFirstChild(JavaGrammar.FINALLY_).getFirstChild(JavaGrammar.BLOCK);
    }
    AstNode resourceSpecificationNode = astNode.getFirstChild(JavaGrammar.RESOURCE_SPECIFICATION);
    return new TryStatementTreeImpl(
      astNode,
      resourceSpecificationNode == null ? ImmutableList.<VariableTree>of() : resourceSpecification(resourceSpecificationNode),
      (BlockTree) astNode.getFirstChild(JavaGrammar.BLOCK),
      catches.build(),
      finallyBlock);
  }

