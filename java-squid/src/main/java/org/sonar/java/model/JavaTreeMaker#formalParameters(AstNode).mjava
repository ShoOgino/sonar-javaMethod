  private List<VariableTree> formalParameters(AstNode astNode) {
    checkType(astNode, JavaGrammar.FORMAL_PARAMETERS);
    ImmutableList.Builder<VariableTree> result = ImmutableList.builder();
    for (AstNode variableDeclaratorIdNode : astNode.getDescendants(JavaGrammar.VARIABLE_DECLARATOR_ID)) {
      AstNode typeNode = variableDeclaratorIdNode.getPreviousAstNode();
      AstNode referenceTypeNode  = typeNode.getPreviousAstNode();
      while(referenceTypeNode.is(JavaGrammar.ANNOTATION)){
        referenceTypeNode = referenceTypeNode.getPreviousAstNode();
      }
      Tree type = typeNode.is(JavaPunctuator.ELLIPSIS) ? new JavaTree.ArrayTypeTreeImpl(typeNode, referenceType(referenceTypeNode)) : referenceType(typeNode);
      result.add(new VariableTreeImpl(
          variableDeclaratorIdNode,
          ModifiersTreeImpl.EMPTY,
          type,
          identifier(variableDeclaratorIdNode.getFirstChild(JavaTokenType.IDENTIFIER)),
          null
      ));
    }
    return result.build();
  }

