  @VisibleForTesting
  public StatementTree statement(AstNode astNode) {
    Preconditions.checkArgument(astNode.is(JavaGrammar.STATEMENT), "Unexpected AstNodeType: %s", astNode.getType().toString());
    final AstNode statementNode = astNode.getFirstChild();
    final StatementTree result;
    switch ((JavaGrammar) statementNode.getType()) {
      case BLOCK:
        result = block(statementNode);
        break;
      case EMPTY_STATEMENT:
        result = emptyStatement(statementNode);
        break;
      case LABELED_STATEMENT:
        result = labeledStatement(statementNode);
        break;
      case EXPRESSION_STATEMENT:
        result = expressionStatement(statementNode);
        break;
      case IF_STATEMENT:
        result = ifStatement(statementNode);
        break;
      case ASSERT_STATEMENT:
        result = assertStatement(statementNode);
        break;
      case SWITCH_STATEMENT:
        result = switchStatement(statementNode);
        break;
      case WHILE_STATEMENT:
        result = whileStatement(statementNode);
        break;
      case DO_STATEMENT:
        result = doStatement(statementNode);
        break;
      case FOR_STATEMENT:
        result = forStatement(statementNode);
        break;
      case BREAK_STATEMENT:
        result = breakStatement(statementNode);
        break;
      case CONTINUE_STATEMENT:
        result = continueStatement(statementNode);
        break;
      case RETURN_STATEMENT:
        result = returnStatement(statementNode);
        break;
      case THROW_STATEMENT:
        result = throwStatement(statementNode);
        break;
      case SYNCHRONIZED_STATEMENT:
        result = synchronizedStatement(statementNode);
        break;
      case TRY_STATEMENT:
        result = tryStatement(statementNode);
        break;
      default:
        throw new IllegalStateException("Unexpected AstNodeType: " + astNode.getType().toString());
    }
    return result;
  }

