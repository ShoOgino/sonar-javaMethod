  private ExpressionTree applySelector(ExpressionTree expression, AstNode selectorNode) {
    checkType(selectorNode, JavaGrammar.SELECTOR);
    if (selectorNode.hasDirectChildren(JavaGrammar.ARGUMENTS)) {
      return new MethodInvocationTreeImpl(
        selectorNode,
        new MemberSelectExpressionTreeImpl(
          selectorNode,
          expression,
          identifier(selectorNode.getFirstChild(JavaTokenType.IDENTIFIER))
        ),
        arguments(selectorNode.getFirstChild(JavaGrammar.ARGUMENTS)));
    } else if (selectorNode.hasDirectChildren(JavaTokenType.IDENTIFIER)) {
      return new MemberSelectExpressionTreeImpl(
        selectorNode,
        expression,
        identifier(selectorNode.getFirstChild(JavaTokenType.IDENTIFIER)));
    } else if (selectorNode.hasDirectChildren(JavaGrammar.EXPLICIT_GENERIC_INVOCATION)) {
      return applyExplicitGenericInvocation(expression, selectorNode.getFirstChild(JavaGrammar.EXPLICIT_GENERIC_INVOCATION));
    } else if (selectorNode.hasDirectChildren(JavaKeyword.THIS)) {
      return new MemberSelectExpressionTreeImpl(
        selectorNode,
        expression,
        identifier(selectorNode.getFirstChild(JavaKeyword.THIS)));
    } else if (selectorNode.hasDirectChildren(JavaGrammar.SUPER_SUFFIX)) {
      return applySuperSuffix(
        new MemberSelectExpressionTreeImpl(
          selectorNode,
          expression,
          identifier(selectorNode.getFirstChild(JavaKeyword.SUPER))
        ),
        selectorNode.getFirstChild(JavaGrammar.SUPER_SUFFIX));
    } else if (selectorNode.hasDirectChildren(JavaKeyword.NEW)) {
      AstNode innerCreatorNode = selectorNode.getFirstChild(JavaGrammar.INNER_CREATOR);
      return applyClassCreatorRest(
        expression,
        identifier(innerCreatorNode.getFirstChild(JavaTokenType.IDENTIFIER)),
        innerCreatorNode.getFirstChild(JavaGrammar.CLASS_CREATOR_REST));
    } else if (selectorNode.hasDirectChildren(JavaGrammar.DIM_EXPR)) {
      return new ArrayAccessExpressionTreeImpl(
        selectorNode,
        expression,
        expression(selectorNode.getFirstChild(JavaGrammar.DIM_EXPR).getFirstChild(JavaGrammar.EXPRESSION)));
    } else {
      throw new IllegalStateException(AstXmlPrinter.print(selectorNode));
    }
  }

