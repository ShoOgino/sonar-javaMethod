  private List<StatementTree> blockStatements(AstNode astNode) {
    Preconditions.checkArgument(astNode.is(JavaGrammar.BLOCK_STATEMENTS), "Unexpected AstNodeType: %s", astNode.getType().toString());
    ImmutableList.Builder<StatementTree> statements = ImmutableList.builder();
    for (AstNode statementNode : astNode.getChildren(JavaGrammar.BLOCK_STATEMENT)) {
      statementNode = statementNode.getFirstChild(
        JavaGrammar.STATEMENT,
        JavaGrammar.LOCAL_VARIABLE_DECLARATION_STATEMENT,
        JavaGrammar.CLASS_DECLARATION,
        JavaGrammar.ENUM_DECLARATION
      );
      if (statementNode.is(JavaGrammar.STATEMENT)) {
        statements.add(statement(statementNode));
      } else if (statementNode.is(JavaGrammar.LOCAL_VARIABLE_DECLARATION_STATEMENT)) {
        // TODO modifiers
        statements.addAll(variableDeclarators(
          JavaTree.ModifiersTreeImpl.EMPTY,
          referenceType(statementNode.getFirstChild(JavaGrammar.TYPE)),
          statementNode.getFirstChild(JavaGrammar.VARIABLE_DECLARATORS)
        ));
      } else if (statementNode.is(JavaGrammar.CLASS_DECLARATION)) {
        statements.add(classDeclaration(JavaTree.ModifiersTreeImpl.EMPTY, statementNode));
      } else if (statementNode.is(JavaGrammar.ENUM_DECLARATION)) {
        statements.add(enumDeclaration(JavaTree.ModifiersTreeImpl.EMPTY, statementNode));
      } else {
        throw new IllegalStateException("Unexpected AstNodeType: " + statementNode.getType().toString());
      }
    }
    return statements.build();
  }

