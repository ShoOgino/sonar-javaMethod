  /**
   * Check if a methodTree is overriden.
   * @return true if overriden, null if it cannot be decided (method symbol not resolved or lack of bytecode for super types).
   */
  public Boolean isOverriden() {
    if(isStatic() || isPrivate()) {
      return false;
    }
    if (isAnnotatedOverride()) {
      return true;
    }
    if(symbol == null) {
      return null;
    }
    Boolean result = false;
    Symbol.TypeSymbol enclosingClass = symbol.enclosingClass();
    if (StringUtils.isEmpty(enclosingClass.getName())) {
      //FIXME : SONARJAVA-645 : exclude methods within anonymous classes
      return null;
    }
    for (Type.ClassType type : superTypes(enclosingClass)) {
      Boolean overrideFromType = overridesFromSymbol(type);
      if (overrideFromType == null) {
        result = null;
      } else if (BooleanUtils.isTrue(overrideFromType)) {
        return true;
      }
    }
    return result;
  }

