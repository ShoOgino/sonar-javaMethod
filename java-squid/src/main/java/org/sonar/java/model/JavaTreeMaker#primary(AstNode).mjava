  /**
   * 15.11. Field Access Expressions
   * 15.12. Method Invocation Expressions
   * 15.13. Array Access Expressions
   */
  @VisibleForTesting
  ExpressionTree primary(AstNode astNode) {
    AstNode firstChildNode = astNode.getFirstChild();
    if (firstChildNode.is(JavaGrammar.PAR_EXPRESSION)) {
      // (expression)
      return expression(firstChildNode);
    } else if (firstChildNode.is(JavaGrammar.NON_WILDCARD_TYPE_ARGUMENTS)) {
      // FIXME
      throw new UnsupportedOperationException("not implemented");
    } else if (firstChildNode.is(JavaKeyword.THIS)) {
      IdentifierTree identifier = identifier(firstChildNode);
      if (astNode.hasDirectChildren(JavaGrammar.ARGUMENTS)) {
        // this(arguments)
        return new JavaTree.MethodInvocationTreeImpl(
          astNode,
          identifier,
          arguments(astNode.getFirstChild(JavaGrammar.ARGUMENTS))
        );
      } else {
        // this
        return identifier;
      }
    } else if (firstChildNode.is(JavaKeyword.SUPER)) {
      // super...
      return applySuperSuffix(
        identifier(firstChildNode),
        astNode.getFirstChild(JavaGrammar.SUPER_SUFFIX)
      );
    } else if (firstChildNode.is(JavaGrammar.LITERAL)) {
      // "literal"
      return literal(firstChildNode);
    } else if (firstChildNode.is(JavaKeyword.NEW)) {
      // new...
      return creator(astNode.getFirstChild(JavaGrammar.CREATOR));
    } else if (firstChildNode.is(JavaGrammar.QUALIFIED_IDENTIFIER)) {
      ExpressionTree identifier = qualifiedIdentifier(firstChildNode);
      AstNode identifierSuffixNode = astNode.getFirstChild(JavaGrammar.IDENTIFIER_SUFFIX);
      if (identifierSuffixNode == null) {
        // id
        return identifier;
      } else {
        if (identifierSuffixNode.getFirstChild().is(JavaPunctuator.LBRK)) {
          if (identifierSuffixNode.hasDirectChildren(JavaKeyword.CLASS)) {
            // 15.8.2. Class Literals
            // id[].class
            return new JavaTree.MemberSelectExpressionTreeImpl(
              astNode,
              applyDim(identifier, identifierSuffixNode.getChildren(JavaGrammar.DIM).size() + 1),
              identifier(identifierSuffixNode.getFirstChild(JavaKeyword.CLASS))
            );
          } else {
            // id[expression]
            return new JavaTree.ArrayAccessExpressionTreeImpl(
              astNode,
              identifier,
              expression(identifierSuffixNode.getFirstChild(JavaGrammar.EXPRESSION))
            );
          }
        } else if (identifierSuffixNode.getFirstChild().is(JavaGrammar.ARGUMENTS)) {
          // id(arguments)
          return new JavaTree.MethodInvocationTreeImpl(
            astNode,
            identifier,
            arguments(identifierSuffixNode.getFirstChild())
          );
        } else if (identifierSuffixNode.getFirstChild().is(JavaPunctuator.DOT)) {
          if (identifierSuffixNode.hasDirectChildren(JavaKeyword.CLASS)) {
            // 15.8.2. Class Literals
            // id.class
            return new JavaTree.MemberSelectExpressionTreeImpl(
              astNode,
              identifier,
              identifier(identifierSuffixNode.getFirstChild(JavaKeyword.CLASS))
            );
          } else if (identifierSuffixNode.hasDirectChildren(JavaGrammar.EXPLICIT_GENERIC_INVOCATION)) {
            // id.<...>...
            return applyExplicitGenericInvocation(identifier, identifierSuffixNode.getFirstChild(JavaGrammar.EXPLICIT_GENERIC_INVOCATION));
          } else if (identifierSuffixNode.hasDirectChildren(JavaKeyword.THIS)) {
            // id.this
            return new JavaTree.MemberSelectExpressionTreeImpl(
              astNode,
              identifier,
              identifier(identifierSuffixNode.getFirstChild(JavaKeyword.THIS))
            );
          } else if (identifierSuffixNode.hasDirectChildren(JavaKeyword.SUPER)) {
            // id.super(arguments)
            return new JavaTree.MethodInvocationTreeImpl(
              astNode,
              new JavaTree.MemberSelectExpressionTreeImpl(
                astNode,
                identifier,
                identifier(identifierSuffixNode.getFirstChild(JavaKeyword.SUPER))
              ),
              arguments(identifierSuffixNode.getFirstChild(JavaGrammar.ARGUMENTS))
            );
          } else if (identifierSuffixNode.hasDirectChildren(JavaKeyword.NEW)) {
            // id.new...
            AstNode innerCreatorNode = identifierSuffixNode.getFirstChild(JavaGrammar.INNER_CREATOR);
            return applyClassCreatorRest(
              identifier,
              identifier(innerCreatorNode.getFirstChild(JavaTokenType.IDENTIFIER)),
              innerCreatorNode.getFirstChild(JavaGrammar.CLASS_CREATOR_REST)
            );
          } else {
            throw new IllegalArgumentException("Unexpected AstNodeType: " + identifierSuffixNode.getChild(1));
          }
        } else {
          throw new IllegalArgumentException("Unexpected AstNodeType: " + identifierSuffixNode.getFirstChild());
        }
      }
    } else if (firstChildNode.is(JavaGrammar.BASIC_TYPE, JavaKeyword.VOID)) {
      // 15.8.2. Class Literals
      // int.class
      // int[].class
      // void.class
      return new JavaTree.MemberSelectExpressionTreeImpl(
        astNode,
        applyDim(basicType(firstChildNode), astNode.getChildren(JavaGrammar.DIM).size()),
        identifier(astNode.getFirstChild(JavaKeyword.CLASS))
      );
    } else {
      throw new IllegalArgumentException("Unexpected AstNodeType: " + firstChildNode.getType());
    }
  }

