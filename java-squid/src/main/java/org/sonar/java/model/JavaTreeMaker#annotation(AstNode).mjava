  private AnnotationTree annotation(AstNode astNode) {
    ImmutableList.Builder<ExpressionTree> arguments = ImmutableList.builder();
    ExpressionTree annotationType = qualifiedIdentifier(astNode.getFirstChild(JavaGrammar.QUALIFIED_IDENTIFIER));
    if (astNode.hasDirectChildren(JavaGrammar.ANNOTATION_REST)) {
      AstNode annotationRest = astNode.getFirstChild(JavaGrammar.ANNOTATION_REST).getFirstChild();
      if (annotationRest.is(JavaGrammar.SINGLE_ELEMENT_ANNOTATION_REST)) {
        arguments.add(elementValue(annotationRest.getFirstChild(JavaGrammar.ELEMENT_VALUE)));
      } else if (annotationRest.is(JavaGrammar.NORMAL_ANNOTATION_REST)) {
        AstNode elementValuePairs = annotationRest.getFirstChild(JavaGrammar.ELEMENT_VALUE_PAIRS);
        if (elementValuePairs != null) {
          List<AstNode> values = elementValuePairs.getChildren(JavaGrammar.ELEMENT_VALUE_PAIR);
          for (AstNode value : values) {
            AstNode identifier = value.getFirstChild(JavaTokenType.IDENTIFIER);
            arguments.add(new AssignmentExpressionTreeImpl(
                value,
                identifier(identifier),
                kindMaps.getAssignmentOperator(JavaPunctuator.EQU),
                elementValue(value.getFirstChild(JavaGrammar.ELEMENT_VALUE))
            ));
          }
        }
      }
    }
    return new JavaTree.AnnotationTreeImpl(astNode, annotationType, arguments.build());
  }

