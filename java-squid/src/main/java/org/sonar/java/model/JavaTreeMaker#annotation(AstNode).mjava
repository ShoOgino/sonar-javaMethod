  private AnnotationTree annotation(AstNode astNode){
    ImmutableList.Builder<ExpressionTree> arguments = ImmutableList.builder();
    ExpressionTree annotationType = qualifiedIdentifier(astNode.getFirstChild(JavaGrammar.QUALIFIED_IDENTIFIER));
    if(astNode.hasDirectChildren(JavaGrammar.ANNOTATION_REST)){
      astNode = astNode.getFirstChild(JavaGrammar.ANNOTATION_REST).getFirstChild();
      if(astNode.is(JavaGrammar.SINGLE_ELEMENT_ANNOTATION_REST)){
        arguments.add(elementValue(astNode.getFirstChild(JavaGrammar.ELEMENT_VALUE)));
      }else if(astNode.is(JavaGrammar.NORMAL_ANNOTATION_REST)){
        astNode = astNode.getFirstChild(JavaGrammar.ELEMENT_VALUE_PAIRS);
        List<AstNode> values = astNode.getChildren(JavaGrammar.ELEMENT_VALUE_PAIR);
        for (AstNode value : values) {
          AstNode identifier = value.getFirstChild(JavaTokenType.IDENTIFIER);
          arguments.add(new JavaTree.AssignmentExpressionTreeImpl(
              value,
              identifier(identifier),
              kindMaps.getAssignmentOperator(JavaPunctuator.EQU),
              elementValue(value.getFirstChild(JavaGrammar.ELEMENT_VALUE))
          ));
        }

      }
    }
    return new JavaTree.AnnotationTreeImpl(astNode, annotationType, arguments.build());
  }

