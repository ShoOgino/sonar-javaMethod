  /**
   * 15.17. Multiplicative Operators
   * 15.18. Additive Operators
   * 15.19. Shift Operators
   * 15.20. Relational Operators
   * 15.21. Equality Operators
   * 15.22. Bitwise and Logical Operators
   * 15.23. Conditional-And Operator &&
   * 15.24. Conditional-Or Operator ||
   */
  private ExpressionTree binaryExpression(AstNode astNode) {
    if (astNode.hasDirectChildren(JavaKeyword.INSTANCEOF)) {
      // 15.20.2. Type Comparison Operator instanceof
      // TODO fix grammar - instanceof can't be chained
      return new InstanceOfTreeImpl(
          astNode,
          expression(astNode.getFirstChild()),
          referenceType(astNode.getFirstChild(JavaGrammar.TYPE)));
    }

    ExpressionTree expression = expression(astNode.getLastChild());
    for (int i = astNode.getNumberOfChildren() - 3; i >= 0; i -= 2) {
      AstNode operatorNode = astNode.getChild(i + 1);
      Tree.Kind kind = kindMaps.getBinaryOperator((JavaPunctuator) operatorNode.getType());
      expression = new BinaryExpressionTreeImpl(
          operatorNode,
          expression(astNode.getChild(i)),
          kind,
          expression
      );
    }
    return expression;
  }

