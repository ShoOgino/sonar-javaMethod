  /**
   * 15.14. Postfix Expressions
   * 15.15. Unary Operators
   * 15.16. Cast Expressions
   */
  private ExpressionTree unaryExpression(AstNode astNode) {
    if (astNode.is(JavaGrammar.CAST_EXPRESSION)) {
      // 15.16. Cast Expressions
      AstNode typeNode = astNode.getFirstChild(JavaPunctuator.LPAR).getNextSibling();
      Tree type;
      if(typeNode.is(JavaGrammar.BASIC_TYPE)){
        type = basicType(typeNode);
      }else{
        type = referenceType(typeNode);
      }
      return new JavaTree.TypeCastExpressionTreeImpl(
          astNode,
          type,
          expression(astNode.getFirstChild(JavaPunctuator.RPAR).getNextSibling()));
    } else if (astNode.hasDirectChildren(JavaGrammar.PREFIX_OP, JavaPunctuator.TILDA, JavaPunctuator.BANG)) {
      // 15.15. Unary Operators
      JavaPunctuator punctuator;
      if(astNode.hasDirectChildren(JavaPunctuator.TILDA, JavaPunctuator.BANG)){
        punctuator = (JavaPunctuator) astNode.getFirstChild(JavaPunctuator.TILDA, JavaPunctuator.BANG).getType();
      }else{
        punctuator = (JavaPunctuator) astNode.getFirstChild(JavaGrammar.PREFIX_OP, JavaPunctuator.TILDA, JavaPunctuator.BANG).getFirstChild().getType();
      }
      Tree.Kind kind = kindMaps.getPrefixOperator(punctuator);
      return new JavaTree.UnaryExpressionTreeImpl(
          astNode,
          kind,
          expression(astNode.getChild(1)));
    } else {
      // 15.14. Postfix Expressions
      ExpressionTree result = expression(astNode.getFirstChild());
      for (AstNode selectorNode : astNode.getChildren(JavaGrammar.SELECTOR)) {
        result = applySelector(result, selectorNode);
      }
      for (AstNode postfixOpNode : astNode.getChildren(JavaGrammar.POST_FIX_OP)) {
        JavaPunctuator punctuator = (JavaPunctuator) postfixOpNode.getFirstChild().getType();
        Tree.Kind kind = kindMaps.getPostfixOperator(punctuator);
        result = new JavaTree.UnaryExpressionTreeImpl(astNode, kind, result);
      }
      return result;
    }
  }

