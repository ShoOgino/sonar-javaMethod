  /**
   * 14.14. The for Statement
   */
  private StatementTree forStatement(AstNode astNode) {
    AstNode formalParameterNode = astNode.getFirstChild(JavaGrammar.FORMAL_PARAMETER);
    if (formalParameterNode == null) {
      AstNode forInitNode = astNode.getFirstChild(JavaGrammar.FOR_INIT);
      final List<StatementTree> forInit;
      if (forInitNode == null) {
        forInit = ImmutableList.of();
      } else if (forInitNode.hasDirectChildren(JavaGrammar.VARIABLE_DECLARATORS)) {
        // TODO modifiers
        forInit = variableDeclarators(
          ModifiersTreeImpl.EMPTY,
          (ExpressionTree) forInitNode.getFirstChild(TYPE_KINDS),
          forInitNode.getFirstChild(JavaGrammar.VARIABLE_DECLARATORS)
          );
      } else {
        forInit = statementExpressions(astNode.getFirstChild(JavaGrammar.FOR_INIT));
      }
      return new ForStatementTreeImpl(
        astNode,
        forInit,
        astNode.hasDirectChildren(JavaGrammar.EXPRESSION) ? expression(astNode.getFirstChild(JavaGrammar.EXPRESSION)) : null,
        astNode.hasDirectChildren(JavaGrammar.FOR_UPDATE) ? statementExpressions(astNode.getFirstChild(JavaGrammar.FOR_UPDATE)) : ImmutableList.<StatementTree>of(),
        statement(astNode.getFirstChild(JavaGrammar.STATEMENT)));
    } else {
      return new ForEachStatementImpl(
        astNode,
        new VariableTreeImpl(
          formalParameterNode,
          ModifiersTreeImpl.EMPTY,
          // TODO dim
          (Tree) formalParameterNode.getFirstChild(TYPE_KINDS),
          ((VariableTreeImpl) formalParameterNode.getFirstChild(Kind.VARIABLE)).simpleName(),
          /* initializer: */null
        ),
        expression(astNode.getFirstChild(JavaGrammar.EXPRESSION)),
        statement(astNode.getFirstChild(JavaGrammar.STATEMENT)));
    }
  }

