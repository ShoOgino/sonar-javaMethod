  /**
   * 8.2. Class Members
   */
  private Tree memberDeclaration(ModifiersTree modifiers, AstNode astNode) {
    checkType(astNode, JavaGrammar.MEMBER_DECL);
    AstNode declaration = astNode.getFirstChild(
      JavaGrammar.INTERFACE_DECLARATION,
      JavaGrammar.CLASS_DECLARATION,
      JavaGrammar.ENUM_DECLARATION,
      Kind.ANNOTATION_TYPE);
    if (declaration != null) {
      return typeDeclaration(modifiers, declaration);
    }
    declaration = astNode.getFirstChild(JavaGrammar.GENERIC_METHOD_OR_CONSTRUCTOR_REST);
    if (declaration != null) {
      AstNode typeAstNode = declaration.getFirstChild(TYPE_KINDS);
      if (typeAstNode == null) {
        typeAstNode = declaration.getFirstChild(JavaKeyword.VOID);
      }

      return methodDeclarator(
        modifiers,
        astNode.hasDirectChildren(JavaGrammar.TYPE_PARAMETERS) ?
          (List<TypeParameterTree>) astNode.getFirstChild(JavaGrammar.TYPE_PARAMETERS) :
          ImmutableList.<TypeParameterTree>of(),
        /* type */typeAstNode,
        /* name */declaration.getFirstChild(JavaTokenType.IDENTIFIER),
        declaration.getFirstChild(JavaGrammar.METHOD_DECLARATOR_REST, JavaGrammar.CONSTRUCTOR_DECLARATOR_REST));
    }
    declaration = astNode.getFirstChild(
      JavaGrammar.METHOD_DECLARATOR_REST,
      JavaGrammar.VOID_METHOD_DECLARATOR_REST,
      JavaGrammar.CONSTRUCTOR_DECLARATOR_REST
      );
    if (declaration != null) {
      AstNode typeAstNode = astNode.getFirstChild(TYPE_KINDS);
      if (typeAstNode == null) {
        typeAstNode = astNode.getFirstChild(JavaKeyword.VOID);
      }

      return methodDeclarator(
        modifiers,
        /* type */typeAstNode,
        /* name */astNode.getFirstChild(JavaTokenType.IDENTIFIER),
        declaration);
    }
    throw new IllegalStateException();
  }

