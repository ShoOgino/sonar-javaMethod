  public List<StatementTree> blockStatement(AstNode astNode) {
    checkType(astNode, JavaGrammar.BLOCK_STATEMENT);

    AstNode statementNode = astNode.getFirstChild(
      JavaGrammar.LOCAL_VARIABLE_DECLARATION_STATEMENT,
      JavaGrammar.CLASS_DECLARATION,
      JavaGrammar.ENUM_DECLARATION);
    if (statementNode == null && astNode.getNumberOfChildren() == 1) {
      // Statement hack (note that they are not all yet migrated to Kinds)
      statementNode = astNode.getFirstChild();
    }

    if (statementNode instanceof StatementTree && !((JavaTree) statementNode).isLegacy()) {
      return ImmutableList.of((StatementTree) statementNode);
    } else if (statementNode.is(JavaGrammar.LOCAL_VARIABLE_DECLARATION_STATEMENT)) {
      return variableDeclarators(
        variableModifiers(statementNode.getFirstChild(JavaGrammar.VARIABLE_MODIFIERS)),
        (ExpressionTree) statementNode.getFirstChild(TYPE_KINDS),
        statementNode.getFirstChild(JavaGrammar.VARIABLE_DECLARATORS));
    } else if (statementNode.is(JavaGrammar.CLASS_DECLARATION)) {
      return ImmutableList.<StatementTree>of(classDeclaration((ModifiersTree) astNode.getFirstChild(JavaGrammar.MODIFIERS), statementNode));
    } else if (statementNode.is(JavaGrammar.ENUM_DECLARATION)) {
      return ImmutableList.<StatementTree>of(enumDeclaration((ModifiersTree) astNode.getFirstChild(JavaGrammar.MODIFIERS), statementNode));
    } else {
      throw new IllegalStateException("Unexpected AstNodeType: " + statementNode.getType().toString());
    }
  }

