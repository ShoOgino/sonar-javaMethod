  public KindMaps() {
    ImmutableMap.Builder<AstNodeType, Tree.Kind> literalsBuilder = ImmutableMap.builder();
    literalsBuilder.put(JavaTokenType.INTEGER_LITERAL, Tree.Kind.INT_LITERAL);
    literalsBuilder.put(JavaTokenType.LONG_LITERAL, Tree.Kind.LONG_LITERAL);
    literalsBuilder.put(JavaTokenType.FLOAT_LITERAL, Tree.Kind.FLOAT_LITERAL);
    literalsBuilder.put(JavaTokenType.DOUBLE_LITERAL, Tree.Kind.DOUBLE_LITERAL);
    literalsBuilder.put(JavaKeyword.TRUE, Tree.Kind.BOOLEAN_LITERAL);
    literalsBuilder.put(JavaKeyword.FALSE, Tree.Kind.BOOLEAN_LITERAL);
    literalsBuilder.put(JavaTokenType.CHARACTER_LITERAL, Tree.Kind.CHAR_LITERAL);
    literalsBuilder.put(JavaTokenType.LITERAL, Tree.Kind.STRING_LITERAL);
    literalsBuilder.put(JavaKeyword.NULL, Tree.Kind.NULL_LITERAL);
    this.literals = literalsBuilder.build();

    modifiers.put(JavaKeyword.PUBLIC, Modifier.PUBLIC);
    modifiers.put(JavaKeyword.PROTECTED, Modifier.PROTECTED);
    modifiers.put(JavaKeyword.PRIVATE, Modifier.PRIVATE);
    modifiers.put(JavaKeyword.ABSTRACT, Modifier.ABSTRACT);
    modifiers.put(JavaKeyword.STATIC, Modifier.STATIC);
    modifiers.put(JavaKeyword.FINAL, Modifier.FINAL);
    modifiers.put(JavaKeyword.TRANSIENT, Modifier.TRANSIENT);
    modifiers.put(JavaKeyword.VOLATILE, Modifier.VOLATILE);
    modifiers.put(JavaKeyword.SYNCHRONIZED, Modifier.SYNCHRONIZED);
    modifiers.put(JavaKeyword.NATIVE, Modifier.NATIVE);
    modifiers.put(JavaKeyword.DEFAULT, Modifier.DEFAULT);
    modifiers.put(JavaKeyword.STRICTFP, Modifier.STRICTFP);

    prefixOperators.put(JavaPunctuator.INC, Tree.Kind.PREFIX_INCREMENT);
    prefixOperators.put(JavaPunctuator.DEC, Tree.Kind.PREFIX_DECREMENT);
    prefixOperators.put(JavaPunctuator.PLUS, Tree.Kind.UNARY_PLUS);
    prefixOperators.put(JavaPunctuator.MINUS, Tree.Kind.UNARY_MINUS);
    prefixOperators.put(JavaPunctuator.TILDA, Tree.Kind.BITWISE_COMPLEMENT);
    prefixOperators.put(JavaPunctuator.BANG, Tree.Kind.LOGICAL_COMPLEMENT);

    postfixOperators.put(JavaPunctuator.INC, Tree.Kind.POSTFIX_INCREMENT);
    postfixOperators.put(JavaPunctuator.DEC, Tree.Kind.POSTFIX_DECREMENT);

    binaryOperators.put(JavaPunctuator.STAR, Tree.Kind.MULTIPLY);
    binaryOperators.put(JavaPunctuator.DIV, Tree.Kind.DIVIDE);
    binaryOperators.put(JavaPunctuator.MOD, Tree.Kind.REMAINDER);
    binaryOperators.put(JavaPunctuator.PLUS, Tree.Kind.PLUS);
    binaryOperators.put(JavaPunctuator.MINUS, Tree.Kind.MINUS);
    binaryOperators.put(JavaPunctuator.SL, Tree.Kind.LEFT_SHIFT);
    binaryOperators.put(JavaPunctuator.SR, Tree.Kind.RIGHT_SHIFT);
    binaryOperators.put(JavaPunctuator.BSR, Tree.Kind.UNSIGNED_RIGHT_SHIFT);
    binaryOperators.put(JavaPunctuator.LT, Tree.Kind.LESS_THAN);
    binaryOperators.put(JavaPunctuator.GT, Tree.Kind.GREATER_THAN);
    binaryOperators.put(JavaPunctuator.LE, Tree.Kind.LESS_THAN_OR_EQUAL_TO);
    binaryOperators.put(JavaPunctuator.GE, Tree.Kind.GREATER_THAN_OR_EQUAL_TO);
    binaryOperators.put(JavaPunctuator.EQUAL, Tree.Kind.EQUAL_TO);
    binaryOperators.put(JavaPunctuator.NOTEQUAL, Tree.Kind.NOT_EQUAL_TO);
    binaryOperators.put(JavaPunctuator.AND, Tree.Kind.AND);
    binaryOperators.put(JavaPunctuator.HAT, Tree.Kind.XOR);
    binaryOperators.put(JavaPunctuator.OR, Tree.Kind.OR);
    binaryOperators.put(JavaPunctuator.ANDAND, Tree.Kind.CONDITIONAL_AND);
    binaryOperators.put(JavaPunctuator.OROR, Tree.Kind.CONDITIONAL_OR);

    assignmentOperators.put(JavaPunctuator.EQU, Tree.Kind.ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.PLUSEQU, Tree.Kind.PLUS_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.STAREQU, Tree.Kind.MULTIPLY_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.DIVEQU, Tree.Kind.DIVIDE_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.MODEQU, Tree.Kind.REMAINDER_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.PLUSEQU, Tree.Kind.PLUS_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.MINUSEQU, Tree.Kind.MINUS_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.SLEQU, Tree.Kind.LEFT_SHIFT_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.SREQU, Tree.Kind.RIGHT_SHIFT_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.BSREQU, Tree.Kind.UNSIGNED_RIGHT_SHIFT_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.ANDEQU, Tree.Kind.AND_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.HATEQU, Tree.Kind.XOR_ASSIGNMENT);
    assignmentOperators.put(JavaPunctuator.OREQU, Tree.Kind.OR_ASSIGNMENT);
  }

