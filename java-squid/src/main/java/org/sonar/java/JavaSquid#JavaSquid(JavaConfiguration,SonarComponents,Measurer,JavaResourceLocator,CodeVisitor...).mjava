  public JavaSquid(JavaConfiguration conf,
                   @Nullable SonarComponents sonarComponents, @Nullable Measurer measurer,
                   JavaResourceLocator javaResourceLocator, CodeVisitor... visitors) {

    astScanner = JavaAstScanner.create(conf);

    Iterable<CodeVisitor> visitorsToBridge = Iterables.concat(Arrays.asList(javaResourceLocator), Arrays.asList(visitors));
    if(measurer != null) {
      Iterable<CodeVisitor> measurers = Arrays.asList((CodeVisitor)measurer);
      visitorsToBridge =  Iterables.concat(visitorsToBridge, measurers);
    }
    List<File> classpath = Lists.newArrayList();
    List<File> testClasspath = Lists.newArrayList();
    Collection<CodeVisitor> testCheckClasses = Lists.<CodeVisitor>newArrayList(javaResourceLocator);
    if(sonarComponents != null) {
      visitorsToBridge = Iterables.concat(
        visitorsToBridge,
        Arrays.asList(
          new FileLinesVisitor(sonarComponents, conf.getCharset()),
          new SyntaxHighlighterVisitor(sonarComponents, conf.getCharset())
          )
        );
      classpath = sonarComponents.getJavaClasspath();
      testClasspath = sonarComponents.getJavaTestClasspath();
      testCheckClasses.addAll(sonarComponents.testCheckClasses());
    }
    setupAstScanner(astScanner, visitorsToBridge, classpath, conf, sonarComponents);
    // TODO unchecked cast
    squidIndex = (SquidIndex) astScanner.getIndex();

    bytecodeScanner = new BytecodeScanner(squidIndex, javaResourceLocator);
    bytecodeScanner.accept(new DependenciesVisitor(graph));

    // External visitors (typically Check ones):
    for (CodeVisitor visitor : visitors) {
      if (visitor instanceof CharsetAwareVisitor) {
        ((CharsetAwareVisitor) visitor).setCharset(conf.getCharset());
      }
      astScanner.accept(visitor);
      bytecodeScanner.accept(visitor);
    }

    astScannerForTests = new AstScanner(astScanner);
    astScannerForTests.accept(new FileVisitor());
    setupAstScanner(astScannerForTests, testCheckClasses, testClasspath, conf, sonarComponents);
  }

