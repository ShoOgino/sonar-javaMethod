    @Override
    public void visitInnerClass(String name, @Nullable String outerName, @Nullable String innerName, int flags) {
      if (!isSynthetic(flags)) {
        // TODO what about flags?
        if (innerName == null) {
          // anonymous class
        } else if (outerName == null) {
          // named class declared within method
          throw new IllegalStateException();
        } else if (className.equals(outerName)) {
          defineInnerClass(name, flags);
        } else if (className.equals(name)) {
          // TODO(Godin): most probably this path and next one are never used on practice, because Resolve must trigger completion of outer classes prior to the access to inner
          defineOuterClass(outerName, innerName, flags);
        } else {
          // FIXME(Godin): for example if loading started from "C1.C2.C3" in case of
          // class C1 { class C2 { class C3 { } } }
          // then name="C1$C2", outerName="C1" and innerName="C3"
        }
      }
    }

