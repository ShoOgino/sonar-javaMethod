  @Override
  public void leaveNode(AstNode astNode) {
    Resolve.Env env = semanticModel.getEnv(astNode);
    final Type type;
    if (astNode.is(JavaGrammar.EXPRESSION)) {
      type = visitExpression(astNode);
    } else if (astNode.is(JavaGrammar.PRIMARY)) {
      type = visitPrimary(env, astNode);
    } else if (astNode.is(JavaGrammar.UNARY_EXPRESSION)) {
      type = visitUnaryExpression(env, astNode);
    } else if (astNode.is(JavaGrammar.LITERAL)) {
      type = visitLiteral(astNode);
    } else if (astNode.is(JavaGrammar.TYPE)) {
      type = visitType(env, astNode);
    } else if (astNode.is(binaryOperatorAstNodeTypes)) {
      type = visitBinaryOperation(env, astNode);
    } else if (astNode.is(JavaGrammar.CONDITIONAL_EXPRESSION)) {
      type = visitConditionalExpression();
    } else if (astNode.is(JavaGrammar.ASSIGNMENT_EXPRESSION)) {
      type = visitAssignmentExpression(astNode);
    } else {
      throw new IllegalArgumentException("Unexpected AstNodeType: " + astNode.getType());
    }
    types.put(astNode, type);
  }

