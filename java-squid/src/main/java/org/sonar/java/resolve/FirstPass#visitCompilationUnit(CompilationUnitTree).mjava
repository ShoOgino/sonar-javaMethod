  @Override
  public void visitCompilationUnit(CompilationUnitTree tree) {
    Symbol.PackageSymbol compilationUnitPackage = symbols.defaultPackage;
    if (tree.packageName() != null) {
      PackageResolverVisitor packageResolver = new PackageResolverVisitor();
      tree.packageName().accept(packageResolver);
      compilationUnitPackage = (Symbol.PackageSymbol) resolve.findIdentInPackage(env, compilationUnitPackage, packageResolver.packageName, Symbol.PCK);
      semanticModel.associateSymbol(tree.packageName(), compilationUnitPackage);
    }
    compilationUnitPackage.members = new Scope(compilationUnitPackage);

    env = new Resolve.Env();
    env.packge = compilationUnitPackage;
    env.scope = compilationUnitPackage.members;
    env.namedImports = new Scope(compilationUnitPackage);
    env.starImports = resolve.createStarImportScope(compilationUnitPackage);
    env.staticStarImports = resolve.createStaticStarImportScope(compilationUnitPackage);
    semanticModel.associateEnv(tree, env);

    super.visitCompilationUnit(tree);
    restoreEnvironment(tree);
    resolveImports(tree.imports());
    completeSymbols();
  }

