    @Override
    public void complete(Symbol symbol) {
      Preconditions.checkArgument(symbol.kind == Symbol.PCK);
      Symbol.PackageSymbol packageSymbol = (Symbol.PackageSymbol) symbol;
      String packagePath = Convert.bytecodeName(formFullName(packageSymbol));
      for (File baseDir : projectClasspath) {
        //TODO Handle case of packages in jar files.
        File pck = new File(baseDir, packagePath);
        if (pck.exists()) {
          FilenameFilter filter = new FilenameFilter() {
            @Override
            public boolean accept(File file, String s) {
              //if class name contains $ it is an inner class and should be completed by bytecode visitors
              //Handle only .class files, ignore subpackages or other resources.
              return !s.contains("$") && s.endsWith(".class");
            }
          };
          for (String classFileName : pck.list(filter)) {
            String className = Convert.packagePart(classFileName);
            Symbol classSymbol = getClassSymbol(packagePath + "/" + className);
            packageSymbol.members.enter(classSymbol);
          }
        }
      }
    }

