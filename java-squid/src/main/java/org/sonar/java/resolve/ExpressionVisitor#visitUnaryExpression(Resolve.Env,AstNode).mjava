  /**
   * Computes type of unary expression.
   */
  private Type visitUnaryExpression(Resolve.Env env, AstNode astNode) {
    final Type result;
    AstNode firstChildNode = astNode.getFirstChild();
    if (firstChildNode.is(JavaGrammar.CAST_EXPRESSION)) {
      // type cast
      result = getType(firstChildNode);
    } else if (firstChildNode.is(JavaGrammar.PREFIX_OP)) {
      result = getType(firstChildNode.getNextSibling());
    } else if(firstChildNode.is(JavaGrammar.UNARY_EXPRESSION_NOT_PLUS_MINUS)){
      result = getType(firstChildNode);
    }else{
      throw new IllegalArgumentException("Unexpected AstNodeType: " + firstChildNode.getType());
    }
    return result;
  }

