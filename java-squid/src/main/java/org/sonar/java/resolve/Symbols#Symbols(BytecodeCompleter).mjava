  public Symbols(BytecodeCompleter bytecodeCompleter) {
    rootPackage = new Symbol.PackageSymbol("", null);
    defaultPackage = new Symbol.PackageSymbol("", rootPackage);

    predefClass = new Symbol.TypeSymbol(Flags.PUBLIC, "", rootPackage);
    predefClass.members = new Scope(predefClass);
    ((Type.ClassType) predefClass.type).interfaces = ImmutableList.of();

    unknownSymbol = new Symbol.TypeSymbol(Flags.PUBLIC, /* TODO name */"", rootPackage);
    unknownSymbol.members = new Scope(unknownSymbol);
    unknownType = new Type.ClassType(unknownSymbol) {
      @Override
      public String toString() {
        return "!unknown!";
      }
    };
    unknownType.tag = Type.UNKNOWN;
    unknownType.interfaces = ImmutableList.of();
    unknownSymbol.type = unknownType;

    // TODO should have type "noType":
    noSymbol = new Symbol.TypeSymbol(0, "", rootPackage);

    methodClass = new Symbol.TypeSymbol(Flags.PUBLIC, "", noSymbol);

    // builtin types
    byteType = initType(Type.BYTE, "byte");
    charType = initType(Type.CHAR, "char");
    shortType = initType(Type.SHORT, "short");
    intType = initType(Type.INT, "int");
    longType = initType(Type.LONG, "long");
    floatType = initType(Type.FLOAT, "float");
    doubleType = initType(Type.DOUBLE, "double");
    booleanType = initType(Type.BOOLEAN, "boolean");
    nullType = initType(Type.BOT, "<nulltype>");
    voidType = initType(Type.VOID, "void");

    bytecodeCompleter.init(this);

    // predefined types for java lang
    Symbol.PackageSymbol javalang = bytecodeCompleter.enterPackage("java.lang");
    //define a star import scope to let resolve types to java.lang when needed.
    javalang.members = new Scope.StarImportScope(javalang, bytecodeCompleter);
    javalang.members.enter(javalang);

    objectType = bytecodeCompleter.loadClass("java.lang.Object").type;
    classType = bytecodeCompleter.loadClass("java.lang.Class").type;
    stringType = bytecodeCompleter.loadClass("java.lang.String").type;
    cloneableType = bytecodeCompleter.loadClass("java.lang.Cloneable").type;
    serializableType = bytecodeCompleter.loadClass("java.io.Serializable").type;
    annotationType = bytecodeCompleter.loadClass("java.lang.annotation.Annotation").type;

    // TODO comment me
    arrayClass = new Symbol.TypeSymbol(Flags.PUBLIC, "Array", noSymbol);
    Type.ClassType arrayClassType = (Type.ClassType) arrayClass.type;
    arrayClassType.supertype = objectType;
    arrayClassType.interfaces = ImmutableList.of(cloneableType, serializableType);
    arrayClass.members = new Scope(arrayClass);
    arrayClass.members().enter(new Symbol.VariableSymbol(Flags.PUBLIC | Flags.FINAL, "length", intType, arrayClass));
    // TODO arrayClass implements clone() method

    enterOperators();
  }

