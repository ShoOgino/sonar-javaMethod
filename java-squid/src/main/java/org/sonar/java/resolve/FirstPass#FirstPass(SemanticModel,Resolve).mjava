  public FirstPass(SemanticModel semanticModel, Resolve resolve) {
    this.semanticModel = semanticModel;
    this.completer = new SecondPass(semanticModel, resolve);
    scopeAndSymbolAstNodeTypes = new AstNodeType[]{
      JavaGrammar.COMPILATION_UNIT,
      JavaGrammar.CLASS_DECLARATION,
      JavaGrammar.INTERFACE_DECLARATION,
      JavaGrammar.ENUM_DECLARATION,
      JavaGrammar.ANNOTATION_TYPE_DECLARATION,
      // Method or constructor
      JavaGrammar.METHOD_DECLARATOR_REST,
      JavaGrammar.VOID_METHOD_DECLARATOR_REST,
      JavaGrammar.CONSTRUCTOR_DECLARATOR_REST,
      JavaGrammar.INTERFACE_METHOD_DECLARATOR_REST,
      JavaGrammar.VOID_INTERFACE_METHOD_DECLARATORS_REST,
      JavaGrammar.ANNOTATION_METHOD_REST};
    scopeAstNodeTypes = new AstNodeType[]{
      JavaGrammar.BLOCK,
      JavaGrammar.FOR_STATEMENT};
    symbolAstNodeTypes = new AstNodeType[]{
      JavaGrammar.FIELD_DECLARATION,
      JavaGrammar.ENUM_CONSTANT,
      JavaGrammar.CONSTANT_DECLARATOR_REST,
      JavaGrammar.FORMAL_PARAMETERS_DECLS_REST,
      JavaGrammar.LOCAL_VARIABLE_DECLARATION_STATEMENT,
      JavaGrammar.FOR_INIT,
      JavaGrammar.FORMAL_PARAMETER,
      JavaGrammar.CATCH_FORMAL_PARAMETER,
      JavaGrammar.RESOURCE,
    };
  }

