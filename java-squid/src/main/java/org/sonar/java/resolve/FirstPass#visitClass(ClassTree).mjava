  @Override
  public void visitClass(ClassTree tree) {
    String name = tree.simpleName();
    int flag = 0;
    AstNode astNode = getNode(tree);
    AstNode toAssociate = astNode;
    boolean anonymousClass = StringUtils.isEmpty(name);
    if (anonymousClass) {
      name = "";
      toAssociate = astNode.getFirstChild(JavaGrammar.CLASS_BODY);
    } else {
      flag = computeClassFlags(astNode);
    }
    Symbol.TypeSymbol symbol = new Symbol.TypeSymbol(flag, name, env.scope.owner);
    if (!anonymousClass) {
      enterSymbol(astNode.getFirstChild(JavaTokenType.IDENTIFIER), symbol);
    }
    symbol.members = new Scope(symbol);
    symbol.completer = completer;
    uncompleted.add(symbol);

    // Save current environment to be able to complete class later
    semanticModel.saveEnv(symbol, env);

    Resolve.Env classEnv = env.dup();
    classEnv.outer = env;
    classEnv.enclosingClass = symbol;
    classEnv.scope = symbol.members;
    env = classEnv;

    semanticModel.associateEnv(toAssociate, env);
    super.visitClass(tree);
    restoreEnvironment(astNode); //TODO should we avoid restoring env for enum constants ?
  }

