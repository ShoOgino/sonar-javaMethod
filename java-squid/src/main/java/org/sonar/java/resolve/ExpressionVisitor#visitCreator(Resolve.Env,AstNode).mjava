  private Type visitCreator(Resolve.Env env, AstNode astNode) {
    // TODO handle NON_WILDCARD_TYPE_ARGUMENTS
    final Type result;
    if (astNode.hasDirectChildren(JavaGrammar.ARRAY_CREATOR_REST)) {
      Type type = getType(astNode.getFirstChild(JavaGrammar.CLASS_TYPE, JavaGrammar.BASIC_TYPE));
      astNode = astNode.getFirstChild(JavaGrammar.ARRAY_CREATOR_REST);
      int dimensions = astNode.getChildren(JavaPunctuator.LBRK, JavaGrammar.DIM, JavaGrammar.DIM_EXPR).size();
      for (int i = 0; i < dimensions; i++) {
        type = new Type.ArrayType(type, symbols.arrayClass);
      }
      result = type;
    } else if (astNode.hasDirectChildren(JavaGrammar.CLASS_CREATOR_REST)) {
      if (astNode.getFirstChild(JavaGrammar.CLASS_CREATOR_REST).hasDirectChildren(JavaGrammar.CLASS_BODY)) {
        // Anonymous Class
        // TODO type of anonymous class can be obtained from symbol, which is stored in semanticModel
        result = symbols.unknownType;
      } else {
        astNode = astNode.getFirstChild(JavaGrammar.CREATED_NAME);
        result = resolveType(env, astNode);
      }
    } else {
      throw new IllegalArgumentException("Unexpected AstNodeType: " + astNode.getType());
    }
    return result;
  }

