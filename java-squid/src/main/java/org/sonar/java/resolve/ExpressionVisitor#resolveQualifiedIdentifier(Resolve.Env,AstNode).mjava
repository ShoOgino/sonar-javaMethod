  /**
   * TODO duplication of {@link org.sonar.java.resolve.ThirdPass#resolve(com.sonar.sslr.api.AstNode)}
   */
  private Type resolveQualifiedIdentifier(Resolve.Env env, AstNode astNode) {
    Preconditions.checkArgument(astNode.is(JavaGrammar.QUALIFIED_IDENTIFIER));

    List<AstNode> identifiers = astNode.getChildren(JavaTokenType.IDENTIFIER);

    Symbol site = resolve.findIdent(env, identifiers.get(0).getTokenValue(), Symbol.VAR | Symbol.TYP | Symbol.PCK);
    // FIXME associateReference(identifiers.get(0), site);
    for (AstNode identifierNode : identifiers.subList(1, identifiers.size())) {
      if (site.kind >= Symbol.ERRONEOUS) {
        return symbols.unknownType;
      }
      String name = identifierNode.getTokenValue();
      if (site.kind == Symbol.VAR) {
        Type type = ((Symbol.VariableSymbol) site).type;
        // TODO avoid null
        if (type == null) {
          return symbols.unknownType;
        }
        site = resolve.findIdentInType(env, type.symbol, name, Symbol.VAR | Symbol.TYP);
      } else if (site.kind == Symbol.TYP) {
        site = resolve.findIdentInType(env, (Symbol.TypeSymbol) site, name, Symbol.VAR | Symbol.TYP);
      } else if (site.kind == Symbol.PCK) {
        site = resolve.findIdentInPackage(env, site, name, Symbol.VAR | Symbol.PCK);
      } else {
        throw new IllegalStateException();
      }
      // FIXME associateReference(identifierNode, site);
    }
    return getTypeOfSymbol(site);
  }

