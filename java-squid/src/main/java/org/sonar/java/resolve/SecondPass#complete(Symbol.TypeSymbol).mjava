  public void complete(Symbol.TypeSymbol symbol) {
    Resolve.Env env = semanticModel.getEnv(symbol);

    if ((symbol.flags() & Flags.INTERFACE) == 0) {
      // If this is a class, enter symbols for "this" and "super".
      symbol.members.enter(new Symbol.VariableSymbol(Flags.FINAL, "this", symbol.type, symbol));
      // TODO super
    }

    if ("".equals(symbol.name)) {
      // Anonymous Class Declaration
      ((Type.ClassType) symbol.type).interfaces = ImmutableList.of();
      return;
    }

    AstNode astNode = semanticModel.getAstNode(symbol).getParent();

    AstNode superclassNode = astNode.getFirstChild(JavaGrammar.CLASS_TYPE);
    if (superclassNode != null) {
      ((Type.ClassType) symbol.type).supertype = resolveType(env, superclassNode).type;
    } else {
      // TODO superclass is java.lang.Object or java.lang.Enum
    }

    ImmutableList.Builder<Type> interfaces = ImmutableList.builder();
    if (astNode.hasDirectChildren(JavaGrammar.CLASS_TYPE_LIST)) {
      for (AstNode interfaceNode : astNode.getFirstChild(JavaGrammar.CLASS_TYPE_LIST).getChildren(JavaGrammar.CLASS_TYPE)) {
        Type interfaceType = castToTypeIfPossible(resolveType(env, interfaceNode));
        if (interfaceType != null) {
          interfaces.add(interfaceType);
        }
      }
    }
    // TODO interface of AnnotationType is java.lang.annotation.Annotation
    ((Type.ClassType) symbol.type).interfaces = interfaces.build();
  }

