  private Type visitUnaryExpression(AstNode astNode) {
    final Type result;
    AstNode firstChildNode = astNode.getFirstChild();
    if (firstChildNode.is(JavaPunctuator.LPAR)) {
      // type cast
      result = getType(astNode.getFirstChild(JavaGrammar.TYPE));
    } else if (firstChildNode.is(JavaGrammar.PRIMARY)) {
      Type type = getType(firstChildNode);
      for (AstNode selectorNode : astNode.getChildren(JavaGrammar.SELECTOR)) {
        type = applySelector(type, selectorNode);
      }
      result = type;
    } else if (astNode.getFirstChild().is(JavaGrammar.PREFIX_OP)) {
      result = getType(astNode.getFirstChild().getNextSibling());
    } else {
      throw new IllegalArgumentException("Unexpected AstNodeType: " + firstChildNode.getType());
    }
    return result;
  }

