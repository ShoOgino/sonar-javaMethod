    @Override
    public FieldVisitor visitField(int flags, String name, String desc, String signature, Object value) {
      if (!isSynthetic(flags)) {
        // TODO(Godin): there is no guarantee that bytecode flags can be mapped one-to-one into our flags
        Symbol.VariableSymbol symbol = new Symbol.VariableSymbol(flags, name, classSymbol);
        org.objectweb.asm.Type asmType = org.objectweb.asm.Type.getType(desc);
        switch (asmType.getSort()) {
          case org.objectweb.asm.Type.OBJECT:
            symbol.type = getCompletedClassSymbol(asmType.getInternalName()).type;
            break;
          case org.objectweb.asm.Type.BYTE:
            symbol.type = symbols.byteType;
            break;
          case org.objectweb.asm.Type.CHAR:
            symbol.type = symbols.charType;
            break;
          case org.objectweb.asm.Type.SHORT:
            symbol.type = symbols.shortType;
            break;
          case org.objectweb.asm.Type.INT:
            symbol.type = symbols.intType;
            break;
          case org.objectweb.asm.Type.LONG:
            symbol.type = symbols.longType;
            break;
          case org.objectweb.asm.Type.FLOAT:
            symbol.type = symbols.floatType;
            break;
          case org.objectweb.asm.Type.DOUBLE:
            symbol.type = symbols.doubleType;
            break;
          case org.objectweb.asm.Type.BOOLEAN:
            symbol.type = symbols.booleanType;
            break;
          case org.objectweb.asm.Type.VOID:
          default:
            // FIXME
            break;
        }
        classSymbol.members.enter(symbol);
      }

      // TODO implement FieldVisitor?
      return null;
    }

