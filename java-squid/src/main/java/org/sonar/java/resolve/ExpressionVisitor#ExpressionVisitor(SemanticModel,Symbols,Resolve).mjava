  public ExpressionVisitor(SemanticModel semanticModel, Symbols symbols, Resolve resolve) {
    this.semanticModel = semanticModel;
    this.symbols = symbols;
    this.resolve = resolve;

    typesOfLiterals.put(JavaKeyword.TRUE, symbols.booleanType);
    typesOfLiterals.put(JavaKeyword.FALSE, symbols.booleanType);
    typesOfLiterals.put(JavaKeyword.NULL, symbols.nullType);
    typesOfLiterals.put(JavaTokenType.CHARACTER_LITERAL, symbols.charType);
    typesOfLiterals.put(JavaTokenType.LITERAL, symbols.stringType);
    typesOfLiterals.put(JavaTokenType.FLOAT_LITERAL, symbols.floatType);
    typesOfLiterals.put(JavaTokenType.DOUBLE_LITERAL, symbols.doubleType);
    typesOfLiterals.put(JavaTokenType.LONG_LITERAL, symbols.longType);
    typesOfLiterals.put(JavaTokenType.INTEGER_LITERAL, symbols.intType);

    binaryOperatorAstNodeTypes = new AstNodeType[]{
      JavaGrammar.MULTIPLICATIVE_EXPRESSION,
      JavaGrammar.ADDITIVE_EXPRESSION,
      JavaGrammar.SHIFT_EXPRESSION,
      JavaGrammar.RELATIONAL_EXPRESSION,
      JavaGrammar.EQUALITY_EXPRESSION,
      JavaGrammar.AND_EXPRESSION,
      JavaGrammar.EXCLUSIVE_OR_EXPRESSION,
      JavaGrammar.INCLUSIVE_OR_EXPRESSION,
      JavaGrammar.CONDITIONAL_AND_EXPRESSION,
      JavaGrammar.CONDITIONAL_OR_EXPRESSION
    };
  }

