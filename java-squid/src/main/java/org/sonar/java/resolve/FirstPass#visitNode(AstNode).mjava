  @Override
  public void visitNode(AstNode astNode) {
    if (astNode.is(JavaGrammar.COMPILATION_UNIT)) {
      visitCompilationUnit(astNode);
    } else if (astNode.is(JavaGrammar.CLASS_DECLARATION, JavaGrammar.INTERFACE_DECLARATION, JavaGrammar.ENUM_DECLARATION, JavaGrammar.ANNOTATION_TYPE_DECLARATION)) {
      visitClassDeclaration(astNode);
    } else if (astNode.is(
      JavaGrammar.METHOD_DECLARATOR_REST,
      JavaGrammar.VOID_METHOD_DECLARATOR_REST,
      JavaGrammar.CONSTRUCTOR_DECLARATOR_REST,
      JavaGrammar.INTERFACE_METHOD_DECLARATOR_REST,
      JavaGrammar.VOID_INTERFACE_METHOD_DECLARATORS_REST,
      JavaGrammar.ANNOTATION_METHOD_REST)) {
      visitMethodDeclaration(astNode);
    } else if (astNode.is(JavaGrammar.ENUM_CONSTANT)) {
      visitEnumConstant(astNode);
    } else if (astNode.is(JavaGrammar.FIELD_DECLARATION)) {
      visitFieldDeclaration(astNode);
    } else if (astNode.is(JavaGrammar.CONSTANT_DECLARATOR_REST)) {
      visitConstantDeclaration(astNode);
    } else if (astNode.is(JavaGrammar.FORMAL_PARAMETERS_DECLS_REST)) {
      visitMethodParameter(astNode);
    } else if (astNode.is(JavaGrammar.LOCAL_VARIABLE_DECLARATION_STATEMENT)) {
      visitLocalVariableDeclarationStatement(astNode);
    } else if (astNode.is(JavaGrammar.FOR_INIT)) {
      visitForInit(astNode);
    } else if (astNode.is(JavaGrammar.FORMAL_PARAMETER)) {
      visitForFormalParameter(astNode);
    } else if (astNode.is(JavaGrammar.CATCH_FORMAL_PARAMETER)) {
      visitCatchFormalParameter(astNode);
    } else if (astNode.is(JavaGrammar.RESOURCE)) {
      visitResource(astNode);
    } else if (astNode.is(JavaGrammar.BLOCK)) {
      visitBlockStatement(astNode);
    } else if (astNode.is(JavaGrammar.FOR_STATEMENT)) {
      visitForStatement(astNode);
    } else {
      throw new IllegalArgumentException("Unexpected AstNodeType: " + astNode.getType());
    }
  }

