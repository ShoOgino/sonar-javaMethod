  public Symbols() {
    rootPackage = new Symbol.PackageSymbol("", null);

    predefClass = new Symbol.TypeSymbol(Flags.PUBLIC, "", rootPackage);
    predefClass.members = new Scope(predefClass);
    ((Type.ClassType) predefClass.type).interfaces = ImmutableList.of();

    unknownSymbol = new Symbol.TypeSymbol(Flags.PUBLIC, /* TODO name */"", rootPackage);
    unknownSymbol.members = new Scope(unknownSymbol);
    unknownType = new Type.ClassType(unknownSymbol) {
      @Override
      public String toString() {
        return "!unknown!";
      }
    };
    unknownType.interfaces = ImmutableList.of();
    unknownSymbol.type = unknownType;

    // builtin types
    byteType = initType("byte");
    charType = initType("char");
    shortType = initType("short");
    intType = initType("int");
    longType = initType("long");
    floatType = initType("float");
    doubleType = initType("double");
    booleanType = initType("boolean");

    nullType = initType("<nulltype>");

    // predefined types
    objectType = enterClass("java.lang.Object");
    classType = enterClass("java.lang.Class");
    stringType = enterClass("java.lang.String");
    cloneableType = enterClass("java.lang.Cloneable");
    serializableType = enterClass("java.io.Serializable");

    // TODO comment me
    arrayClass = new Symbol.TypeSymbol(Flags.PUBLIC, "Array", null);
    Type.ClassType arrayClassType = (Type.ClassType) arrayClass.type;
    arrayClassType.supertype = objectType;
    arrayClassType.interfaces = ImmutableList.of(cloneableType, serializableType);
    arrayClass.members = new Scope(arrayClass);
    arrayClass.members().enter(new Symbol.VariableSymbol(Flags.PUBLIC | Flags.FINAL, "length", intType, arrayClass));
    // TODO arrayClass implements clone() method
  }

