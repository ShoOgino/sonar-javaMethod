  private Type applySelector(Resolve.Env env, Type type, AstNode astNode) {
    Preconditions.checkArgument(astNode.is(JavaGrammar.SELECTOR));
    final Type result;
    if (type == symbols.unknownType || /* TODO avoid null */ type == null) {
      return symbols.unknownType;
    } else if (astNode.getFirstChild().is(JavaGrammar.DIM_EXPR)) {
      // array access
      // TODO get rid of "instanceof"
      if (type instanceof Type.ArrayType) {
        result = ((Type.ArrayType) type).elementType;
      } else {
        result = symbols.unknownType;
      }
    } else if (astNode.hasDirectChildren(JavaTokenType.IDENTIFIER)) {
      if (astNode.hasDirectChildren(JavaGrammar.ARGUMENTS)) {
        // method call
        result = symbols.unknownType;
      } else {
        // field access
        AstNode identifierNode = astNode.getFirstChild(JavaTokenType.IDENTIFIER);
        Symbol symbol = resolve.findIdentInType(env, type.symbol, identifierNode.getTokenValue(), Symbol.VAR); // NPE
        associateReference(identifierNode, symbol);
        result = getTypeOfSymbol(symbol);
      }
    } else {
      result = symbols.unknownType;
    }
    return result;
  }

