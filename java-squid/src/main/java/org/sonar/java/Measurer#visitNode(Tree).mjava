  @Override
  public void visitNode(Tree tree) {
    if (tree.is(Tree.Kind.CLASS) || tree.is(Tree.Kind.INTERFACE) || tree.is(Tree.Kind.ENUM) || tree.is(Tree.Kind.ANNOTATION_TYPE)) {
      classTrees.push((ClassTree) tree);
    }
    if (tree.is(Tree.Kind.METHOD) || tree.is(Tree.Kind.CONSTRUCTOR)) {
      //don't count methods in anonymous classes.
      if (classTrees.peek().simpleName() != null) {
        MethodTree methodTree = (MethodTree) tree;
        if (accessorVisitorST.isAccessor(classTrees.peek(), methodTree)) {
          accessors++;
        } else {
          methods++;
          int methodComplexity = complexityVisitorST.scan(classTrees.peek(), methodTree);
          methodComplexityDistribution.add(methodComplexity);
          complexityInMethods += methodComplexity;
        }
      }
    }

  }

