    @Override
    public List<ProgramState> setConstraint(ProgramState programState, BooleanConstraint booleanConstraint) {
      if (BooleanConstraint.TRUE.equals(booleanConstraint)) {
        if (NullConstraint.NULL.equals(programState.constraints.get(operand))) {
          // irrealizable constraint : instance of true if operand is null
          return ImmutableList.of();
        }
        // if instanceof is true then we know for sure that expression is not null.
        List<ProgramState> ps = operand.setConstraint(programState, NullConstraint.NOT_NULL);
        if (ps.size() == 1 && ps.get(0).equals(programState)) {
          // FIXME we already know that operand is NOT NULL, so we add a different constraint to distinguish program state. Typed Constraint
          // should store the deduced type.
          Map<SymbolicValue, Object> temp = Maps.newHashMap(programState.constraints);
          temp.put(this, new ConstraintManager.TypedConstraint());
          return ImmutableList.of(new ProgramState(programState.values, temp, programState.visitedPoints, programState.stack));
        }
        return ps;
      }
      return ImmutableList.of(programState);
    }

