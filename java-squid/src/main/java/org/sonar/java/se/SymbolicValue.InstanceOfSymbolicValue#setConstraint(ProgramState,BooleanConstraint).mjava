    @Override
    public ProgramState setConstraint(ProgramState programState, BooleanConstraint booleanConstraint) {
      if (BooleanConstraint.TRUE.equals(booleanConstraint)) {
        if (NullConstraint.NULL.equals(programState.constraints.get(operand))) {
          // irrealizable constraint : instance of true if operand is null
          return null;
        }
        // if instanceof is true then we know for sure that expression is not null.
        ProgramState ps = operand.setConstraint(programState, NullConstraint.NOT_NULL);
        if(ps.equals(programState)) {
          //FIXME we already know that operand is NOT NULL, so we add a different constraint to distinguish program state. Typed Constraint should store the deduced type.
          Map<SymbolicValue, Object> temp = Maps.newHashMap(programState.constraints);
          temp.put(this, new ConstraintManager.TypedConstraint());
          ps = new ProgramState(programState.values, temp, programState.visitedPoints, programState.stack);
        }
        return ps;
      }
      return programState;
    }

