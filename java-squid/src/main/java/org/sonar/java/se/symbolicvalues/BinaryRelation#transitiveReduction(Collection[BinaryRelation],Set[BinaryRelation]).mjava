  /**
   * Returns a new list of relations, built by combining one of the known relations that can be combined transitively with the receiver
   * 
   * @param knownRelations the list of relations known so far
   * @param usedRelations the list of relation that have been used in past recursive checks
   * @return a list of relations containing at least one new relation; empty if no new combination was found.
   */
  private Collection<BinaryRelation> transitiveReduction(Collection<BinaryRelation> knownRelations, Set<BinaryRelation> usedRelations) {
    boolean changed = false;
    List<BinaryRelation> result = new ArrayList<>();
    for (BinaryRelation relation : knownRelations) {
      boolean used = false;
      if (leftOp.equals(relation.leftOp)) {
        used = result.addAll(relation.combinedRelations(knownRelations, usedRelations));
      } else if (leftOp.equals(relation.rightOp)) {
        used = result.addAll(relation.symmetric().combinedRelations(knownRelations, usedRelations));
      }
      if (used) {
        changed = true;
      } else {
        result.add(relation);
      }
    }
    return changed ? result : Collections.<BinaryRelation>emptyList();
  }

