    @Override
    public List<ProgramState> setConstraint(ProgramState programState, BooleanConstraint booleanConstraint) {
      if (leftOp.equals(rightOp)) {
        if (shouldNotInverse().equals(booleanConstraint)) {
          return ImmutableList.of(programState);
        }
        return ImmutableList.of();
      }
      List<ProgramState> result = copyConstraint(leftOp, rightOp, programState, booleanConstraint);
      if (result.isEmpty()) {
        return ImmutableList.of();
      }
      List<ProgramState> reversedResult = new ArrayList<>();
      for (ProgramState ps : result) {
        List<ProgramState> reversedStates = copyConstraint(rightOp, leftOp, ps, booleanConstraint);
        if (reversedStates.size() == 1 && reversedStates.get(0) == programState) {
          Map<SymbolicValue, Object> newConstraints = Maps.newHashMap(programState.constraints);
          newConstraints.put(this, booleanConstraint);
          reversedResult.add(new ProgramState(programState.values, newConstraints, programState.visitedPoints, programState.stack));
        } else {
          reversedResult.addAll(reversedStates);
        }
      }
      return reversedResult;

    }

