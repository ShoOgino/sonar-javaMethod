    @Override
    public List<ProgramState> setConstraint(ProgramState programState, BooleanConstraint booleanConstraint) {
      if (leftOp.equals(rightOp)) {
        if (shouldNotInverse().equals(booleanConstraint)) {
          return ImmutableList.of(programState);
        }
        return ImmutableList.of();
      }
      List<ProgramState> copiedConstraints = copyConstraint(leftOp, rightOp, programState, booleanConstraint);
      if (copiedConstraints.isEmpty()) {
        return ImmutableList.of();
      }
      List<ProgramState> results = new ArrayList<>();
      for (ProgramState ps : copiedConstraints) {
        List<ProgramState> copiedConstraintsRightToLeft = copyConstraint(rightOp, leftOp, ps, booleanConstraint);
        if (copiedConstraintsRightToLeft.size() == 1 && copiedConstraintsRightToLeft.get(0).equals(programState)) {
          Map<SymbolicValue, Object> newConstraints = Maps.newHashMap(programState.constraints);
          newConstraints.put(this, booleanConstraint);
          results.add(new ProgramState(programState.values, newConstraints, programState.visitedPoints, programState.stack));
        } else {
          results.addAll(copiedConstraintsRightToLeft);
        }
      }
      return results;

    }

