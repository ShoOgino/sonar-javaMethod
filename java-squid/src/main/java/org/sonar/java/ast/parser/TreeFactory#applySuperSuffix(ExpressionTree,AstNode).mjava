  private ExpressionTree applySuperSuffix(ExpressionTree expression, AstNode superSuffixNode) {
    Preconditions.checkArgument(!((JavaTree) expression).isLegacy());
    JavaTreeMaker.checkType(superSuffixNode, JavaGrammar.SUPER_SUFFIX);

    List<AstNode> children = Lists.newArrayList();
    boolean first = true;
    for (AstNode child : superSuffixNode.getChildren()) {
      if (!first) {
        children.add(child);
      }
      first = false;
    }

    if (superSuffixNode.hasDirectChildren(JavaGrammar.ARGUMENTS)) {
      // super(arguments)
      // super.method(arguments)
      // super.<T>method(arguments)
      // TODO typeArguments
      if (superSuffixNode.hasDirectChildren(JavaTokenType.IDENTIFIER)) {
        MemberSelectExpressionTreeImpl memberSelect = new MemberSelectExpressionTreeImpl(
          expression, treeMaker.identifier(superSuffixNode.getFirstChild(JavaTokenType.IDENTIFIER)),
          (AstNode) expression);

        children.add(0, memberSelect);

        return new MethodInvocationTreeImpl(memberSelect, (ArgumentListTreeImpl) superSuffixNode.getFirstChild(JavaGrammar.ARGUMENTS),
          children.toArray(new AstNode[0]));
      } else {
        children.add(0, (AstNode) expression);
        return new MethodInvocationTreeImpl(expression, (ArgumentListTreeImpl) superSuffixNode.getFirstChild(JavaGrammar.ARGUMENTS),
          children.toArray(new AstNode[0]));
      }
    } else {
      // super.field
      children.add(0, (AstNode) expression);
      return new MemberSelectExpressionTreeImpl(expression, treeMaker.identifier(superSuffixNode.getFirstChild(JavaTokenType.IDENTIFIER)),
        children.toArray(new AstNode[0]));
    }
  }

