  private Object[] convertTypes(AstNode[] nodes) {
    List result = Lists.newArrayList();

    ImmutableList.Builder listBuilder = ImmutableList.builder();
    Object listBuilderRepeatedRuleKey = null;

    for (AstNode child : nodes) {
      if (grammarBuilderInterceptor.isRepeatedRule(child.getType())) {
        Object[] converted = convertTypes(child.getChildren().toArray(new AstNode[0]));
        Preconditions.checkState(converted.length == 1, "Unexpected number of children: " + converted.length);

        if (listBuilderRepeatedRuleKey != null && !child.getType().equals(listBuilderRepeatedRuleKey)) {
          result.add(listBuilder.build());
          listBuilder = ImmutableList.builder();
          listBuilderRepeatedRuleKey = null;
        }

        listBuilder.add(converted[0]);
        listBuilderRepeatedRuleKey = child.getType();
      } else {
        if (listBuilderRepeatedRuleKey != null) {
          result.add(listBuilder.build());
          listBuilder = ImmutableList.builder();
          listBuilderRepeatedRuleKey = null;
        }

        result.add(convertType(child));
      }
    }

    if (listBuilderRepeatedRuleKey != null) {
      result.add(listBuilder.build());
      listBuilder = ImmutableList.builder();
      listBuilderRepeatedRuleKey = null;
    }

    return result.toArray();
  }

