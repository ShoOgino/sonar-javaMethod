  /**
   * 15. Expressions
   */
  private void expressions() {
    statementExpression.is(expression);
    constantExpression.is(expression);
    expression.is(assignmentExpression);
    assignmentExpression.is(conditionalExpression, zeroOrMore(assignmentOperator, conditionalExpression)).skipIfOneChild();
    assignmentOperator.is(firstOf(
        equ,
        plusequ,
        minsequ,
        starequ,
        divequ,
        andequ,
        orequ,
        hatequ,
        modequ,
        slequ,
        srequ,
        bsrequ));
    conditionalExpression.is(conditionalOrExpression, zeroOrMore(query, expression, colon, conditionalOrExpression)).skipIfOneChild();
    conditionalOrExpression.is(conditionalAndExpression, zeroOrMore(oror, conditionalAndExpression)).skipIfOneChild();
    conditionalAndExpression.is(inclusiveOrExpression, zeroOrMore(andand, inclusiveOrExpression)).skipIfOneChild();
    inclusiveOrExpression.is(exclusiveOrExpression, zeroOrMore(or, exclusiveOrExpression)).skipIfOneChild();
    exclusiveOrExpression.is(andExpression, zeroOrMore(hat, andExpression)).skipIfOneChild();
    andExpression.is(equalityExpression, zeroOrMore(and, equalityExpression)).skipIfOneChild();
    equalityExpression.is(relationalExpression, zeroOrMore(firstOf(equal, notequal), relationalExpression)).skipIfOneChild();
    relationalExpression.is(shiftExpression, zeroOrMore(firstOf(
        sequence(firstOf(ge, gt, le, lt), shiftExpression),
        sequence(instanceofKeyword, referenceType)))).skipIfOneChild();
    shiftExpression.is(additiveExpression, zeroOrMore(firstOf(sl, bsr, sr), additiveExpression)).skipIfOneChild();
    additiveExpression.is(multiplicativeExpression, zeroOrMore(firstOf(plus, minus), multiplicativeExpression)).skipIfOneChild();
    multiplicativeExpression.is(unaryExpression, zeroOrMore(firstOf(star, div, mod), unaryExpression)).skipIfOneChild();
    unaryExpression.is(firstOf(
        sequence(prefixOp, unaryExpression),
        sequence(lpar, type, rpar, unaryExpression),
        sequence(primary, zeroOrMore(selector), zeroOrMore(postFixOp)))).skipIfOneChild();
    primary.is(firstOf(
        parExpression,
        sequence(nonWildcardTypeArguments, firstOf(explicitGenericInvocationSuffix, sequence(thisKeyword, arguments))),
        sequence(thisKeyword, optional(arguments)),
        sequence(superKeyword, superSuffix),
        literal,
        sequence(newKeyword, creator),
        sequence(qualifiedIdentifier, optional(identifierSuffix)),
        sequence(basicType, zeroOrMore(dim), dot, classKeyword),
        sequence(voidKeyword, dot, classKeyword)));
    identifierSuffix.is(firstOf(
        sequence(lbrk, firstOf(sequence(rbrk, zeroOrMore(dim), dot, classKeyword), sequence(expression, rbrk))),
        arguments,
        sequence(dot, firstOf(
            classKeyword,
            explicitGenericInvocation,
            thisKeyword,
            sequence(superKeyword, arguments),
            sequence(newKeyword, optional(nonWildcardTypeArguments), innerCreator)))));
    explicitGenericInvocation.is(nonWildcardTypeArguments, explicitGenericInvocationSuffix);
    nonWildcardTypeArguments.is(lpoint, referenceType, zeroOrMore(comma, referenceType), rpoint);
    explicitGenericInvocationSuffix.is(firstOf(
        sequence(superKeyword, superSuffix),
        sequence(identifier, arguments)));
    prefixOp.is(firstOf(
        inc,
        dec,
        bang,
        tilda,
        plus,
        minus));
    postFixOp.is(firstOf(
        inc,
        dec));
    selector.is(firstOf(
        sequence(dot, identifier, optional(arguments)),
        sequence(dot, explicitGenericInvocation),
        sequence(dot, thisKeyword),
        sequence(dot, superKeyword, superSuffix),
        sequence(dot, newKeyword, optional(nonWildcardTypeArguments), innerCreator),
        dimExpr));
    superSuffix.is(firstOf(
        arguments,
        sequence(dot, identifier, optional(arguments))));
    basicType.is(firstOf(
        byteKeyword,
        shortKeyword,
        charKeyword,
        intKeyword,
        longKeyword,
        floatKeyword,
        doubleKeyword,
        booleanKeyword));
    arguments.is(lpar, optional(expression, zeroOrMore(comma, expression)), rpar);
    creator.is(firstOf(
        sequence(optional(nonWildcardTypeArguments), createdName, classCreatorRest),
        sequence(optional(nonWildcardTypeArguments), firstOf(classType, basicType), arrayCreatorRest)));
    createdName.is(identifier, optional(nonWildcardTypeArguments), zeroOrMore(dot, identifier, optional(nonWildcardTypeArguments)));
    innerCreator.is(identifier, classCreatorRest);
    arrayCreatorRest.is(lbrk, firstOf(
        sequence(rbrk, zeroOrMore(dim), arrayInitializer),
        sequence(expression, rbrk, zeroOrMore(dimExpr), zeroOrMore(dim))));
    classCreatorRest.is(optional(diamond), arguments, optional(classBody));
    diamond.is(lt, gt);
    arrayInitializer.is(lwing, optional(variableInitializer, zeroOrMore(comma, variableInitializer)), optional(comma), rwing);
    variableInitializer.is(firstOf(arrayInitializer, expression));
    parExpression.is(lpar, expression, rpar);
    qualifiedIdentifier.is(identifier, zeroOrMore(dot, identifier));
    dim.is(lbrk, rbrk);
    dimExpr.is(lbrk, expression, rbrk);
  }

