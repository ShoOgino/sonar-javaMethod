  @Override
  public void visitFile(AstNode astNode) {
    SemanticModel semanticModel = semanticModelProvider.semanticModel();
    if (semanticModel == null) {
      // parse or semantic error
      return;
    }

    JavaFile sonarFile = SquidUtils.convertJavaFileKeyFromSquidFormat(peekSourceFile().getKey());
    Symbolizable symbolizable = perspectives.as(Symbolizable.class, sonarFile);
    Symbolizable.SymbolTableBuilder symbolTableBuilder = symbolizable.newSymbolTableBuilder();

    for (Map.Entry<AstNode, Symbol> entry : semanticModel.getSymbols().entrySet()) {
      AstNode declaration = entry.getKey();
      org.sonar.api.source.Symbol symbol = symbolTableBuilder.newSymbol(startOffsetFor(declaration), endOffsetFor(declaration));

      for (AstNode usage : semanticModel.getUsages(entry.getValue())) {
        symbolTableBuilder.newReference(symbol, startOffsetFor(usage));
      }
    }

    symbolizable.setSymbolTable(symbolTableBuilder.build());
  }

