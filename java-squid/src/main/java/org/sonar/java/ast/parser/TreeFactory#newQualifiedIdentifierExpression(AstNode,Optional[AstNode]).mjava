  public ExpressionTree newQualifiedIdentifierExpression(AstNode qualifiedIdentifier, Optional<AstNode> identifierSuffix) {
    ExpressionTree identifier = qualifiedIdentifier(qualifiedIdentifier);
    if (!identifierSuffix.isPresent()) {
      // id
      return identifier;
    } else {
      AstNode identifierSuffixNode = identifierSuffix.get();
      if (identifierSuffixNode.getFirstChild().is(JavaPunctuator.LBRK)) {
        if (identifierSuffixNode.hasDirectChildren(JavaKeyword.CLASS)) {
          // 15.8.2. Class Literals
          // id[].class
          return new MemberSelectExpressionTreeImpl(
            treeMaker.applyDim(identifier, identifierSuffixNode.getChildren(JavaGrammar.DIM).size() + 1),
            treeMaker.identifier(identifierSuffixNode.getFirstChild(JavaKeyword.CLASS)),
            (AstNode) identifier, identifierSuffixNode);
        } else {
          // id[expression]
          return new ArrayAccessExpressionTreeImpl(
            identifier, treeMaker.expression(identifierSuffixNode.getFirstChild(JavaGrammar.EXPRESSION)),
            (AstNode) identifier, identifierSuffixNode);
        }
      } else if (identifierSuffixNode.getFirstChild().is(JavaGrammar.ARGUMENTS)) {
        // id(arguments)
        return new MethodInvocationTreeImpl(
          identifier, treeMaker.arguments(identifierSuffixNode.getFirstChild()),
          (AstNode) identifier, identifierSuffixNode);
      } else if (identifierSuffixNode.getFirstChild().is(JavaPunctuator.DOT)) {
        if (identifierSuffixNode.hasDirectChildren(JavaKeyword.CLASS)) {
          // 15.8.2. Class Literals
          // id.class
          return new MemberSelectExpressionTreeImpl(
            identifier, treeMaker.identifier(identifierSuffixNode.getFirstChild(JavaKeyword.CLASS)),
            (AstNode) identifier, identifierSuffixNode);
        } else if (identifierSuffixNode.hasDirectChildren(JavaGrammar.EXPLICIT_GENERIC_INVOCATION)) {
          // id.<...>...
          return applyExplicitGenericInvocation(
            identifier, identifierSuffixNode.getFirstChild(JavaPunctuator.DOT), identifierSuffixNode.getFirstChild(JavaGrammar.EXPLICIT_GENERIC_INVOCATION));
        } else if (identifierSuffixNode.hasDirectChildren(JavaKeyword.THIS)) {
          // id.this
          return new MemberSelectExpressionTreeImpl(
            identifier, treeMaker.identifier(identifierSuffixNode.getFirstChild(JavaKeyword.THIS)),
            (AstNode) identifier, identifierSuffixNode);
        } else if (identifierSuffixNode.hasDirectChildren(JavaKeyword.SUPER)) {
          // id.super(arguments)
          IdentifierTreeImpl superIdentifier = new IdentifierTreeImpl(InternalSyntaxToken.create(identifierSuffixNode.getFirstChild(JavaKeyword.SUPER)));

          MemberSelectExpressionTreeImpl memberSelect = new MemberSelectExpressionTreeImpl(
            identifier, superIdentifier,
            (AstNode) identifier, identifierSuffixNode.getFirstChild(JavaPunctuator.DOT), superIdentifier);

          return new MethodInvocationTreeImpl(
            memberSelect, treeMaker.arguments(identifierSuffixNode.getFirstChild(JavaGrammar.ARGUMENTS)),
            memberSelect, identifierSuffixNode.getFirstChild(JavaGrammar.ARGUMENTS));
        } else if (identifierSuffixNode.hasDirectChildren(JavaKeyword.NEW)) {
          // id.new...
          AstNode innerCreatorNode = identifierSuffixNode.getFirstChild(JavaGrammar.INNER_CREATOR);

          AstNode classCreatorRestNode = innerCreatorNode.getFirstChild(JavaGrammar.CLASS_CREATOR_REST);

          ClassTree classBody = null;
          if (classCreatorRestNode.hasDirectChildren(JavaGrammar.CLASS_BODY)) {
            classBody = new ClassTreeImpl(
              classCreatorRestNode,
              Tree.Kind.CLASS,
              ModifiersTreeImpl.EMPTY,
              treeMaker.classBody(classCreatorRestNode.getFirstChild(JavaGrammar.CLASS_BODY)));
          }
          return new NewClassTreeImpl(
            identifier,
            treeMaker.identifier(innerCreatorNode.getFirstChild(JavaTokenType.IDENTIFIER)),
            treeMaker.arguments(classCreatorRestNode.getFirstChild(JavaGrammar.ARGUMENTS)),
            classBody,
            (AstNode) identifier, identifierSuffixNode);
        } else {
          throw new IllegalArgumentException("Unexpected AstNodeType: " + identifierSuffixNode.getChild(1));
        }
      } else {
        throw new IllegalArgumentException("Unexpected AstNodeType: " + identifierSuffixNode.getFirstChild());
      }
    }
  }

