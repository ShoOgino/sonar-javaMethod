  /**
   * 14. Blocks and Statements
   */
  private void blocksAndStatements() {
    // 14.2. Blocks
    block.is(lwing, blockStatements, rwing);
    blockStatements.is(zeroOrMore(blockStatement));
    blockStatement.is(firstOf(
        localVariableDeclarationStatement,
        sequence(zeroOrMore(modifier), firstOf(classDeclaration, enumDeclaration)),
        statement));

    // 14.4. Local Variable Declaration Statements
    localVariableDeclarationStatement.is(variableModifiers, type, variableDeclarators, semi);
    variableModifiers.is(zeroOrMore(firstOf(
        annotation,
        finalKeyword)));
    variableDeclarators.is(variableDeclarator, zeroOrMore(comma, variableDeclarator));
    variableDeclarator.is(identifier, zeroOrMore(dim), optional(equ, variableInitializer));

    // 14.5. Statements
    statement.is(firstOf(
        block,
        assertStatement,
        ifStatement,
        forStatement,
        whileStatement,
        doStatement,
        tryStatement,
        switchStatement,
        synchronizedStatement,
        returnStatement,
        throwStatement,
        breakStatement,
        continueStatement,
        labeledStatement,
        expressionStatement,
        emptyStatement));

    // 14.6. The Empty Statement
    emptyStatement.is(semi);
    // 14.7. Labeled Statements
    labeledStatement.is(identifier, colon, statement);
    // 14.8. Expression Statements
    expressionStatement.is(statementExpression, semi);
    // 14.9. The if Statement
    ifStatement.is(ifKeyword, parExpression, statement, optional(elseKeyword, statement));
    // 14.10. The assert Statement
    assertStatement.is(assertKeyword, expression, optional(colon, expression), semi);

    // 14.11. The switch statement
    switchStatement.is(switchKeyword, parExpression, lwing, switchBlockStatementGroups, rwing);
    switchBlockStatementGroups.is(zeroOrMore(switchBlockStatementGroup));
    switchBlockStatementGroup.is(switchLabel, blockStatements);
    switchLabel.is(firstOf(
        sequence(caseKeyword, constantExpression, colon),
        sequence(caseKeyword, enumConstantName, colon),
        sequence(defaultKeyword, colon)));
    enumConstantName.is(identifier);

    // 14.12. The while Statement
    whileStatement.is(whileKeyword, parExpression, statement);
    // 14.13. The do Statement
    doStatement.is(doKeyword, statement, whileKeyword, parExpression, semi);

    // 14.14. The for Statement
    forStatement.is(firstOf(
        sequence(forKeyword, lpar, optional(forInit), semi, optional(expression), semi, optional(forUpdate), rpar, statement),
        sequence(forKeyword, lpar, formalParameter, colon, expression, rpar, statement)));
    forInit.is(firstOf(
        sequence(zeroOrMore(firstOf(finalKeyword, annotation)), type, variableDeclarators),
        sequence(statementExpression, zeroOrMore(comma, statementExpression))));
    forUpdate.is(statementExpression, zeroOrMore(comma, statementExpression));

    // 14.15. The break Statement
    breakStatement.is(breakKeyword, optional(identifier), semi);
    // 14.16. The continue Statement
    continueStatement.is(continueKeyword, optional(identifier), semi);
    // 14.17. The return Statement
    returnStatement.is(returnKeyword, optional(expression), semi);
    // 14.18. The throw Statement
    throwStatement.is(throwKeyword, expression, semi);
    // 14.19. The synchronized Statement
    synchronizedStatement.is(synchronizedKeyword, parExpression, block);

    // 14.20. The try Statement
    tryStatement.is(firstOf(
        sequence(tryKeyword, block, firstOf(sequence(oneOrMore(catchClause), optional(finally_)), finally_)),
        tryWithResourcesStatement));
    tryWithResourcesStatement.is(tryKeyword, resourceSpecification, block, zeroOrMore(catchClause), optional(finally_));
    resourceSpecification.is(lpar, resource, zeroOrMore(semi, resource), optional(semi), rpar);
    resource.is(optional(variableModifiers), type, variableDeclaratorId, equ, expression);

    catchClause.is(catchKeyword, lpar, catchFormalParameter, rpar, block);
    catchFormalParameter.is(optional(variableModifiers), catchType, variableDeclaratorId);
    catchType.is(classType, zeroOrMore(or, classType));

    finally_.is(finallyKeyword, block);
  }

