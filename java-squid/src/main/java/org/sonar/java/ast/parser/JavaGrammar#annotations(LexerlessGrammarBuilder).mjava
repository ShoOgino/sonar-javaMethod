  /**
   * 9.7. Annotations
   */
  private static void annotations(LexerlessGrammarBuilder b) {
    b.rule(ANNOTATION_TYPE_DECLARATION).is(AT, INTERFACE, JavaTokenType.IDENTIFIER, ANNOTATION_TYPE_BODY);
    b.rule(ANNOTATION_TYPE_BODY).is(LWING, b.zeroOrMore(ANNOTATION_TYPE_ELEMENT_DECLARATION), RWING);
    b.rule(ANNOTATION_TYPE_ELEMENT_DECLARATION).is(b.firstOf(
      b.sequence(MODIFIERS, ANNOTATION_TYPE_ELEMENT_REST),
      SEMI));
    b.rule(ANNOTATION_TYPE_ELEMENT_REST).is(b.firstOf(
      b.sequence(TYPE, JavaTokenType.IDENTIFIER, ANNOTATION_METHOD_OR_CONSTANT_REST, SEMI),
      CLASS_DECLARATION,
      ENUM_DECLARATION,
      INTERFACE_DECLARATION,
      ANNOTATION_TYPE_DECLARATION));
    b.rule(ANNOTATION_METHOD_OR_CONSTANT_REST).is(b.firstOf(
      ANNOTATION_METHOD_REST,
      CONSTANT_DECLARATORS_REST));
    b.rule(ANNOTATION_METHOD_REST).is(LPAR, RPAR, b.optional(DEFAULT_VALUE));
    b.rule(DEFAULT_VALUE).is(DEFAULT, ELEMENT_VALUE);
    b.rule(ANNOTATION).is(AT, QUALIFIED_IDENTIFIER, b.optional(ANNOTATION_REST));
    b.rule(ANNOTATION_REST).is(b.firstOf(
      NORMAL_ANNOTATION_REST,
      SINGLE_ELEMENT_ANNOTATION_REST));
    b.rule(NORMAL_ANNOTATION_REST).is(LPAR, b.optional(ELEMENT_VALUE_PAIRS), RPAR);
  }

