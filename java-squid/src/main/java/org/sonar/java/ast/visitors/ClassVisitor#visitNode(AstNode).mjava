  @Override
  public void visitNode(AstNode astNode) {
    String className = astNode.is(Kind.ANNOTATION_TYPE) ?
      ((ClassTree) astNode).simpleName().name() :
      astNode.getFirstChild(JavaTokenType.IDENTIFIER).getTokenValue();
    final SourceClass sourceClass;
    if (astNode.is(JavaGrammar.ENUM_CONSTANT)) {
      sourceClass = createSourceClass(peekSourceClass(), className);
    } else if (getContext().peekSourceCode().isType(SourceClass.class)) {
      sourceClass = createSourceClass((SourceClass) getContext().peekSourceCode(), className);
    } else if (getContext().peekSourceCode().isType(SourceMethod.class)) {
      localNameCounter++;
      sourceClass = createSourceClass((SourceClass) getContext().peekSourceCode().getParent(), localNameCounter + className);
    } else {
      sourceClass = createSourceClass(peekParentPackage(), className);
    }

    sourceClass.setStartAtLine(astNode.getTokenLine());
    if (!astNode.is(JavaGrammar.ENUM_CONSTANT)) {
      sourceClass.setMeasure(JavaMetric.CLASSES, 1);
      sourceClass.setSuppressWarnings(SuppressWarningsAnnotationUtils.isSuppressAllWarnings(astNode));
    }
    getContext().addSourceCode(sourceClass);

  }

