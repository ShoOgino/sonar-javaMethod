  public TypeTree annotationIdentifier(AstNode firstIdentifier, Optional<List<Tuple<AstNode, AstNode>>> rests) {
    List<AstNode> children = Lists.newArrayList();
    children.add(firstIdentifier);
    if (rests.isPresent()) {
      for (Tuple<AstNode, AstNode> rest : rests.get()) {
        children.add(rest.first());
        children.add(rest.second());
      }
    }

    JavaTree result = null;

    InternalSyntaxToken dotToken = null;
    for (AstNode child : children) {
      if (!child.is(JavaTokenType.IDENTIFIER)) {
        dotToken = InternalSyntaxToken.create(child);
      } else {
        InternalSyntaxToken identifierToken = InternalSyntaxToken.create(child);
        if (result == null) {
          result = new IdentifierTreeImpl(identifierToken);
        } else {
          IdentifierTreeImpl identifier = new IdentifierTreeImpl(identifierToken);
          result = new MemberSelectExpressionTreeImpl((ExpressionTree) result, dotToken, identifier);
        }
      }
    }

    return (TypeTree) result;
  }

