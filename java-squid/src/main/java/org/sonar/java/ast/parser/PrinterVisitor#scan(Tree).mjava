  @Override
  protected void scan(@Nullable Tree tree) {
    if (tree != null) {
      JavaSymbol sym = null;
      try {
        Method getSymbol = null;
        for (Method method : tree.getClass().getMethods()) {
          if ("getSymbol".equals(method.getName())) {
            getSymbol = tree.getClass().getMethod("getSymbol");
          }
        }
        if (getSymbol != null) {
          sym = (JavaSymbol) getSymbol.invoke(tree);
        }
      } catch (Exception e) {
        LOG.error("An error occured while retrieving symbol ", e);
      }

      Tree.Kind kind = ((JavaTree) tree).getKind();
      String nodeName = ((JavaTree) tree).getClass().getSimpleName();
      if (kind != null) {
        nodeName = kind.getAssociatedInterface().getSimpleName();
      }
      indent().append(nodeName);
      int line = -1;
      AstNode node = ((JavaTree) tree).getAstNode();
      if (node != null && node.hasToken()) {
        line = node.getTokenLine();
        sb.append(" ").append(line);
      }
      if (idents.get(tree) != null) {
        Preconditions.checkState(sym == null);
        sym = idents.get(tree);
      }
      Type type = null;
      if (tree instanceof ExpressionTree) {
        type = ((ExpressionTree) tree).symbolType();

      } else if (tree instanceof TypeTree) {
        type = ((TypeTree) tree).symbolType();
      }
      if(type != null) {
        sb.append(" ").append(type.fullyQualifiedName());
      }

      if (sym != null && semanticModel != null) {
        //No forward reference possible... Need another visitor to build this info ?
        for (IdentifierTree identifierTree : sym.usages()) {
          idents.put(identifierTree, sym);
          sb.append(" ").append(sym.getName());
        }
        int refLine = ((JavaTree) semanticModel.getTree(sym)).getTokenLine();
        if (refLine != line) {
          sb.append(" ref#").append(refLine);
        }
      }
      sb.append("\n");
    }
    indentLevel++;
    super.scan(tree);
    indentLevel--;
  }

