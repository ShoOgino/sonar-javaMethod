  private ExpressionTree applySelector(ExpressionTree expression, AstNode selectorNode) {
    JavaTreeMaker.checkType(selectorNode, JavaGrammar.SELECTOR);

    if (selectorNode.hasDirectChildren(JavaGrammar.MEMBER_SELECT_OR_METHOD_INVOCATION)) {
      AstNode astNode = selectorNode.getFirstChild(JavaGrammar.MEMBER_SELECT_OR_METHOD_INVOCATION);
      ExpressionTree selector = newMemberSelectOrMethodInvocation(astNode);

      ExpressionTree result;
      if (selector.is(Kind.METHOD_INVOCATION)) {
        MethodInvocationTreeImpl methodInvocation = (MethodInvocationTreeImpl) selector;

        result = new MemberSelectExpressionTreeImpl(expression, (IdentifierTree) methodInvocation.methodSelect(),
          (AstNode) expression, selectorNode.getFirstChild(JavaPunctuator.DOT), (AstNode) methodInvocation.methodSelect());

        result = new MethodInvocationTreeImpl(result, methodInvocation.arguments(),
          (AstNode) result, (AstNode) methodInvocation.arguments());
      } else if (selector.is(Kind.IDENTIFIER)) {
        result = new MemberSelectExpressionTreeImpl(expression, (IdentifierTree) selector,
          (AstNode) expression, selectorNode.getFirstChild(JavaPunctuator.DOT), (AstNode) selector);
      } else {
        throw new IllegalArgumentException();
      }

      return result;
    } else if (selectorNode.hasDirectChildren(JavaKeyword.NEW)) {
      ExpressionTree identifier = null;
      for (AstNode child : selectorNode.getChildren()) {
        if (child instanceof ExpressionTree) {
          identifier = (ExpressionTree) child;
        }
      }
      Preconditions.checkState(identifier != null);

      TypeArgumentListTreeImpl typeArguments = (TypeArgumentListTreeImpl) selectorNode.getFirstChild(JavaGrammar.TYPE_ARGUMENTS);
      if (typeArguments != null) {
        // TODO Parameterized expression
        ((JavaTree) identifier).prependChildren(typeArguments);
      }

      AstNode classCreatorRestNode = selectorNode.getFirstChild(JavaGrammar.CLASS_CREATOR_REST);
      ArgumentListTreeImpl arguments = (ArgumentListTreeImpl) classCreatorRestNode.getFirstChild(JavaGrammar.ARGUMENTS);

      ClassTree classBody = null;
      if (classCreatorRestNode.hasDirectChildren(JavaGrammar.CLASS_BODY)) {
        classBody = new ClassTreeImpl(
          classCreatorRestNode,
          Tree.Kind.CLASS,
          ModifiersTreeImpl.EMPTY,
          treeMaker.classBody(classCreatorRestNode.getFirstChild(JavaGrammar.CLASS_BODY)));
      }

      List<AstNode> children = Lists.newArrayList();
      children.add((AstNode) expression);
      children.add(selectorNode.getFirstChild(JavaPunctuator.DOT));
      children.add(selectorNode.getFirstChild(JavaKeyword.NEW));
      children.add((AstNode) identifier);
      children.add(classCreatorRestNode);

      return new NewClassTreeImpl(
        expression, identifier, arguments, classBody,
        children.toArray(new AstNode[children.size()]));
    } else if (selectorNode.hasDirectChildren(Kind.ARRAY_ACCESS_EXPRESSION)) {
      return ((ArrayAccessExpressionTreeImpl) selectorNode.getFirstChild(Kind.ARRAY_ACCESS_EXPRESSION)).complete(expression);
    } else if (selectorNode.hasDirectChildren(JavaGrammar.ARGUMENTS)) {
      // id(arguments)
      return new MethodInvocationTreeImpl(
        expression, (ArgumentListTreeImpl) selectorNode.getFirstChild(JavaGrammar.ARGUMENTS),
        (AstNode) expression, selectorNode);
    } else if (selectorNode.hasDirectChildren(JavaKeyword.CLASS)) {
      // 15.8.2. Class Literals
      // id.class
      // id[].class
      return new MemberSelectExpressionTreeImpl(
        treeMaker.applyDim(expression, selectorNode.getChildren(JavaGrammar.DIM).size()),
        treeMaker.identifier(selectorNode.getFirstChild(JavaKeyword.CLASS)),
        (AstNode) expression, selectorNode);
    } else {
      throw new IllegalStateException(AstXmlPrinter.print(selectorNode));
    }
  }

