  private ExpressionTree applySelector(ExpressionTree expression, AstNode selectorNode) {
    JavaTreeMaker.checkType(selectorNode, JavaGrammar.SELECTOR);

    if (selectorNode.hasDirectChildren(JavaPunctuator.DOT) && !selectorNode.hasDirectChildren(JavaKeyword.NEW, JavaKeyword.CLASS)) {
      ExpressionTree selector = (ExpressionTree) selectorNode.getLastChild();

      ExpressionTree result;
      if (selector.is(Kind.METHOD_INVOCATION)) {
        MethodInvocationTreeImpl methodInvocation = (MethodInvocationTreeImpl) selector;

        result = new MemberSelectExpressionTreeImpl(expression, (IdentifierTree) methodInvocation.methodSelect(),
          (AstNode) expression, selectorNode.getFirstChild(JavaPunctuator.DOT), (AstNode) methodInvocation.methodSelect());

        result = new MethodInvocationTreeImpl(result, methodInvocation.arguments(),
          (AstNode) result, (AstNode) methodInvocation.arguments());
      } else if (selector.is(Kind.IDENTIFIER)) {
        result = new MemberSelectExpressionTreeImpl(expression, (IdentifierTree) selector,
          (AstNode) expression, selectorNode.getFirstChild(JavaPunctuator.DOT), (AstNode) selector);
      } else {
        throw new IllegalArgumentException();
      }

      return result;
    } else if (selectorNode.hasDirectChildren(JavaKeyword.NEW)) {
      ExpressionTree identifier = null;

      for (AstNode child : selectorNode.getChildren()) {
        if (child instanceof ExpressionTree) {
          identifier = (ExpressionTree) child;
          break;
        }
      }
      Preconditions.checkState(identifier != null);

      TypeArgumentListTreeImpl typeArguments = (TypeArgumentListTreeImpl) selectorNode.getFirstChild(JavaGrammar.TYPE_ARGUMENTS);
      if (typeArguments != null) {
        // TODO Parameterized expression
        ((JavaTree) identifier).prependChildren(typeArguments);
      }

      NewClassTreeImpl newClass = (NewClassTreeImpl) selectorNode.getFirstChild(Kind.NEW_CLASS);

      List<AstNode> children = Lists.newArrayList();
      children.add((AstNode) expression);
      children.add(selectorNode.getFirstChild(JavaPunctuator.DOT));
      children.add(selectorNode.getFirstChild(JavaKeyword.NEW));
      children.add((AstNode) identifier);

      newClass.completeWithEnclosingExpression(expression).completeWithIdentifier(identifier);
      newClass.prependChildren(children);

      return newClass;
    } else if (selectorNode.hasDirectChildren(Kind.ARRAY_ACCESS_EXPRESSION)) {
      return ((ArrayAccessExpressionTreeImpl) selectorNode.getFirstChild(Kind.ARRAY_ACCESS_EXPRESSION)).complete(expression);
    } else if (selectorNode.hasDirectChildren(JavaGrammar.ARGUMENTS)) {
      // id(arguments)
      return new MethodInvocationTreeImpl(
        expression, (ArgumentListTreeImpl) selectorNode.getFirstChild(JavaGrammar.ARGUMENTS),
        (AstNode) expression, selectorNode);
    } else if (selectorNode.hasDirectChildren(JavaKeyword.CLASS)) {
      // 15.8.2. Class Literals
      // id.class
      // id[].class
      return new MemberSelectExpressionTreeImpl(
        treeMaker.applyDim(expression, selectorNode.getChildren(TreeFactory.WRAPPER_AST_NODE).size()),
        treeMaker.identifier(selectorNode.getFirstChild(JavaKeyword.CLASS)),
        (AstNode) expression, selectorNode);
    } else {
      throw new IllegalStateException(AstXmlPrinter.print(selectorNode));
    }
  }

