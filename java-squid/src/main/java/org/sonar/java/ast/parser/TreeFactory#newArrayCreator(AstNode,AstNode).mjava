  public ExpressionTree newArrayCreator(AstNode type, AstNode arrayCreatorRest) {
    JavaTree typeTree = (JavaTree) (type.is(JavaGrammar.BASIC_TYPE) ? treeMaker.basicType(type) : treeMaker.classType(type));

    AstNode arrayInitializer = arrayCreatorRest.getFirstChild(JavaGrammar.ARRAY_INITIALIZER);
    if (arrayInitializer != null) {
      ImmutableList.Builder<ExpressionTree> elems = ImmutableList.builder();
      for (AstNode elem : arrayInitializer.getChildren(JavaGrammar.VARIABLE_INITIALIZER)) {
        elems.add(treeMaker.variableInitializer(elem));
      }
      return new NewArrayTreeImpl(typeTree, ImmutableList.<ExpressionTree>of(), elems.build(),
        type, arrayCreatorRest);
    } else {
      ImmutableList.Builder<ExpressionTree> dimensions = ImmutableList.builder();
      dimensions.add(treeMaker.expression(arrayCreatorRest.getFirstChild(JavaGrammar.EXPRESSION)));
      for (AstNode dimExpr : arrayCreatorRest.getChildren(JavaGrammar.DIM_EXPR)) {
        dimensions.add(treeMaker.expression(dimExpr.getFirstChild(JavaGrammar.EXPRESSION)));
      }
      return new NewArrayTreeImpl(typeTree, dimensions.build(), ImmutableList.<ExpressionTree>of(),
        type, arrayCreatorRest);
    }
  }

