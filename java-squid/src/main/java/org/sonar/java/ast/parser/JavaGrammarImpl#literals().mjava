  /**
   * 3.10. Literals
   */
  private void literals() {
    spacing.is(
        whitespace(),
        zeroOrMore(
            token(GenericTokenType.COMMENT, firstOf(inlineComment(), multilineComment())),
            whitespace())).skip();

    eof.is(token(GenericTokenType.EOF, endOfInput())).skip();

    characterLiteral.is(token(JavaTokenType.CHARACTER_LITERAL, characterLiteral()), spacing).skip();
    stringLiteral.is(token(GenericTokenType.LITERAL, stringLiteral()), spacing).skip();

    floatingLiteral.is(token(JavaTokenType.FLOAT_LITERAL, regexp(FloatLiteralChannel.FLOAT_LITERAL)), spacing).skip();
    integerLiteral.is(token(JavaTokenType.INTEGER_LITERAL, regexp(IntegerLiteralChannel.INTEGER_LITERAL)), spacing).skip();

    keyword.is(firstOf("assert", "break", "case", "catch", "class", "const", "continue", "default", "do", "else",
        "enum", "extends", "finally", "final", "for", "goto", "if", "implements", "import", "interface",
        "instanceof", "new", "package", "return", "static", "super", "switch", "synchronized", "this",
        "throws", "throw", "try", "void", "while"
        ), nextNot(letterOrDigit));
    letterOrDigit.is(javaIdentifierPart());
    identifier.is(nextNot(keyword), token(GenericTokenType.IDENTIFIER, javaIdentifier()), spacing).skip();

    literal.is(firstOf(
        trueKeyword,
        falseKeyword,
        nullKeyword,
        characterLiteral,
        stringLiteral,
        floatingLiteral,
        integerLiteral
        // FIXME DOUBLE_LITERAL,
        // FIXME LONG_LITERAL,
        ));
  }

