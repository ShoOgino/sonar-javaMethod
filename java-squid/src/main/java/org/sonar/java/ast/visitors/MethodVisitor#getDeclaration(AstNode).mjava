  private static AstNode getDeclaration(AstNode astNode) {
    AstNode declaration;
    if (astNode.getParent().is(JavaGrammar.MEMBER_DECL)) {
      declaration = astNode.getParent().getParent();
      Preconditions.checkState(declaration.is(JavaGrammar.CLASS_BODY_DECLARATION));
    } else if (astNode.getParent().is(JavaGrammar.GENERIC_METHOD_OR_CONSTRUCTOR_REST)) {
      declaration = astNode.getParent().getParent().getParent();
      Preconditions.checkState(declaration.is(JavaGrammar.CLASS_BODY_DECLARATION));
    } else if (astNode.getParent().is(JavaGrammar.INTERFACE_MEMBER_DECL)) {
      declaration = astNode.getParent().getParent();
      Preconditions.checkState(declaration.is(JavaGrammar.INTERFACE_BODY_DECLARATION));
    } else if (astNode.getParent().is(JavaGrammar.INTERFACE_METHOD_OR_FIELD_REST)) {
      declaration = astNode.getParent().getParent().getParent().getParent();
      Preconditions.checkState(declaration.is(JavaGrammar.INTERFACE_BODY_DECLARATION));
    } else if (astNode.getParent().is(JavaGrammar.INTERFACE_GENERIC_METHOD_DECL)) {
      declaration = astNode.getParent().getParent().getParent();
      Preconditions.checkState(declaration.is(JavaGrammar.INTERFACE_BODY_DECLARATION));
    } else if (astNode.getParent().is(JavaGrammar.TYPE_DECLARATION)) {
      declaration = astNode.getParent();
    } else if (astNode.getParent().is(JavaGrammar.BLOCK_STATEMENT)) {
      declaration = astNode.getParent();
    } else if (astNode.hasAncestor(Kind.METHOD, Kind.ANNOTATION_TYPE)) {
      declaration = astNode.getFirstAncestor(Kind.METHOD, Kind.ANNOTATION_TYPE);
    } else if (astNode.is(Kind.METHOD, Kind.ANNOTATION_TYPE)) {
      declaration = astNode;
    } else {
      throw new IllegalStateException(astNode.getType().toString());
    }
    return declaration;
  }

