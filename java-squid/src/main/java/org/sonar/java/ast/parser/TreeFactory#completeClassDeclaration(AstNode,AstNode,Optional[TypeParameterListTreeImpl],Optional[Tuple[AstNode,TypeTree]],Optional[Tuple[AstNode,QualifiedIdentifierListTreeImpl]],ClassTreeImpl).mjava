  public ClassTreeImpl completeClassDeclaration(
    AstNode classTokenAstNode,
    AstNode identifierAstNode, Optional<TypeParameterListTreeImpl> typeParameters,
    Optional<Tuple<AstNode, TypeTree>> extendsClause,
    Optional<Tuple<AstNode, QualifiedIdentifierListTreeImpl>> implementsClause,
    ClassTreeImpl partial) {

    IdentifierTreeImpl identifier = new IdentifierTreeImpl(InternalSyntaxToken.create(identifierAstNode));

    List<AstNode> children = Lists.newArrayList();
    InternalSyntaxToken classSyntaxToken = InternalSyntaxToken.create(classTokenAstNode);
    children.add(classSyntaxToken);
    partial.completeDeclarationKeyword(classSyntaxToken);
    children.add(identifier);
    partial.completeIdentifier(identifier);
    if (typeParameters.isPresent()) {
      children.add(typeParameters.get());
      partial.completeTypeParameters(typeParameters.get());
    }
    if (extendsClause.isPresent()) {
      InternalSyntaxToken extendsKeyword = InternalSyntaxToken.create(extendsClause.get().first());
      TypeTree superClass = extendsClause.get().second();
      children.add(extendsKeyword);
      children.add((AstNode) superClass);
      partial.completeSuperclass(extendsKeyword, superClass);
    }
    if (implementsClause.isPresent()) {
      InternalSyntaxToken implementsKeyword = InternalSyntaxToken.create(implementsClause.get().first());
      QualifiedIdentifierListTreeImpl interfaces = implementsClause.get().second();
      children.add(implementsKeyword);
      children.add(interfaces);
      partial.completeInterfaces(implementsKeyword, interfaces);
    }

    partial.prependChildren(children);

    return partial;
  }

