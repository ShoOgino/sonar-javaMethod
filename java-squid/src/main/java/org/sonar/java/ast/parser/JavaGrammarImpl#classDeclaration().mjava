  /**
   * 8.1. Class Declaration
   */
  private void classDeclaration() {
    classDeclaration.is(classKeyword, identifier, optional(typeParameters), optional(extendsKeyword, classType), optional(implementsKeyword, classTypeList), classBody);

    classBody.is(lwing, zeroOrMore(classBodyDeclaration), rwing);
    classBodyDeclaration.is(firstOf(
        semi,
        classInitDeclaration,
        sequence(zeroOrMore(modifier), memberDecl)));
    classInitDeclaration.is(optional(staticKeyword), block);
    memberDecl.is(firstOf(
        sequence(typeParameters, genericMethodOrConstructorRest),
        sequence(type, identifier, methodDeclaratorRest),
        fieldDeclaration,
        sequence(voidKeyword, identifier, voidMethodDeclaratorRest),
        sequence(identifier, constructorDeclaratorRest),
        interfaceDeclaration,
        classDeclaration,
        enumDeclaration,
        annotationTypeDeclaration));
    fieldDeclaration.is(type, variableDeclarators, semi);
    genericMethodOrConstructorRest.is(firstOf(
        sequence(firstOf(type, voidKeyword), identifier, methodDeclaratorRest),
        sequence(identifier, constructorDeclaratorRest)));
    methodDeclaratorRest.is(formalParameters, zeroOrMore(dim), optional(throwsKeyword, classTypeList), firstOf(methodBody, semi));
    voidMethodDeclaratorRest.is(formalParameters, optional(throwsKeyword, classTypeList), firstOf(methodBody, semi));
    constructorDeclaratorRest.is(formalParameters, optional(throwsKeyword, classTypeList), methodBody);
    methodBody.is(block);
  }

