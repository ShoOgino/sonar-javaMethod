  /**
   * 8.1. Class Declaration
   */
  private void classDeclaration() {
    classDeclaration.is(CLASS, IDENTIFIER, opt(typeParameters), opt(EXTENDS, classType), opt(IMPLEMENTS, classTypeList), classBody);

    classBody.is(LWING, o2n(classBodyDeclaration), RWING);
    classBodyDeclaration.is(firstOf(
        SEMI,
        classInitDeclaration,
        and(o2n(modifier), memberDecl)));
    classInitDeclaration.is(opt(STATIC), block);
    memberDecl.is(firstOf(
        and(typeParameters, genericMethodOrConstructorRest),
        and(type, IDENTIFIER, methodDeclaratorRest),
        fieldDeclaration,
        and(VOID, IDENTIFIER, voidMethodDeclaratorRest),
        and(IDENTIFIER, constructorDeclaratorRest),
        interfaceDeclaration,
        classDeclaration,
        enumDeclaration,
        annotationTypeDeclaration));
    fieldDeclaration.is(type, variableDeclarators, SEMI);
    genericMethodOrConstructorRest.is(firstOf(
        and(firstOf(type, VOID), IDENTIFIER, methodDeclaratorRest),
        and(IDENTIFIER, constructorDeclaratorRest)));
    methodDeclaratorRest.is(formalParameters, o2n(dim), opt(THROWS, classTypeList), firstOf(methodBody, SEMI));
    voidMethodDeclaratorRest.is(formalParameters, opt(THROWS, classTypeList), firstOf(methodBody, SEMI));
    constructorDeclaratorRest.is(formalParameters, opt(THROWS, classTypeList), methodBody);
    methodBody.is(block);
  }

