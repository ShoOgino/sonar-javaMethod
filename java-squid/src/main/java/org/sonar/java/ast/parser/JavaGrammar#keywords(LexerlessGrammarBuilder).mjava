  private static void keywords(LexerlessGrammarBuilder b) {
    keyword(b, ASSERT_KEYWORD, "assert");
    keyword(b, BREAK_KEYWORD, "break");
    keyword(b, CASE_KEYWORD, "case");
    keyword(b, CATCH_KEYWORD, "catch");
    keyword(b, CLASS_KEYWORD, "class");
    keyword(b, CONTINUE_KEYWORD, "continue");
    keyword(b, DEFAULT_KEYWORD, "default");
    keyword(b, DO_KEYWORD, "do");
    keyword(b, ELSE_KEYWORD, "else");
    keyword(b, ENUM_KEYWORD, "enum");
    keyword(b, EXTENDS_KEYWORD, "extends");
    keyword(b, FINALLY_KEYWORD, "finally");
    keyword(b, FINAL_KEYWORD, "final");
    keyword(b, FOR_KEYWORD, "for");
    keyword(b, IF_KEYWORD, "if");
    keyword(b, IMPLEMENTS_KEYWORD, "implements");
    keyword(b, IMPORT_KEYWORD, "import");
    keyword(b, INTERFACE_KEYWORD, "interface");
    keyword(b, INSTANCEOF_KEYWORD, "instanceof");
    keyword(b, NEW_KEYWORD, "new");
    keyword(b, PACKAGE_KEYWORD, "package");
    keyword(b, RETURN_KEYWORD, "return");
    keyword(b, STATIC_KEYWORD, "static");
    keyword(b, SUPER_KEYWORD, "super");
    keyword(b, SWITCH_KEYWORD, "switch");
    keyword(b, SYNCHRONIZED_KEYWORD, "synchronized");
    keyword(b, THIS_KEYWORD, "this");
    keyword(b, THROWS_KEYWORD, "throws");
    keyword(b, THROW_KEYWORD, "throw");
    keyword(b, TRY_KEYWORD, "try");
    keyword(b, VOID_KEYWORD, "void");
    keyword(b, WHILE_KEYWORD, "while");
    keyword(b, TRUE_KEYWORD, "true");
    keyword(b, FALSE_KEYWORD, "false");
    keyword(b, NULL_KEYWORD, "null");
    keyword(b, PUBLIC_KEYWORD, "public");
    keyword(b, PROTECTED_KEYWORD, "protected");
    keyword(b, PRIVATE_KEYWORD, "private");
    keyword(b, ABSTRACT_KEYWORD, "abstract");
    keyword(b, NATIVE_KEYWORD, "native");
    keyword(b, TRANSIENT_KEYWORD, "transient");
    keyword(b, VOLATILE_KEYWORD, "volatile");
    keyword(b, STRICTFP_KEYWORD, "strictfp");
    keyword(b, BYTE_KEYWORD, "byte");
    keyword(b, SHORT_KEYWORD, "short");
    keyword(b, CHAR_KEYWORD, "char");
    keyword(b, INT_KEYWORD, "int");
    keyword(b, LONG_KEYWORD, "long");
    keyword(b, FLOAT_KEYWORD, "float");
    keyword(b, DOUBLE_KEYWORD, "double");
    keyword(b, BOOLEAN_KEYWORD, "boolean");
  }

