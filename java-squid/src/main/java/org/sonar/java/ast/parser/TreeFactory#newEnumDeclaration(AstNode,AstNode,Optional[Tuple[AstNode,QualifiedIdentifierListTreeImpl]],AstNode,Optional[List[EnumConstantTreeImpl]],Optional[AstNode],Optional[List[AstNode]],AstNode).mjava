  public ClassTreeImpl newEnumDeclaration(
    AstNode enumTokenAstNode,
    AstNode identifierAstNode,
    Optional<Tuple<AstNode, QualifiedIdentifierListTreeImpl>> implementsClause,
    AstNode openBraceTokenAstNode,
    Optional<List<EnumConstantTreeImpl>> enumConstants,
    Optional<AstNode> semicolonTokenAstNode,
    Optional<List<AstNode>> enumDeclarations,
    AstNode closeBraceTokenAstNode) {

    ImmutableList.Builder<AstNode> members = ImmutableList.<AstNode>builder();
    if (enumConstants.isPresent()) {
      for (EnumConstantTreeImpl enumConstant : enumConstants.get()) {
        members.add(enumConstant);
      }
    }
    if (semicolonTokenAstNode.isPresent()) {
      // TODO This is a hack
      members.add(semicolonTokenAstNode.get());
    }
    if (enumDeclarations.isPresent()) {
      for (AstNode enumDeclaration : enumDeclarations.get()) {
        members.add(enumDeclaration);
      }
    }

    ClassTreeImpl result = newClassBody(Kind.ENUM, openBraceTokenAstNode, Optional.of((List<AstNode>) members.build()), closeBraceTokenAstNode);

    List<AstNode> children = Lists.newArrayList();
    children.add(enumTokenAstNode);

    IdentifierTreeImpl identifier = new IdentifierTreeImpl(InternalSyntaxToken.create(identifierAstNode));
    result.completeIdentifier(identifier);
    children.add(identifier);

    if (implementsClause.isPresent()) {
      children.add(implementsClause.get().first());
      children.add(implementsClause.get().second());

      result.completeInterfaces(implementsClause.get().second());
    }

    result.prependChildren(children);

    return result;
  }

