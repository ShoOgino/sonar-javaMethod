  private ExpressionTree applySelectors(ExpressionTree primary, Optional<List<ExpressionTree>> selectors) {
    ExpressionTree result = primary;

    // TODO This a bit crappy in the way dots are handled for example
    // Perhaps we need other objects instead of completing existing ones
    if (selectors.isPresent()) {
      for (ExpressionTree selector : selectors.get()) {
        if (selector.is(Kind.IDENTIFIER)) {
          IdentifierTreeImpl identifier = (IdentifierTreeImpl) selector;
          result = new MemberSelectExpressionTreeImpl(result, identifier,
            (AstNode) result, identifier);
        } else if (selector.is(Kind.METHOD_INVOCATION)) {
          MethodInvocationTreeImpl methodInvocation = (MethodInvocationTreeImpl) selector;
          IdentifierTreeImpl identifier = (IdentifierTreeImpl) methodInvocation.methodSelect();

          MemberSelectExpressionTreeImpl memberSelect = new MemberSelectExpressionTreeImpl(result, identifier,
            (AstNode) result, methodInvocation.getFirstChild(JavaPunctuator.DOT), identifier);

          List<AstNode> children = Lists.newArrayList();
          children.add(memberSelect);
          children.add((ArgumentListTreeImpl) methodInvocation.arguments());

          result = new MethodInvocationTreeImpl(memberSelect, methodInvocation.typeArguments(), methodInvocation.arguments(), children.toArray(new AstNode[0]));
        } else if (selector.is(Kind.NEW_CLASS)) {
          NewClassTreeImpl newClass = (NewClassTreeImpl) selector;
          newClass.prependChildren((AstNode) result);
          result = newClass.completeWithEnclosingExpression(result);
        } else if (selector.is(Kind.ARRAY_ACCESS_EXPRESSION)) {
          ArrayAccessExpressionTreeImpl arrayAccess = (ArrayAccessExpressionTreeImpl) selector;
          result = arrayAccess.complete(result);
        } else if (selector.is(Kind.MEMBER_SELECT)) {
          MemberSelectExpressionTreeImpl memberSelect = (MemberSelectExpressionTreeImpl) selector;
          memberSelect.prependChildren((AstNode) result);
          result = memberSelect.completeWithExpression(result);
        } else {
          throw new IllegalStateException();
        }
      }
    }

    return result;
  }

