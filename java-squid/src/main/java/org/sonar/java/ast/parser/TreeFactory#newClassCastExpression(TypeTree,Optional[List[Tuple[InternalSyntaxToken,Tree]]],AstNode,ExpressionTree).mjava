  public TypeCastExpressionTreeImpl newClassCastExpression(TypeTree type, Optional<List<Tuple<InternalSyntaxToken, Tree>>> classTypes, AstNode closeParenTokenAstNode,
    ExpressionTree expression) {
    InternalSyntaxToken closeParenToken = InternalSyntaxToken.create(closeParenTokenAstNode);

    ImmutableList.Builder<Tree> boundsBuilder = ImmutableList.<Tree>builder();
    List<AstNode> children = Lists.newArrayList();
    children.add((AstNode) type);
    if (classTypes.isPresent()) {
      for (Tuple<InternalSyntaxToken, Tree> tuple : classTypes.get()) {
        // TODO SONARJAVA-547 andOperator should be present in the tree
        InternalSyntaxToken andOperator = tuple.first();
        Tree classType = tuple.second();
        boundsBuilder.add(classType);

        children.add(andOperator);
        children.add((AstNode) classType);
      }
    }
    children.add(closeParenToken);
    children.add((AstNode) expression);

    return new TypeCastExpressionTreeImpl(type, boundsBuilder.build(), closeParenToken, expression, children);
  }

