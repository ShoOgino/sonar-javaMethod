  public ExpressionTree newClassType(Optional<List<AnnotationTreeImpl>> annotations, AstNode identifierAstNode, Optional<TypeArgumentListTreeImpl> typeArguments,
    Optional<List<ClassTypeComplement>> classTypeComplements) {

    IdentifierTreeImpl identifier = new IdentifierTreeImpl(InternalSyntaxToken.create(identifierAstNode));
    if (annotations.isPresent()) {
      identifier.prependChildren((List) annotations.get());
    }

    ExpressionTree result = identifier;
    if (typeArguments.isPresent()) {
      result = new ParameterizedTypeTreeImpl(result, typeArguments.get());
    }

    if (classTypeComplements.isPresent()) {
      for (ClassTypeComplement classTypeComplement : classTypeComplements.get()) {
        result = new MemberSelectExpressionTreeImpl(result, classTypeComplement.identifier(),
          (AstNode) result, classTypeComplement.dotToken(), classTypeComplement.identifier());

        if (classTypeComplement.typeArguments().isPresent()) {
          result = new ParameterizedTypeTreeImpl(result, classTypeComplement.typeArguments().get());
        }
      }
    }

    return result;
  }

