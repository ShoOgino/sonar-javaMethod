  public ExpressionTree basicClassExpression(PrimitiveTypeTreeImpl basicType, Optional<List<Tuple<AstNode, AstNode>>> dimensions, AstNode dotToken, AstNode classTokenAstNode) {
    // 15.8.2. Class Literals
    // int.class
    // int[].class

    IdentifierTreeImpl classToken = new IdentifierTreeImpl(InternalSyntaxToken.create(classTokenAstNode));
    ArrayTypeTreeImpl nestedDimensions = newArrayTypeTree(dimensions);
    InternalSyntaxToken dotSyntaxToken = InternalSyntaxToken.create(dotToken);

    List<AstNode> children = Lists.newArrayList();
    children.add(basicType);
    if (nestedDimensions != null) {
      children.add(nestedDimensions);
    }
    children.add(dotSyntaxToken);
    children.add(classToken);

    TypeTree typeTree = applyDim(basicType, nestedDimensions);
    return new MemberSelectExpressionTreeImpl((ExpressionTree) typeTree, dotSyntaxToken, classToken, children.toArray(new AstNode[children.size()]));
  }

