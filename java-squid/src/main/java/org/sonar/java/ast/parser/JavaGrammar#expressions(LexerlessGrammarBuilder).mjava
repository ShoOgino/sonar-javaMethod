  /**
   * 15. Expressions
   */
  private static void expressions(LexerlessGrammarBuilder b) {
    b.rule(NON_WILDCARD_TYPE_ARGUMENTS).is(LPOINT, TYPE, b.zeroOrMore(COMMA, TYPE), RPOINT);
    b.rule(SELECTOR).is(
      b.firstOf(
        b.sequence(DOT, MEMBER_SELECT_OR_METHOD_INVOCATION),
        // TODO: Alternative with IDENTIFIER, ARUGMENTS is now consumed by METHOD_INVOCATION
        b.sequence(DOT, NEW, b.optional(NON_WILDCARD_TYPE_ARGUMENTS), INNER_CREATOR),
        DIM_EXPR,
        // Specific to IDENTIFIER_SUFFIX
        b.sequence(b.zeroOrMore(DIM), DOT, CLASS)));

    b.rule(MEMBER_SELECT_OR_METHOD_INVOCATION).is(
      b.optional(NON_WILDCARD_TYPE_ARGUMENTS),
      b.firstOf(
        JavaTokenType.IDENTIFIER,
        JavaKeyword.THIS,
        JavaKeyword.SUPER),
      b.optional(ARGUMENTS));

    // TODO Factorize annotated identifier
    b.rule(CREATED_NAME).is(b.zeroOrMore(ANNOTATION), JavaTokenType.IDENTIFIER, b.optional(NON_WILDCARD_TYPE_ARGUMENTS),
      b.zeroOrMore(DOT, b.zeroOrMore(ANNOTATION), JavaTokenType.IDENTIFIER, b.optional(NON_WILDCARD_TYPE_ARGUMENTS)));
    b.rule(INNER_CREATOR).is(JavaTokenType.IDENTIFIER, CLASS_CREATOR_REST);
    b.rule(CLASS_CREATOR_REST).is(b.optional(b.firstOf(DIAMOND, TYPE_ARGUMENTS)), ARGUMENTS, b.optional(CLASS_BODY));
    b.rule(DIAMOND).is(LT, GT);
    b.rule(DIM).is(LBRK, RBRK);
  }

