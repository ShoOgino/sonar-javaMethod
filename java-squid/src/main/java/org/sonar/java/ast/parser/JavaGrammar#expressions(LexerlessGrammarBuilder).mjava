  /**
   * 15. Expressions
   */
  private static void expressions(LexerlessGrammarBuilder b) {
    b.rule(IDENTIFIER_SUFFIX).is(
      b.firstOf(
        b.sequence(b.oneOrMore(DIM), DOT, CLASS),
        DIM_EXPR,
        ARGUMENTS,
        // TODO This looks similar to SELECTOR
        b.sequence(
          DOT,
          b.firstOf(
            CLASS,
            EXPLICIT_GENERIC_INVOCATION,
            THIS,
            b.sequence(SUPER, ARGUMENTS),
            b.sequence(NEW, b.optional(NON_WILDCARD_TYPE_ARGUMENTS), INNER_CREATOR)))));
    b.rule(EXPLICIT_GENERIC_INVOCATION).is(NON_WILDCARD_TYPE_ARGUMENTS, EXPLICIT_GENERIC_INVOCATION_SUFFIX);
    b.rule(NON_WILDCARD_TYPE_ARGUMENTS).is(LPOINT, TYPE, b.zeroOrMore(COMMA, TYPE), RPOINT);
    b.rule(EXPLICIT_GENERIC_INVOCATION_SUFFIX).is(
      b.firstOf(
        SUPER_SUFFIX,
        b.sequence(JavaTokenType.IDENTIFIER, ARGUMENTS)));
    b.rule(SELECTOR).is(
      b.firstOf(
        METHOD_INVOCATION,
        MEMBER_SELECT,
        // TODO: Alternative with IDENTIFIER, ARUGMENTS is now consumed by METHOD_INVOCATION
        b.sequence(DOT, EXPLICIT_GENERIC_INVOCATION),
        b.sequence(DOT, THIS),
        b.sequence(DOT, SUPER_SUFFIX),
        b.sequence(DOT, NEW, b.optional(NON_WILDCARD_TYPE_ARGUMENTS), INNER_CREATOR),
        DIM_EXPR));
    b.rule(SUPER_SUFFIX).is(
      SUPER,
      b.firstOf(
        ARGUMENTS,
        METHOD_INVOCATION,
        MEMBER_SELECT));

    b.rule(MEMBER_SELECT).is(DOT, JavaTokenType.IDENTIFIER);
    b.rule(METHOD_INVOCATION).is(DOT, b.optional(NON_WILDCARD_TYPE_ARGUMENTS), JavaTokenType.IDENTIFIER, ARGUMENTS);

    b.rule(CREATED_NAME).is(b.zeroOrMore(ANNOTATION), JavaTokenType.IDENTIFIER, b.optional(NON_WILDCARD_TYPE_ARGUMENTS),
      b.zeroOrMore(DOT, b.zeroOrMore(ANNOTATION), JavaTokenType.IDENTIFIER, b.optional(NON_WILDCARD_TYPE_ARGUMENTS)));
    b.rule(INNER_CREATOR).is(JavaTokenType.IDENTIFIER, CLASS_CREATOR_REST);
    b.rule(CLASS_CREATOR_REST).is(b.optional(b.firstOf(DIAMOND, TYPE_ARGUMENTS)), ARGUMENTS, b.optional(CLASS_BODY));
    b.rule(DIAMOND).is(LT, GT);
    b.rule(DIM).is(LBRK, RBRK);
  }

