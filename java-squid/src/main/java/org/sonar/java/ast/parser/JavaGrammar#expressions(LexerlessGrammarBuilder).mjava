  /**
   * 15. Expressions
   */
  private static void expressions(LexerlessGrammarBuilder b) {
    b.rule(IDENTIFIER_SUFFIX).is(
      b.firstOf(
        b.sequence(
          LBRK,
          b.firstOf(
            b.sequence(RBRK, b.zeroOrMore(DIM), DOT, CLASS),
            b.sequence(EXPRESSION, RBRK))),
        ARGUMENTS,
        b.sequence(DOT, b.firstOf(
          CLASS,
          EXPLICIT_GENERIC_INVOCATION,
          THIS,
          b.sequence(SUPER, ARGUMENTS),
          b.sequence(NEW, b.optional(NON_WILDCARD_TYPE_ARGUMENTS), INNER_CREATOR)))));
    b.rule(EXPLICIT_GENERIC_INVOCATION).is(NON_WILDCARD_TYPE_ARGUMENTS, EXPLICIT_GENERIC_INVOCATION_SUFFIX);
    b.rule(NON_WILDCARD_TYPE_ARGUMENTS).is(LPOINT, TYPE, b.zeroOrMore(COMMA, TYPE), RPOINT);
    b.rule(EXPLICIT_GENERIC_INVOCATION_SUFFIX).is(
      b.firstOf(
        b.sequence(SUPER, SUPER_SUFFIX),
        b.sequence(JavaTokenType.IDENTIFIER, ARGUMENTS)));
    b.rule(SELECTOR).is(b.firstOf(
      b.sequence(DOT, JavaTokenType.IDENTIFIER, b.optional(ARGUMENTS)),
      b.sequence(DOT, EXPLICIT_GENERIC_INVOCATION),
      b.sequence(DOT, THIS),
      b.sequence(DOT, SUPER, SUPER_SUFFIX),
      b.sequence(DOT, NEW, b.optional(NON_WILDCARD_TYPE_ARGUMENTS), INNER_CREATOR),
      DIM_EXPR));
    b.rule(SUPER_SUFFIX).is(b.firstOf(
      ARGUMENTS,
      b.sequence(DOT, JavaTokenType.IDENTIFIER, b.optional(ARGUMENTS)),
      b.sequence(DOT, NON_WILDCARD_TYPE_ARGUMENTS, JavaTokenType.IDENTIFIER, ARGUMENTS)));
    b.rule(CREATED_NAME).is(b.zeroOrMore(ANNOTATION), JavaTokenType.IDENTIFIER, b.optional(NON_WILDCARD_TYPE_ARGUMENTS),
      b.zeroOrMore(DOT, b.zeroOrMore(ANNOTATION), JavaTokenType.IDENTIFIER, b.optional(NON_WILDCARD_TYPE_ARGUMENTS)));
    b.rule(INNER_CREATOR).is(JavaTokenType.IDENTIFIER, CLASS_CREATOR_REST);
    b.rule(CLASS_CREATOR_REST).is(b.optional(b.firstOf(DIAMOND, TYPE_ARGUMENTS)), ARGUMENTS, b.optional(CLASS_BODY));
    b.rule(DIAMOND).is(LT, GT);
    b.rule(QUALIFIED_IDENTIFIER_LIST).is(QUALIFIED_IDENTIFIER, b.zeroOrMore(COMMA, QUALIFIED_IDENTIFIER));
    b.rule(DIM).is(LBRK, RBRK);
    b.rule(DIM_EXPR).is(b.zeroOrMore(ANNOTATION), LBRK, EXPRESSION, RBRK);

    // Java 8 lambda expressions.
    b.rule(INFERED_PARAMS).is(LPAR, b.optional(JavaTokenType.IDENTIFIER, b.zeroOrMore(COMMA, JavaTokenType.IDENTIFIER)), RPAR);
    b.rule(LAMBDA_BODY).is(
      b.firstOf(
        BLOCK,
        EXPRESSION));

  }

