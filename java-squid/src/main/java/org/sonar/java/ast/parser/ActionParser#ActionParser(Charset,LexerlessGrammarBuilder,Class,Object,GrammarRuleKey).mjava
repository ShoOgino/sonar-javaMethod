  public ActionParser(Charset charset, LexerlessGrammarBuilder b, Class grammarClass, Object action, GrammarRuleKey rootRule) {
    super(null);

    List<Field> fields = Lists.newArrayList();
    Field parentField = null;
    Field childrenField = null;

    for (Field field : AstNode.class.getDeclaredFields()) {
      if (!"type".equals(field.getName()) && !"name".equals(field.getName())) {
        field.setAccessible(true);
        if ("parent".equals(field.getName())) {
          parentField = field;
        } else if ("children".equals(field.getName())) {
          childrenField = field;
        }
        fields.add(field);
      }
    }

    Preconditions.checkState(parentField != null, "Unable to find the parent field!");
    Preconditions.checkState(childrenField != null, "Unable to find the children field!");

    this.fields = fields.toArray(new Field[fields.size()]);
    this.parentField = parentField;
    this.childrenField = childrenField;

    this.action = action;

    this.grammarBuilderInterceptor = new GrammarBuilderInterceptor(b);
    Enhancer grammarEnhancer = new Enhancer();
    grammarEnhancer.setSuperclass(grammarClass);
    grammarEnhancer.setCallback(grammarBuilderInterceptor);

    ActionMethodInterceptor actionMethodInterceptor = new ActionMethodInterceptor(grammarBuilderInterceptor);
    Enhancer actionEnhancer = new Enhancer();
    actionEnhancer.setSuperclass(action.getClass());
    actionEnhancer.setCallback(actionMethodInterceptor);

    Object grammar = grammarEnhancer.create(
      new Class[] {GrammarBuilder.class, action.getClass()},
      new Object[] {grammarBuilderInterceptor, actionEnhancer.create()});

    for (Method method : grammarClass.getMethods()) {
      if (method.getDeclaringClass().equals(Object.class)) {
        continue;
      }

      try {
        method.invoke(grammar);
      } catch (InvocationTargetException e) {
        throw Throwables.propagate(e);
      } catch (IllegalAccessException e) {
        throw Throwables.propagate(e);
      }
    }

    b.setRootRule(rootRule);
    this.parser = new ParserAdapter<LexerlessGrammar>(charset, b.build());
  }

