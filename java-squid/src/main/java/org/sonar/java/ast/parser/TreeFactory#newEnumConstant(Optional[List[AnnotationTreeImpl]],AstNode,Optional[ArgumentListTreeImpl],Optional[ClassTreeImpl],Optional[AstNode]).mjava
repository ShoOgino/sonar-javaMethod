  public EnumConstantTreeImpl newEnumConstant(
    Optional<List<AnnotationTreeImpl>> annotations, AstNode identifierAstNode,
    Optional<ArgumentListTreeImpl> arguments,
    Optional<ClassTreeImpl> classBody,
    Optional<AstNode> semicolonTokenAstNode) {

    IdentifierTreeImpl identifier = new IdentifierTreeImpl(InternalSyntaxToken.create(identifierAstNode));
    if (annotations.isPresent()) {
      identifier.prependChildren(annotations.get());
    }

    List<AstNode> children = Lists.newArrayList();
    SyntaxToken openParenToken = null;
    SyntaxToken closeParenToken = null;
    List argumentsList = Collections.emptyList();
    if (arguments.isPresent()) {
      ArgumentListTreeImpl argumentsListTreeImpl = arguments.get();
      argumentsList = argumentsListTreeImpl;
      openParenToken = argumentsListTreeImpl.openParenToken();
      closeParenToken = argumentsListTreeImpl.closeParenToken();
      children.add(argumentsListTreeImpl);
    }

    if (classBody.isPresent()) {
      children.add(classBody.get());
    }

    NewClassTreeImpl newClass = new NewClassTreeImpl(
      openParenToken,
      argumentsList,
      closeParenToken,
      classBody.isPresent() ? classBody.get() : null,
      children.toArray(new AstNode[0]));
    newClass.completeWithIdentifier(identifier);

    @SuppressWarnings("unchecked")
    EnumConstantTreeImpl result = new EnumConstantTreeImpl(modifiers((Optional<List<ModifierTree>>) (Optional<?>) annotations), identifier, newClass);

    result.addChild(identifier);
    result.addChild(newClass);
    if (semicolonTokenAstNode.isPresent()) {
      result.addChild(semicolonTokenAstNode.get());
    }

    return result;
  }

