  private Object convertType(AstNode node) {
    Object result;

    if (grammarBuilderInterceptor.isOptionalRule(node.getType())) {
      Object[] children = convertTypes(node.getChildren().toArray(new AstNode[0]));
      Preconditions.checkState(children.length <= 1, "Unexpected number of children: " + children.length);

      Optional option;
      if (children.length == 1) {
        option = Optional.of(children[0]);
      } else {
        option = Optional.absent();
      }

      result = option;
    } else if (grammarBuilderInterceptor.isRepeatedRule(node.getType())) {
      throw new IllegalStateException("Did not expect a repeated rule: " + node);
    } else {
      result = node;
    }

    return result;
  }

