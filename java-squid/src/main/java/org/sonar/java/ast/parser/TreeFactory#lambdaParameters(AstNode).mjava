  public LambdaParameterListTreeImpl lambdaParameters(AstNode astNode) {
    InternalSyntaxToken openParenToken = null;
    InternalSyntaxToken closeParenToken = null;
    List<AstNode> children = Lists.newArrayList();
    ImmutableList.Builder<VariableTreeImpl> parameters = ImmutableList.builder();
    if(astNode.is(JavaTokenType.IDENTIFIER)) {
      VariableTreeImpl variableTree = new VariableTreeImpl(astNode, treeMaker.identifier(astNode));
      parameters.add(variableTree);
      children.add(astNode);
    } else {
      if (astNode.is(JavaGrammar.FORMAL_PARAMETERS)) {
        for (VariableTree variableTree : treeMaker.formalParameters(astNode)) {
          parameters.add((VariableTreeImpl) variableTree);
          children.add(astNode.getFirstChild(JavaGrammar.FORMAL_PARAMETER_DECLS));
        }
      }else {
        for (AstNode node : astNode.getChildren(JavaTokenType.IDENTIFIER)) {
          VariableTreeImpl variableTree = new VariableTreeImpl(node, treeMaker.identifier(node));
          parameters.add(variableTree);
          children.add(node);
        }
      }

      AstNode leftParen = astNode.getFirstChild(JavaPunctuator.LPAR);
      if (leftParen != null) {
        openParenToken = InternalSyntaxToken.create(leftParen);
      }
      AstNode rightParen = astNode.getFirstChild(JavaPunctuator.RPAR);
      if (rightParen != null) {
        closeParenToken = InternalSyntaxToken.create(rightParen);
      }
    }
    return new LambdaParameterListTreeImpl(openParenToken, parameters.build(), closeParenToken, children);
  }

