  public LambdaParameterListTreeImpl lambdaParameters(AstNode astNode) {
    if (astNode instanceof LambdaParameterListTreeImpl) {
      return (LambdaParameterListTreeImpl) astNode;
    }

    InternalSyntaxToken openParenToken = null;
    InternalSyntaxToken closeParenToken = null;
    List<AstNode> children = Lists.newArrayList();
    ImmutableList.Builder<VariableTreeImpl> parameters = ImmutableList.builder();
    if (astNode.is(JavaTokenType.IDENTIFIER)) {
      VariableTreeImpl variableTree = new VariableTreeImpl(astNode, treeMaker.identifier(astNode));
      parameters.add(variableTree);
      children.add(astNode);
    } else if (astNode.is(JavaGrammar.FORMAL_PARAMETERS)) {
      FormalParametersListTreeImpl formalParameters = (FormalParametersListTreeImpl) astNode;
      parameters.addAll(formalParameters);

      openParenToken = formalParameters.openParenToken();
      closeParenToken = formalParameters.closeParenToken();

      for (int i = 1; i < formalParameters.getChildren().size() - 1; i++) {
        children.add(formalParameters.getChildren().get(i));
      }
    } else {
      throw new IllegalStateException();
    }
    return new LambdaParameterListTreeImpl(openParenToken, parameters.build(), closeParenToken, children);
  }

