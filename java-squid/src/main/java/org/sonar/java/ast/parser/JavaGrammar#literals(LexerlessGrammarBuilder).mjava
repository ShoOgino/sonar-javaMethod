  /**
   * 3.10. Literals
   */
  private static void literals(LexerlessGrammarBuilder b) {
    b.rule(SPACING).is(
        b.skippedTrivia(whitespace(b)),
        b.zeroOrMore(
            b.commentTrivia(b.firstOf(inlineComment(b), multilineComment(b))),
            b.skippedTrivia(whitespace(b)))).skip();

    b.rule(EOF).is(b.token(GenericTokenType.EOF, b.endOfInput())).skip();

    b.rule(CHARACTER_LITERAL).is(characterLiteral(b), SPACING);
    b.rule(JavaTokenType.LITERAL).is(stringLiteral(b), SPACING);

    b.rule(FLOAT_LITERAL).is(b.regexp(FLOATING_LITERAL_WITHOUT_SUFFIX_REGEXP + "[fF]|[0-9][0-9_]*+[fF]"), SPACING);
    b.rule(DOUBLE_LITERAL).is(b.regexp(FLOATING_LITERAL_WITHOUT_SUFFIX_REGEXP + "[dD]?+|[0-9][0-9_]*+[dD]"), SPACING);

    b.rule(LONG_LITERAL).is(b.regexp(INTEGER_LITERAL_REGEXP + "[lL]"), SPACING);
    b.rule(INTEGER_LITERAL).is(b.regexp(INTEGER_LITERAL_REGEXP), SPACING);

    b.rule(KEYWORD).is(b.firstOf("assert", "break", "case", "catch", "class", "const", "continue", "default", "do", "else",
        "enum", "extends", "finally", "final", "for", "goto", "if", "implements", "import", "interface",
        "instanceof", "new", "package", "return", "static", "super", "switch", "synchronized", "this",
        "throws", "throw", "try", "void", "while"), b.nextNot(LETTER_OR_DIGIT));
    b.rule(LETTER_OR_DIGIT).is(javaIdentifierPart(b));
    b.rule(IDENTIFIER).is(b.nextNot(KEYWORD), javaIdentifier(b), SPACING);

    b.rule(LITERAL).is(b.firstOf(
        TRUE,
        FALSE,
        NULL,
        CHARACTER_LITERAL,
        JavaTokenType.LITERAL,
        FLOAT_LITERAL,
        DOUBLE_LITERAL,
        LONG_LITERAL,
        INTEGER_LITERAL));
  }

