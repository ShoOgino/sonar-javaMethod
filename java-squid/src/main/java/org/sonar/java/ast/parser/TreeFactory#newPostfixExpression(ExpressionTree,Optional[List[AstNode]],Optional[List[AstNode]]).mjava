  public ExpressionTree newPostfixExpression(ExpressionTree primary, Optional<List<AstNode>> selectors, Optional<List<AstNode>> postfixOperatorAstNodes) {
    ExpressionTree result = primary;

    if (selectors.isPresent()) {
      for (AstNode selector : selectors.get()) {
        result = applySelector(result, selector);
      }
    }

    if (postfixOperatorAstNodes.isPresent()) {
      for (AstNode postfixOperatorAstNode : postfixOperatorAstNodes.get()) {
        InternalSyntaxToken postfixOperatorToken = InternalSyntaxToken.create(postfixOperatorAstNode);
        result = new InternalPostfixUnaryExpression(kindMaps.getPostfixOperator((JavaPunctuator) postfixOperatorAstNode.getType()), result, postfixOperatorToken);
      }
    }

    return result;
  }

