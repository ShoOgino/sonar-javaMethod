  public NewArrayTreeImpl newArrayCreatorWithInitializer(
    InternalSyntaxToken openBracketToken, InternalSyntaxToken closeBracketToken,
    Optional<List<Tuple<Optional<List<AnnotationTreeImpl>>, Tuple<InternalSyntaxToken, InternalSyntaxToken>>>> dimensions,
    NewArrayTreeImpl partial) {
    
    ImmutableList.Builder<ArrayDimensionTree> dDimensionsBuilder = ImmutableList.builder();
    dDimensionsBuilder.add(new ArrayDimensionTreeImpl(openBracketToken, null, closeBracketToken));
    if (dimensions.isPresent()) {
      for (Tuple<Optional<List<AnnotationTreeImpl>>, Tuple<InternalSyntaxToken, InternalSyntaxToken>> dim : dimensions.get()) {
        List<AnnotationTreeImpl> annotations = dim.first().isPresent() ? dim.first().get() : ImmutableList.<AnnotationTreeImpl>of();
        Tuple<InternalSyntaxToken, InternalSyntaxToken> brackets = dim.second();
        dDimensionsBuilder.add(new ArrayDimensionTreeImpl(annotations, brackets.first(), null, brackets.second()));
      }
    }

    return partial.completeDimensions(dDimensionsBuilder.build());
  }

