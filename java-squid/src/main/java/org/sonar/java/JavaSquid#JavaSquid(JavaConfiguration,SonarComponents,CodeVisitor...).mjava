  public JavaSquid(JavaConfiguration conf, @Nullable SonarComponents sonarComponents, CodeVisitor... visitors) {

    astScanner = JavaAstScanner.create(conf);

    Iterable<CodeVisitor> visitorsToBridge = Arrays.asList(visitors);
    if (sonarComponents != null) {
      visitorsToBridge = Iterables.concat(
          sonarComponents.createJavaFileScanners(),
          visitorsToBridge
      );
    }
    VisitorsBridge visitorsBridge = new VisitorsBridge(visitorsToBridge, sonarComponents);
    astScanner.accept(visitorsBridge);

    if (sonarComponents != null) {
      astScanner.accept(new FileLinesVisitor(sonarComponents, conf.getCharset()));
      astScanner.accept(new SyntaxHighlighterVisitor(sonarComponents, conf.getCharset()));
    }

    // TODO unchecked cast
    squidIndex = (SquidIndex) astScanner.getIndex();

    bytecodeScanner = new BytecodeScanner(squidIndex);
    bytecodeScanner.accept(new DITVisitor());
    bytecodeScanner.accept(new DependenciesVisitor(graph));

    // External visitors (typically Check ones):
    for (CodeVisitor visitor : visitors) {
      if (visitor instanceof CharsetAwareVisitor) {
        ((CharsetAwareVisitor) visitor).setCharset(conf.getCharset());
      }
      if (visitor instanceof SemanticModelProviderAwareVisitor) {
        ((SemanticModelProviderAwareVisitor) visitor).setSemanticModelProvider(visitorsBridge);
      }
      astScanner.accept(visitor);
      bytecodeScanner.accept(visitor);
    }

    astScannerForTests = new AstScanner(astScanner);
    astScannerForTests.accept(new PackageVisitor());
    astScannerForTests.accept(new FileVisitor());
    astScannerForTests.accept(new TestVisitor());
    astScannerForTests.accept(new ClassVisitor());
  }

