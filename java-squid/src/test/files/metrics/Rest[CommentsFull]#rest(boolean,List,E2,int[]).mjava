  Object rest(boolean test, List list, E2 e2, int[] array) throws Exception {
    /* comment */ assert test;
    assert /* comment */ test;
    assert test /* comment */;
    assert test /* comment */ : m09();
    assert test : /* comment */ m09();
    
    /* comment */ ;
    
    /* comment */ for (;;) {
      /* comment */ break;
    }
    for /* comment */ (;;) {
      break /* comment */;
    }
    for ( /* comment */ ; ; ) { break;}
    for ( ; /* comment */ ; ) { break;}
    for ( ; ; /* comment */ ) { break;}
    for(;;) {
      if (test) {
        /* comment */ continue;
      } else if (test) {
        continue /* comment */ ;
      }
      break;
    }
    
    /* comment */ for (Object object : list) {}
    for /* comment */ (Object object : list) {}
    for( Object /* comment */ object : list) {}
    for( Object object /* comment */ : list) {}
    for( Object object : /* comment */ list) {}
    for( Object object : /* comment */ list) {}
    for( Object object : list/* comment */ ) {}
    
    /* comment */ if (test) {}
    if /* comment */ (test) {}
    if (/* comment */ test) {}
    if (test /* comment */ ) {}
    if (test) {} /* comment */  else {}
    
    /* comment */ do { } while(test);
    do { } /* comment */ while(test);
    do {} while /* comment */ (test);
    do {} while (test /* comment */);
    do {} while (test) /* comment */;
    
    /* comment */ while (test) {}
    while /* comment */ (test) {}
    while (/* comment */ test) {}
    while (test /* comment */) {}
    
    /* comment */ LABEL1: ;
    LABEL2 /* comment */ : ;
    
    /* comment */ switch(e2) {}
    switch /* comment */ (e2) {}
    switch (/* comment */ e2) {}
    switch (e2 /* comment */) {}
    switch (e2) /* comment */ {}
    switch (e2) {/* comment */ }
    switch (e2) {
      /* comment */ case A:
      case /* comment */ B:
      case C /* comment */:
      /* comment */ default:
    }
    switch (e2) { default/* comment */: }
    
    /* comment */ synchronized (list) {}
    synchronized /* comment */ (list) {}
    synchronized (/* comment */ list) {}
    synchronized (list /* comment */) {}
    
    if(test) {/* comment */ throw new Exception(); }
    if(test) {throw /* comment */ new Exception(); }
    if(test) {throw new /* comment */ Exception(); }
    if(test) {throw new Exception /* comment */(); }
    if(test) {throw new Exception (/* comment */); }
    if(test) {throw new Exception() /* comment */; }
    
    /* comment */ try { } catch (Exception e) {}
    try /* comment */ { } catch (Exception e) {}
    try { /* comment */ } catch (Exception e) {}
    try { } /* comment */ catch (Exception e) {}
    try { } catch /* comment */ (Exception e) {}
    try { } catch (/* comment */ Exception e) {}
    try { } catch (Exception /* comment */ e) {}
    try { } catch (Exception e /* comment */) {}
    try { } catch (Exception e ) /* comment */{}
    try { } catch (Exception e ) {/* comment */}
    try { throw new FileNotFoundException(); } catch (FileNotFoundException /* comment */ | UnknownTypeException e ) {}
    try { } /* comment */ finally {}
    try { } finally /* comment */ {}
    try { } finally {/* comment */ }
    try /* comment */ (Closeable c = new FileInputStream("")) {}
    try (Closeable c = new FileInputStream("")/* comment */ ) {}
    try (Closeable c1 = new FileInputStream("") /* comment */ ; Closeable c2 = new FileInputStream("")) {}
    
    int i /* comment */ = 0, j = 0;
    i /* comment */ ++;
    i /* comment */ -- ;
    /* comment */ --i;
    /* comment */ ++i;
    i /* comment */ += 1;
    i /* comment */ -= 1;
    i /* comment */ *= 1;
    i /* comment */ /= 1;
    i /* comment */ %= 1;
    i /* comment */ >>= 1;
    i /* comment */ <<= 1;
    i /* comment */ >>>= 1;
    i = /* comment */ ~1;
    i = /* comment */ +1;
    i = /* comment */ -1;
    i = +/* comment */+i;
    i = i /* comment */+ j;
    i = i + j /* comment */;
    i = i /* comment */ & 1;
    i = i /* comment */ | 1;
    i = i /* comment */ ^ 1;
    i /* comment */ &= 1;
    i /* comment */ |= 1;
    i /* comment */ ^= 1;
    i = /* comment */ array[0];
    i = array /* comment */[0];
    i = array[/* comment */ 0];
    i = array[0/* comment */ ];
    i = array[0]/* comment */;
    i = + + i;
    
    i = test /* comment */ ? i : j;
    i = test ? i /* comment */ : j;
    i = test ? i : j /* comment */;
    
    /* comment */((Object) list).toString();
    (/* comment */(Object) list).toString();
    ((/* comment */Object) list).toString();
    ((Object/* comment */) list).toString();
    ((Object) list/* comment */).toString();
    ((Object) list)/* comment */.toString();
    ((Object) list).toString/* comment */();
    ((Object) list).toString(/* comment */);
    ((Object) list).toString()/* comment */;

    test = /* comment */ !test;
    test = i /* comment */ > j;
    test = i /* comment */ < j;
    test = i /* comment */ <= j;
    test = i /* comment */ >= j;
    test = test /* comment */ && test;
    test = test /* comment */ || test;
    test = test /* comment */ ^ test;
    test = list /* comment */ instanceof Object;
    
    Class c;
    c = /* comment */int[].class;
    c = int/* comment */[].class;
    c = int[/* comment */].class;
    c = int[]/* comment */.class;
    c = int[]./* comment */class;
    c = int[].class/* comment */;
    
    I3 op;
    op = /* comment */(a, b) -> a - b;
    op = (/* comment */a, b) -> a - b;
    op = (a/* comment */, b) -> a - b;
    op = (a, /* comment */b) -> a - b;
    op = (a,b /* comment */) -> a - b;
    op = (a,b) /* comment */ -> a - b;
    op = (a,b) -> a - b /* comment */;
    
    String[] array2 = {"A", "B", "C"};
    Arrays.sort(array2, /* comment */ String::compareToIgnoreCase);
    Arrays.sort(array2, String/* comment */ ::compareToIgnoreCase);
    Arrays.sort(array2, String:: /* comment */compareToIgnoreCase);
    
    if (test) { return null /* comment */; }
    /* comment */ return null;
  }

