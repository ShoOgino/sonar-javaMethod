  @Test
  public void testNotEqual() {
    List<BinaryRelation> constraints = relationsWithOneValue(NOT_EQUAL);
    for (int i = 0; i < NUMBER_OF_VALUES; i++) {
      for (int j = 0; j < NUMBER_OF_VALUES; j++) {
        if (i != j) {
          BinaryRelation notEqualRelation = relation(NOT_EQUAL, values[i], values[j]);
          RelationState notEqualResult = notEqualRelation.resolveState(constraints);
          BinaryRelation equalRelation = relation(EQUAL, values[i], values[j]);
          RelationState equalResult = equalRelation.resolveState(constraints);
          if (i == 0 || j == 0) {
            assertThat(notEqualResult).as(notEqualRelation.toString()).isEqualTo(FULFILLED);
            assertThat(equalResult).as(equalRelation.toString()).isEqualTo(UNFULFILLED);
          } else {
            assertThat(notEqualResult).as(notEqualRelation.toString()).isEqualTo(UNDETERMINED);
            assertThat(equalResult).as(equalRelation.toString()).isEqualTo(UNDETERMINED);
          }
        }
      }
    }
  }

