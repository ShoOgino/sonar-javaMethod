  private void checkTransitive(Class<? extends SymbolicValueRelation> hClass1, Class<? extends SymbolicValueRelation> hClass2, Class<? extends SymbolicValueRelation> checkedClass,
    Boolean directResult) {
    SymbolicValue a = values[0];
    SymbolicValue b = values[1];
    SymbolicValue c = values[2];
    try {
      SymbolicValueRelation hypothesis1 = hClass1.getConstructor(SymbolicValue.class, SymbolicValue.class).newInstance(a, b);
      SymbolicValueRelation hypothesis2 = hClass2.getConstructor(SymbolicValue.class, SymbolicValue.class).newInstance(b, c);
      SymbolicValueRelation checked = checkedClass.getConstructor(SymbolicValue.class, SymbolicValue.class).newInstance(a, c);
      checkTransitive(hypothesis1, hypothesis2, checked, directResult);
      checkTransitive(hypothesis1.symmetric(), hypothesis2, checked, directResult);
      checkTransitive(hypothesis1, hypothesis2.symmetric(), checked, directResult);
      checkTransitive(hypothesis1, hypothesis2, checked.symmetric(), directResult);
    } catch (Exception e) {
      Assert.fail(e.getMessage());
    }
  }

