  @Test
  public void ok() {
    g.rule(JavaGrammar.BLOCK).mock();
    g.rule(JavaGrammar.ASSERT_STATEMENT).mock();
    g.rule(JavaGrammar.IF_STATEMENT).mock();
    g.rule(JavaGrammar.FOR_STATEMENT).mock();
    g.rule(JavaGrammar.WHILE_STATEMENT).mock();
    g.rule(JavaGrammar.DO_STATEMENT).mock();
    g.rule(JavaGrammar.TRY_STATEMENT).mock();
    g.rule(JavaGrammar.SWITCH_STATEMENT).mock();
    g.rule(JavaGrammar.SYNCHRONIZED_STATEMENT).mock();
    g.rule(JavaGrammar.RETURN_STATEMENT).mock();
    g.rule(JavaGrammar.THROW_STATEMENT).mock();
    g.rule(JavaGrammar.BREAK_STATEMENT).mock();
    g.rule(JavaGrammar.CONTINUE_STATEMENT).mock();
    g.rule(JavaGrammar.LABELED_STATEMENT).mock();
    g.rule(JavaGrammar.EXPRESSION_STATEMENT).mock();
    g.rule(JavaGrammar.EMPTY_STATEMENT).mock();

    assertThat(g.rule(JavaGrammar.STATEMENT))
        .matches("block")
        .matches("emptyStatement")
        .matches("labeledStatement")
        .matches("expressionStatement")
        .matches("ifStatement")
        .matches("assertStatement")
        .matches("switchStatement")
        .matches("whileStatement")
        .matches("doStatement")
        .matches("forStatement")
        .matches("breakStatement")
        .matches("continueStatement")
        .matches("returnStatement")
        .matches("throwStatement")
        .matches("synchronizedStatement")
        .matches("tryStatement");
  }

