  /**
   * http://docs.oracle.com/javase/specs/jls/se5.0/html/lexical.html#3.10.1
   * http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.1
   */
  @Test
  public void integer_literals() {
    // Decimal
    assertThat(lexer.lex("0"), hasToken("0", JavaTokenType.INTEGER_LITERAL));
    assertThat(lexer.lex("543"), hasToken("543", JavaTokenType.INTEGER_LITERAL));
    assertThat(lexer.lex("543l"), hasToken("543l", JavaTokenType.LONG_LITERAL));
    assertThat(lexer.lex("543L"), hasToken("543L", JavaTokenType.LONG_LITERAL));

    // Hexadecimal
    assertThat(lexer.lex("0xFF"), hasToken("0xFF", JavaTokenType.INTEGER_LITERAL));
    assertThat(lexer.lex("0xFFl"), hasToken("0xFFl", JavaTokenType.LONG_LITERAL));
    assertThat(lexer.lex("0xFFL"), hasToken("0xFFL", JavaTokenType.LONG_LITERAL));

    assertThat(lexer.lex("0XFF"), hasToken("0XFF", JavaTokenType.INTEGER_LITERAL));
    assertThat(lexer.lex("0XFFl"), hasToken("0XFFl", JavaTokenType.LONG_LITERAL));
    assertThat(lexer.lex("0XFFL"), hasToken("0XFFL", JavaTokenType.LONG_LITERAL));

    // Octal
    assertThat(lexer.lex("077"), hasToken("077", JavaTokenType.INTEGER_LITERAL));
    assertThat(lexer.lex("077l"), hasToken("077l", JavaTokenType.LONG_LITERAL));
    assertThat(lexer.lex("077L"), hasToken("077L", JavaTokenType.LONG_LITERAL));

    // Binary (new in Java 7)
    assertThat(lexer.lex("0b1010"), hasToken("0b1010", JavaTokenType.INTEGER_LITERAL));
    assertThat(lexer.lex("0b1010l"), hasToken("0b1010l", JavaTokenType.LONG_LITERAL));
    assertThat(lexer.lex("0b1010L"), hasToken("0b1010L", JavaTokenType.LONG_LITERAL));

    assertThat(lexer.lex("0B1010"), hasToken("0B1010", JavaTokenType.INTEGER_LITERAL));
    assertThat(lexer.lex("0B1010l"), hasToken("0B1010l", JavaTokenType.LONG_LITERAL));
    assertThat(lexer.lex("0B1010L"), hasToken("0B1010L", JavaTokenType.LONG_LITERAL));
  }

