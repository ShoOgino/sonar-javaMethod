  /**
   * http://docs.oracle.com/javase/specs/jls/se5.0/html/lexical.html#3.10.2
   */
  @Test
  public void floating_point_literals() {
    // Decimal

    // with dot at the end
    assertThat(lexer.lex("1234."), hasToken("1234.", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("1234.E1"), hasToken("1234.E1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("1234.e+1"), hasToken("1234.e+1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("1234.E-1"), hasToken("1234.E-1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("1234.f"), hasToken("1234.f", JavaTokenType.FLOATING_LITERAL));

    // with dot between
    assertThat(lexer.lex("12.34"), hasToken("12.34", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("12.34E1"), hasToken("12.34E1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("12.34e+1"), hasToken("12.34e+1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("12.34E-1"), hasToken("12.34E-1", JavaTokenType.FLOATING_LITERAL));

    assertThat(lexer.lex("12.34f"), hasToken("12.34f", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("12.34E1F"), hasToken("12.34E1F", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("12.34E+1d"), hasToken("12.34E+1d", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("12.34e-1D"), hasToken("12.34e-1D", JavaTokenType.FLOATING_LITERAL));

    // with dot at the beginning
    assertThat(lexer.lex(".1234"), hasToken(".1234", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex(".1234e1"), hasToken(".1234e1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex(".1234E+1"), hasToken(".1234E+1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex(".1234E-1"), hasToken(".1234E-1", JavaTokenType.FLOATING_LITERAL));

    assertThat(lexer.lex(".1234f"), hasToken(".1234f", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex(".1234E1F"), hasToken(".1234E1F", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex(".1234e+1d"), hasToken(".1234e+1d", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex(".1234E-1D"), hasToken(".1234E-1D", JavaTokenType.FLOATING_LITERAL));

    // without dot
    assertThat(lexer.lex("1234e1"), hasToken("1234e1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("1234E+1"), hasToken("1234E+1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("1234E-1"), hasToken("1234E-1", JavaTokenType.FLOATING_LITERAL));

    assertThat(lexer.lex("1234E1f"), hasToken("1234E1f", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("1234e+1d"), hasToken("1234e+1d", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("1234E-1D"), hasToken("1234E-1D", JavaTokenType.FLOATING_LITERAL));

    // Hexadecimal

    // with dot at the end
    assertThat(lexer.lex("0xAF."), hasToken("0xAF.", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0XAF.P1"), hasToken("0XAF.P1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0xAF.p+1"), hasToken("0xAF.p+1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0XAF.p-1"), hasToken("0XAF.p-1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0xAF.f"), hasToken("0xAF.f", JavaTokenType.FLOATING_LITERAL));

    // with dot between
    assertThat(lexer.lex("0XAF.BC"), hasToken("0XAF.BC", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0xAF.BCP1"), hasToken("0xAF.BCP1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0XAF.BCp+1"), hasToken("0XAF.BCp+1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0xAF.BCP-1"), hasToken("0xAF.BCP-1", JavaTokenType.FLOATING_LITERAL));

    assertThat(lexer.lex("0xAF.BCf"), hasToken("0xAF.BCf", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0xAF.BCp1F"), hasToken("0xAF.BCp1F", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0XAF.BCP+1d"), hasToken("0XAF.BCP+1d", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0XAF.BCp-1D"), hasToken("0XAF.BCp-1D", JavaTokenType.FLOATING_LITERAL));

    // without dot
    assertThat(lexer.lex("0xAFp1"), hasToken("0xAFp1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0XAFp+1"), hasToken("0XAFp+1", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0xAFp-1"), hasToken("0xAFp-1", JavaTokenType.FLOATING_LITERAL));

    assertThat(lexer.lex("0XAFp1f"), hasToken("0XAFp1f", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0xAFp+1d"), hasToken("0xAFp+1d", JavaTokenType.FLOATING_LITERAL));
    assertThat(lexer.lex("0XAFp-1D"), hasToken("0XAFp-1D", JavaTokenType.FLOATING_LITERAL));
  }

