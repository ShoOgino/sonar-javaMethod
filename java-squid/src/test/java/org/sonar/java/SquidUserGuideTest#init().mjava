  @BeforeClass
  public static void init() {
    File prjDir = new File("target/test-projects/commons-collections-3.2.1");
    File srcDir = new File(prjDir, "src");
    File binDir = new File(prjDir, "bin");

    JavaConfiguration conf = new JavaConfiguration(Charsets.UTF_8);
    conf.setAnalyzePropertyAccessors(true);
    context = mock(SensorContext.class);
    Project sonarProject = mock(Project.class);
    ProjectFileSystem pfs = mock(ProjectFileSystem.class);
    when(pfs.getBasedir()).thenReturn(prjDir);
    when(sonarProject.getFileSystem()).thenReturn(pfs);
    Measurer measurer = new Measurer(sonarProject, context, true);
    JavaResourceLocator javaResourceLocator = mock(JavaResourceLocator.class);
    when(javaResourceLocator.findSourceFileKeyByClassName(anyString())).thenAnswer(new Answer<String>() {
      @Override
      public String answer(InvocationOnMock invocation) throws Throwable {
        String fileName = (String) invocation.getArguments()[0];
        if(!fileName.endsWith(".java")) {
          fileName += ".java";
        }
        return fileName;
      }
    });
    squid = new JavaSquid(conf, null, measurer, javaResourceLocator, new CodeVisitor[0]);
    squid.scanDirectories(Collections.singleton(srcDir), Collections.singleton(binDir));
  }

