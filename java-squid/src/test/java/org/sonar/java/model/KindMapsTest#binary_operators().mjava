  @Test
  public void binary_operators() {
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.STAR)).isSameAs(Tree.Kind.MULTIPLY);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.DIV)).isSameAs(Tree.Kind.DIVIDE);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.MOD)).isSameAs(Tree.Kind.REMAINDER);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.PLUS)).isSameAs(Tree.Kind.PLUS);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.MINUS)).isSameAs(Tree.Kind.MINUS);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.SL)).isSameAs(Tree.Kind.LEFT_SHIFT);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.SR)).isSameAs(Tree.Kind.RIGHT_SHIFT);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.BSR)).isSameAs(Tree.Kind.UNSIGNED_RIGHT_SHIFT);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.LT)).isSameAs(Tree.Kind.LESS_THAN);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.GT)).isSameAs(Tree.Kind.GREATER_THAN);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.LE)).isSameAs(Tree.Kind.LESS_THAN_OR_EQUAL_TO);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.GE)).isSameAs(Tree.Kind.GREATER_THAN_OR_EQUAL_TO);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.EQUAL)).isSameAs(Tree.Kind.EQUAL_TO);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.NOTEQUAL)).isSameAs(Tree.Kind.NOT_EQUAL_TO);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.AND)).isSameAs(Tree.Kind.AND);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.HAT)).isSameAs(Tree.Kind.XOR);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.OR)).isSameAs(Tree.Kind.OR);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.ANDAND)).isSameAs(Tree.Kind.CONDITIONAL_AND);
    assertThat(kindMaps.getBinaryOperator(JavaPunctuator.OROR)).isSameAs(Tree.Kind.CONDITIONAL_OR);

    thrown.expect(NullPointerException.class);
    thrown.expectMessage("Mapping not found for binary operator null");
    kindMaps.getBinaryOperator(null);
  }

