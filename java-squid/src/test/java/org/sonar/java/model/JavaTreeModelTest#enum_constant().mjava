  @Test
  public void enum_constant() {
    List<Tree> declarations = firstType("enum T { C1, C2(2) { }; }").members();
    assertThat(declarations).hasSize(2);

    EnumConstantTree tree = (EnumConstantTree) declarations.get(0);
    assertThat(tree.is(Tree.Kind.ENUM_CONSTANT)).isTrue();
    assertThat(tree.simpleName().name()).isEqualTo("C1");
    assertThatChildrenIteratorHasSize(tree, 2);
    NewClassTree newClassTree = tree.initializer();
    assertThat(newClassTree.openParenToken()).isNull();
    assertThat(newClassTree.arguments()).isEmpty();
    assertThat(newClassTree.closeParenToken()).isNull();
    assertThat(newClassTree.classBody()).isNull();
    assertThat(newClassTree.newKeyword()).isNull();
    assertThatChildrenIteratorHasSize(newClassTree, 1);

    tree = (EnumConstantTree) declarations.get(1);
    assertThat(tree.is(Tree.Kind.ENUM_CONSTANT)).isTrue();
    assertThat(tree.simpleName().name()).isEqualTo("C2");
    assertThatChildrenIteratorHasSize(tree, 2);
    newClassTree = tree.initializer();
    assertThat(newClassTree.openParenToken()).isNotNull();
    assertThat(newClassTree.arguments()).hasSize(1);
    assertThat(newClassTree.closeParenToken()).isNotNull();
    assertThat(newClassTree.classBody()).isNotNull();
    assertThat(newClassTree.classBody().openBraceToken().text()).isEqualTo("{");
    assertThat(newClassTree.newKeyword()).isNull();
    assertThatChildrenIteratorHasSize(newClassTree, 5);
  }

