  /**
   * 15.19. Shift Operators
   */
  @Test
  public void shift_expression() {
    AstNode astNode = p.parse("class T { int m() { return 1 >> 2 << 3 >>> 4; } }").getFirstDescendant(JavaGrammar.SHIFT_EXPRESSION);
    BinaryExpressionTree tree = (BinaryExpressionTree) maker.expression(astNode);
    assertThat(tree.leftOperand()).isNotNull();
    assertThat(tree.is(Tree.Kind.RIGHT_SHIFT)).isTrue();
    assertThat(tree.rightOperand()).isNotNull();
    tree = (BinaryExpressionTree) tree.rightOperand();
    assertThat(tree.leftOperand()).isNotNull();
    assertThat(tree.is(Tree.Kind.LEFT_SHIFT)).isTrue();
    assertThat(tree.rightOperand()).isNotNull();
    tree = (BinaryExpressionTree) tree.rightOperand();
    assertThat(tree.leftOperand()).isNotNull();
    assertThat(tree.is(Tree.Kind.UNSIGNED_RIGHT_SHIFT)).isTrue();
    assertThat(tree.rightOperand()).isNotNull();
  }

