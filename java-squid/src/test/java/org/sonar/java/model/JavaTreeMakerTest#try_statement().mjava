  /**
   * 14.20. The try statement
   */
  @Test
  public void try_statement() {
    AstNode astNode = p.parse("class T { void m() { try { } finally { } } }").getFirstDescendant(JavaGrammar.STATEMENT);
    TryStatementTree tree = (TryStatementTree) maker.statement(astNode);
    assertThat(tree.resources()).isEmpty();
    assertThat(tree.block()).isNotNull();
    assertThat(tree.catches()).isEmpty();
    assertThat(tree.finallyBlock()).isNotNull();

    astNode = p.parse("class T { void m() { try { } catch (RuntimeException e) { } catch (Exception e) { } } }").getFirstDescendant(JavaGrammar.STATEMENT);
    tree = (TryStatementTree) maker.statement(astNode);
    assertThat(tree.resources()).isEmpty();
    assertThat(tree.block()).isNotNull();
    assertThat(tree.catches()).hasSize(2);
    assertThat(tree.catches().get(0).parameter()).isNotNull();
    assertThat(tree.catches().get(0).block()).isNotNull();
    assertThat(tree.catches().get(1).parameter()).isNotNull();
    assertThat(tree.catches().get(1).block()).isNotNull();
    assertThat(tree.finallyBlock()).isNull();

    astNode = p.parse("class T { void m() { try { } catch (Exception e) { } finally { } } }").getFirstDescendant(JavaGrammar.STATEMENT);
    tree = (TryStatementTree) maker.statement(astNode);
    assertThat(tree.resources()).isEmpty();
    assertThat(tree.block()).isNotNull();
    assertThat(tree.catches()).hasSize(1);
    assertThat(tree.finallyBlock()).isNotNull();

    astNode = p.parse("class T { void m() { try (Resource r = open()) { } catch (Exception e) { } finally { } } }").getFirstDescendant(JavaGrammar.STATEMENT);
    tree = (TryStatementTree) maker.statement(astNode);
    // FIXME try with resources
//    assertThat(tree.resources()).isEmpty();
    assertThat(tree.block()).isNotNull();
    assertThat(tree.catches()).hasSize(1);
    assertThat(tree.finallyBlock()).isNotNull();

    // FIXME multi-catch
  }

