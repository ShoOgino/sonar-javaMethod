  @Test
  public void test_semantic_exclusions() {
    InternalVisitorsBridge visitorsBridgeWithoutSemantic = new InternalVisitorsBridge(Collections.singletonList(new JavaFileScanner() {
      @Override
      public void scanFile(JavaFileScannerContext context) {
        assertThat(context.getSemanticModel() == null).isTrue();
      }
    }), Lists.<File>newArrayList(), null);
    visitorsBridgeWithoutSemantic.setContext(context);
    checkFile(contstructFileName("java", "lang", "someFile.java"), "package java.lang; class A {}", visitorsBridgeWithoutSemantic);
    checkFile(contstructFileName("src", "java", "lang", "someFile.java"), "package java.lang; class A {}", visitorsBridgeWithoutSemantic);
    checkFile(contstructFileName("home", "user", "oracleSdk", "java", "lang", "someFile.java"), "package java.lang; class A {}", visitorsBridgeWithoutSemantic);
    checkFile(contstructFileName("java", "io", "Serializable.java"), "package java.io; class A {}", visitorsBridgeWithoutSemantic);
    checkFile(contstructFileName("java", "lang", "annotation", "Annotation.java"), "package java.lang.annotation; class Annotation {}", visitorsBridgeWithoutSemantic);
    InternalVisitorsBridge visitorsBridgeWithSemantic = new InternalVisitorsBridge(Collections.singletonList(new IssuableSubscriptionVisitor() {
      public ClassTree enclosingClass;

      @Override
      public List<Tree.Kind> nodesToVisit() {
        return ImmutableList.of(Tree.Kind.CLASS, Tree.Kind.METHOD);
      }

      @Override
      public void scanFile(JavaFileScannerContext context) {
        assertThat(context.getSemanticModel()).isNotNull();
        super.scanFile(context);
      }

      @Override
      public void visitNode(Tree tree) {
        if (tree.is(Tree.Kind.CLASS)) {
          enclosingClass = (ClassTree) tree;
          assertThat(context.getComplexityNodes(enclosingClass).size()).isEqualTo(context.getComplexity(enclosingClass));
        } else {
          assertThat(context.getMethodComplexityNodes(enclosingClass, ((MethodTree) tree)).size()).isEqualTo(context.getMethodComplexity(enclosingClass, ((MethodTree) tree)));
        }
      }
    }), Lists.<File>newArrayList(), null);
    visitorsBridgeWithSemantic.setContext(context);
    checkFile(contstructFileName("java", "lang", "annotation", "Foo.java"), "package java.lang.annotation; class Annotation {}", visitorsBridgeWithSemantic);
    checkFile(contstructFileName("java", "io", "File.java"), "package java.io; class A {}", visitorsBridgeWithSemantic);
    checkFile(contstructFileName("src", "foo", "bar", "java", "lang", "someFile.java"), "package foo.bar.java.lang; class A { void method() { ; } }", visitorsBridgeWithSemantic);
  }

