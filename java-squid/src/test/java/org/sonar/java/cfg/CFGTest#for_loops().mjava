  @Test
  public void for_loops() {
    CFG cfg = buildCFG("void fun(Object foo) {System.out.println(''); for(int i =0;i<10;i++) { System.out.println(i); } }");
    assertThat(cfg.reversedBlocks()).hasSize(6);
    assertThat(cfg.reversedBlocks().get(4).terminator().is(Tree.Kind.FOR_STATEMENT)).isTrue();

    cfg = buildCFG("void fun(Object foo) { for(int i =0;i<10;i++) { if(i == 5) break; } }");
    //orphan nodes are created because of break (not a problem as they won't be visited during se)
    assertThat(cfg.reversedBlocks()).hasSize(9);
    assertThat(cfg.reversedBlocks().get(5).terminator().is(Tree.Kind.BREAK_STATEMENT)).isTrue();
    //orphan nodes are created because of continue (not a problem as they won't be visited during se)
    cfg = buildCFG("void fun(Object foo) { for(int i =0;i<10;i++) { if(i == 5) continue; } }");
    assertThat(cfg.reversedBlocks().get(5).terminator().is(Tree.Kind.CONTINUE_STATEMENT)).isTrue();
    assertThat(cfg.reversedBlocks()).hasSize(9);

    cfg = buildCFG("void fun(){ System.out.println(''); for(String foo:list) {System.out.println(foo);} System.out.println(''); }");
    assertThat(cfg.reversedBlocks()).hasSize(5);
    assertThat(cfg.reversedBlocks().get(3).terminator().is(Tree.Kind.FOR_EACH_STATEMENT)).isTrue();
  }

