  private void initAndScan(boolean separateAccessorsFromMethods) {
    File prjDir = new File("target/test-projects/commons-collections-3.2.1");
    File srcDir = new File(prjDir, "src");
    File binDir = new File(prjDir, "bin");

    JavaConfiguration conf = new JavaConfiguration(Charsets.UTF_8);
    conf.setSeparateAccessorsFromMethods(separateAccessorsFromMethods);
    context = mock(SensorContext.class);
    DefaultFileSystem fs = new DefaultFileSystem();
    fs.setBaseDir(prjDir);
    Collection<File> files = FileUtils.listFiles(srcDir, new String[]{"java"}, true);
    setupFileSystem(fs, files);
    Measurer measurer = new Measurer(fs, context, separateAccessorsFromMethods);
    JavaResourceLocator javaResourceLocator = new JavaResourceLocator() {
      public Map<String, String> sourceFileCache = Maps.newHashMap();

      @Override
      public Resource findResourceByClassName(String className) {
        return null;
      }

      @Override
      public String findSourceFileKeyByClassName(String className) {
        String name = className.replace('.', '/');
        return sourceFileCache.get(name);
      }

      @Override
      public Collection<String> classKeys() {
        return sourceFileCache.keySet();
      }

      @Override
      public Collection<File> classFilesToAnalyze() {
        return Collections.emptyList();
      }

      @Override
      public Collection<File> classpath() {
        return null;
      }

      @Override
      public Integer getMethodStartLine(String fullyQualifiedMethodName) {
        return null;
      }

      @Override
      public ResourceMapping getResourceMapping() {
        return null;
      }

      @Override
      public void scanFile(JavaFileScannerContext context) {
        JavaFilesCache javaFilesCache = new JavaFilesCache();
        javaFilesCache.scanFile(context);
        for (String key : javaFilesCache.resourcesCache.keySet()){
          sourceFileCache.put(key, context.getFileKey());
        }
      }
    };
    squid = new JavaSquid(conf, null, measurer, javaResourceLocator, new CodeVisitor[0]);
    squid.scan(files, Collections.<File>emptyList(), Collections.singleton(binDir));
  }

