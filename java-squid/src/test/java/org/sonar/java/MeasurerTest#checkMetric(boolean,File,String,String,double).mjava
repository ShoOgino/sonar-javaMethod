  /**
   * Utility method to quickly get metric out of a file.
   */
  private void checkMetric(boolean separateAccessorsFromMethods, File baseDir, String filename, String metric, double expectedValue) {
    Measurer measurer = new Measurer(fs, context, separateAccessorsFromMethods);
    JavaConfiguration conf = new JavaConfiguration(Charsets.UTF_8);
    conf.setSeparateAccessorsFromMethods(separateAccessorsFromMethods);
    JavaSquid squid = new JavaSquid(conf, null, measurer, null, new CodeVisitor[0]);
    //set up file
    File file = new File(baseDir, filename);
    DefaultInputFile inputFile = new DefaultInputFile(filename);
    inputFile.setFile(file);
    fs.add(inputFile);

    squid.scan(Lists.newArrayList(file), Collections.<File>emptyList(), Collections.<File>emptyList());
    ArgumentCaptor<Measure> captor = ArgumentCaptor.forClass(Measure.class);
    ArgumentCaptor<InputFile> sonarFilescaptor = ArgumentCaptor.forClass(InputFile.class);
    //-1 for metrics in case we don't analyse Accessors.
    verify(context, times(NB_OF_METRICS)).saveMeasure(sonarFilescaptor.capture(), captor.capture());
    int checkedMetrics = 0;
    for (Measure measure : captor.getAllValues()) {
      if (metric.equals(measure.getMetricKey())) {
        assertThat(measure.getValue()).isEqualTo(expectedValue);
        checkedMetrics++;
      }
    }
    assertThat(checkedMetrics).isEqualTo(1);
  }

