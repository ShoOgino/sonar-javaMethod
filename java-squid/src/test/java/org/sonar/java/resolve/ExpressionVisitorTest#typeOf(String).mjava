  private Type typeOf(String input) {
    SemanticModel semanticModel = mock(SemanticModel.class);
    when(semanticModel.getEnv(any(Tree.class))).thenReturn(env);
    ExpressionVisitor visitor = new ExpressionVisitor(semanticModel, symbols, new Resolve(symbols, bytecodeCompleter));

    String p = "class Test { void wrapperMethod() { " + input + "; } }";
    AstNode node = JavaParser.createParser(Charsets.UTF_8, true).parse(p);
    CompilationUnitTree tree = new JavaTreeMaker().compilationUnit(node);
    tree.accept(visitor);

    TestedNodeExtractor testedNodeExtractor = new TestedNodeExtractor();
    testedNodeExtractor.visitCompilationUnit(tree);
    return visitor.getType(testedNodeExtractor.testedNode);
  }

