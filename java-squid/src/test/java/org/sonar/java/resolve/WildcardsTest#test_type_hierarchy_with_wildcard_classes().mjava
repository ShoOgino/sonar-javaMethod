  @Test
  public void test_type_hierarchy_with_wildcard_classes() {
    List<Type> elementTypes = declaredTypesUsingHierarchy(
      "A<?>",
      "B<?>",
      "C<?>",
      "B<? extends Animal>",
      "B<? extends Object>",
      "A<? extends Object>",
      "A<? super Animal>",
      "Object");

    Type wcAType = elementTypes.get(0);
    Type wcBType = elementTypes.get(1);
    Type wcCType = elementTypes.get(2);
    Type wcExtendsAnimalBType = elementTypes.get(3);
    Type wcExtendsObjectBType = elementTypes.get(4);
    Type wcExtendsObjectAType = elementTypes.get(5);
    Type wcSuperAnimalAType = elementTypes.get(6);
    Type objectType = elementTypes.get(7);

    SubtypeAssert.assertThat(wcBType).isSubtypeOf(wcAType);
    SubtypeAssert.assertThat(wcCType).isNotSubtypeOf(wcAType);
    SubtypeAssert.assertThat(wcCType).isNotSubtypeOf(wcBType);

    SubtypeAssert.assertThat(wcBType).isSubtypeOfObject();
    SubtypeAssert.assertThat(wcBType).isSubtypeOf(objectType);
    SubtypeAssert.assertThat(objectType).isNotSubtypeOf(wcBType);

    SubtypeAssert.assertThat(wcExtendsAnimalBType).isSubtypeOfObject();
    SubtypeAssert.assertThat(wcExtendsAnimalBType).isSubtypeOf(objectType);
    SubtypeAssert.assertThat(objectType).isNotSubtypeOf(wcExtendsAnimalBType);

    SubtypeAssert.assertThat(wcExtendsObjectBType).isSubtypeOfObject();
    SubtypeAssert.assertThat(wcExtendsObjectBType).isSubtypeOf(objectType);
    SubtypeAssert.assertThat(objectType).isNotSubtypeOf(wcExtendsObjectBType);

    SubtypeAssert.assertThat(wcExtendsObjectAType).isSubtypeOfObject();
    SubtypeAssert.assertThat(wcExtendsObjectAType).isSubtypeOf(objectType);
    SubtypeAssert.assertThat(objectType).isNotSubtypeOf(wcExtendsObjectAType);

    SubtypeAssert.assertThat(wcSuperAnimalAType).isSubtypeOfObject();
    SubtypeAssert.assertThat(wcSuperAnimalAType).isSubtypeOf(objectType);
    SubtypeAssert.assertThat(objectType).isNotSubtypeOf(wcSuperAnimalAType);

    Type wildCardObjectType = ((ParametrizedTypeJavaType) wcExtendsObjectAType).typeSubstitution.substitutedTypes().get(0);
    SubtypeAssert.assertThat(objectType).isSubtypeOf(wildCardObjectType);
    SubtypeAssert.assertThat(wildCardObjectType).isNotSubtypeOf(objectType);
    SubtypeAssert.assertThat(wildCardObjectType).isNotSubtypeOfObject();
  }

