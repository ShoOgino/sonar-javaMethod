  @Test
  public void testUpperBoundedWildCards() {
    List<Type> elementTypes = declaredTypesUsingHierarchy(
      "B<?>",
      "B<? extends Animal>",
      "B<? extends Cat>",
      "B<? extends Object>",
      "B<Cat>",
      "A<? extends Object>");

    Type wcBType = elementTypes.get(0);
    Type wcExtendsAnimalBType = elementTypes.get(1);
    Type wcExtendsCatBType = elementTypes.get(2);
    Type wcExtendsObjectBType = elementTypes.get(3);
    Type catBType = elementTypes.get(4);
    Type wcExtendsObjectAType = elementTypes.get(5);

    SubtypeAssert.assertThat(wcBType).isSubtypeOf(wcExtendsObjectBType);
    SubtypeAssert.assertThat(wcExtendsObjectBType).isSubtypeOf(wcBType);

    SubtypeAssert.assertThat(wcExtendsAnimalBType).isSubtypeOf(wcExtendsObjectBType);
    SubtypeAssert.assertThat(wcExtendsObjectBType).isNotSubtypeOf(wcExtendsAnimalBType);

    SubtypeAssert.assertThat(wcExtendsCatBType).isSubtypeOf(wcExtendsObjectBType);
    SubtypeAssert.assertThat(wcExtendsObjectBType).isNotSubtypeOf(wcExtendsCatBType);

    SubtypeAssert.assertThat(wcExtendsAnimalBType).isNotSubtypeOf(wcExtendsCatBType);
    SubtypeAssert.assertThat(wcExtendsCatBType).isSubtypeOf(wcExtendsAnimalBType);

    SubtypeAssert.assertThat(wcExtendsObjectAType).isNotSubtypeOf(wcExtendsObjectBType);
    SubtypeAssert.assertThat(wcExtendsObjectBType).isSubtypeOf(wcExtendsObjectAType);

    SubtypeAssert.assertThat(wcExtendsObjectAType).isNotSubtypeOf(wcExtendsObjectBType);
    SubtypeAssert.assertThat(catBType).isSubtypeOf(wcExtendsCatBType);
    SubtypeAssert.assertThat(catBType).isSubtypeOf(wcExtendsAnimalBType);
    SubtypeAssert.assertThat(catBType).isSubtypeOf(wcExtendsObjectAType);
    SubtypeAssert.assertThat(catBType).isSubtypeOf(wcExtendsObjectBType);
  }

