  @Test
  public void parametrizedTypeType_methods_tests() {
    Symbol.PackageSymbol packageSymbol = new Symbol.PackageSymbol("org.foo.bar", null);
    Symbol.TypeSymbol typeSymbol = new Symbol.TypeSymbol(Flags.PUBLIC, "MyType", packageSymbol);
    Symbol.TypeVariableSymbol typeVariableSymbol = new Symbol.TypeVariableSymbol("E", typeSymbol);
    Type.ClassType classType = (Type.ClassType) typeSymbol.type;
    Type.TypeVariableType typeVariableType = (Type.TypeVariableType) typeVariableSymbol.type;
    Map<Type.TypeVariableType, Type> typeSubstitution = Maps.newHashMap();
    typeSubstitution.put(typeVariableType, classType);

    Type.ParametrizedTypeType ptt = new Type.ParametrizedTypeType(typeSymbol, typeSubstitution);
    assertThat(ptt.substitution(typeVariableType)).isEqualTo(classType);
    assertThat(ptt.substitution(new Type.TypeVariableType(new Symbol.TypeVariableSymbol("F", typeSymbol)))).isNull();
    assertThat(ptt.typeParameters()).hasSize(1);
    assertThat(ptt.typeParameters()).contains(typeVariableType);

    ptt = new Type.ParametrizedTypeType(typeSymbol, null);
    assertThat(ptt.substitution(typeVariableType)).isNull();
    assertThat(ptt.typeParameters()).isEmpty();
  }

