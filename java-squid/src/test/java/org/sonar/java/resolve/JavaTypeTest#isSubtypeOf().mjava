  @Test
  public void isSubtypeOf() throws Exception {
    JavaSymbol.PackageJavaSymbol packageSymbol = new JavaSymbol.PackageJavaSymbol("org.foo.bar", null);
    JavaSymbol.TypeJavaSymbol typeSymbol = new JavaSymbol.TypeJavaSymbol(Flags.PUBLIC, "MyType", packageSymbol);
    JavaSymbol.TypeVariableJavaSymbol typeVariableSymbol = new JavaSymbol.TypeVariableJavaSymbol("T", typeSymbol);
    JavaType.ClassJavaType classType = (JavaType.ClassJavaType) typeSymbol.type;
    JavaType.TypeVariableJavaType typeVariableType = (JavaType.TypeVariableJavaType) typeVariableSymbol.type;
    JavaType.ArrayJavaType arrayType = new JavaType.ArrayJavaType(typeSymbol.type, symbols.arrayClass);
    typeVariableType.bounds = Lists.newArrayList(symbols.objectType);

    classType.supertype = symbols.objectType;
    classType.interfaces = Lists.newArrayList(symbols.cloneableType);
    assertThat(classType.isSubtypeOf("java.lang.Object")).isTrue();
    assertThat(classType.isSubtypeOf(symbols.objectType)).isTrue();

    assertThat(classType.isSubtypeOf("org.foo.bar.MyType")).isTrue();
    assertThat(classType.isSubtypeOf(typeSymbol.type)).isTrue();

    assertThat(classType.isSubtypeOf("java.lang.CharSequence")).isFalse();
    assertThat(classType.isSubtypeOf(symbols.stringType)).isFalse();

    assertThat(classType.isSubtypeOf("java.lang.Cloneable")).isTrue();
    assertThat(classType.isSubtypeOf(symbols.cloneableType)).isTrue();
    assertThat(new JavaType(JavaType.BYTE, null).isSubtypeOf("java.lang.Object")).isFalse();

    assertThat(arrayType.isSubtypeOf("org.foo.bar.MyType[]")).isTrue();
    assertThat(arrayType.isSubtypeOf(new JavaType.ArrayJavaType(typeSymbol.type, symbols.arrayClass))).isTrue();

    assertThat(arrayType.isSubtypeOf("org.foo.bar.MyType")).isFalse();
    assertThat(arrayType.isSubtypeOf(typeSymbol.type)).isFalse();

    assertThat(arrayType.isSubtypeOf("java.lang.Object[]")).isTrue();
    assertThat(arrayType.isSubtypeOf(new JavaType.ArrayJavaType(symbols.objectType, symbols.arrayClass))).isTrue();

    assertThat(arrayType.isSubtypeOf("java.lang.Object")).isTrue();
    assertThat(arrayType.isSubtypeOf(symbols.objectType)).isTrue();

    assertThat(symbols.nullType.isSubtypeOf(symbols.objectType)).isTrue();
    assertThat(symbols.nullType.isSubtypeOf("java.lang.Object")).isTrue();
    assertThat(symbols.objectType.isSubtypeOf(symbols.nullType)).isFalse();

    assertThat(symbols.nullType.isSubtypeOf(arrayType)).isTrue();
    assertThat(arrayType.isSubtypeOf(symbols.nullType)).isFalse();
    assertThat(symbols.nullType.isSubtypeOf(symbols.nullType)).isTrue();

    assertThat(arrayType.isSubtypeOf("org.foo.bar.SomeClass[]")).isFalse();

    assertThat(typeVariableType.isSubtypeOf("java.lang.Object")).isTrue();
    assertThat(typeVariableType.is("java.lang.Object")).isFalse();
    assertThat(typeVariableType.isSubtypeOf("java.lang.CharSequence")).isFalse();
  }

