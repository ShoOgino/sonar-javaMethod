  /**
   * Simulates creation of symbols and types.
   */
  @Before
  public void setUp() {
    JavaSymbol.PackageJavaSymbol p = symbols.defaultPackage;
    p.members = new Scope(p);
    // class MyClass
    classSymbol = new JavaSymbol.TypeJavaSymbol(0, "MyClass", p);
    classType = (JavaType.ClassJavaType) classSymbol.type;
    classType.supertype = symbols.objectType;
    classType.interfaces = ImmutableList.of();
    classSymbol.members = new Scope(classSymbol);
    p.members.enter(classSymbol);
    // int[][] var;
    variableSymbol = new JavaSymbol.VariableJavaSymbol(0, "var", classSymbol);
    variableSymbol.type = new JavaType.ArrayJavaType(new JavaType.ArrayJavaType(symbols.intType, symbols.arrayClass), symbols.arrayClass);
    classSymbol.members.enter(variableSymbol);

    // MyClass var2;
    classSymbol.members.enter(new JavaSymbol.VariableJavaSymbol(0, "var2", classType, classSymbol));

    // int method()
    methodSymbol = new JavaSymbol.MethodJavaSymbol(0, "method", classSymbol);
    ((JavaSymbol.MethodJavaSymbol)methodSymbol).setMethodType(new JavaType.MethodJavaType(ImmutableList.<JavaType>of(), symbols.intType, ImmutableList.<JavaType>of(), classSymbol));
    classSymbol.members.enter(methodSymbol);

    // int method()
    argMethodSymbol = new JavaSymbol.MethodJavaSymbol(0, "argMethod", classSymbol);
    ((JavaSymbol.MethodJavaSymbol)argMethodSymbol).setMethodType(new JavaType.MethodJavaType(ImmutableList.of(symbols.intType), symbols.intType, ImmutableList.<JavaType>of(), classSymbol));
    classSymbol.members.enter(argMethodSymbol);

    classSymbol.members.enter(new JavaSymbol.VariableJavaSymbol(0, "this", classType, classSymbol));
    classSymbol.members.enter(new JavaSymbol.VariableJavaSymbol(0, "super", classType.supertype, classSymbol));

    // FIXME figure out why top is mandatory
    Resolve.Env top = new Resolve.Env();
    top.scope = new Scope((JavaSymbol) null);

    Resolve.Env compilationUnitEnv = new Resolve.Env();
    compilationUnitEnv.outer = top;
    compilationUnitEnv.packge = p;
    compilationUnitEnv.scope = p.members;
    compilationUnitEnv.enclosingClass = symbols.predefClass;
    compilationUnitEnv.namedImports = new Scope(p);
    compilationUnitEnv.starImports = new Scope(p);
    compilationUnitEnv.staticStarImports = new Scope(p);

    env = compilationUnitEnv.dup();
    env.outer = compilationUnitEnv;
    env.enclosingClass = classSymbol;
    env.scope = classSymbol.members;
  }

