  @Test
  public void ClassDeclaration() {
    Result result = Result.createFor("declarations/ClassDeclaration");
    JavaSymbol.TypeJavaSymbol typeSymbol = (JavaSymbol.TypeJavaSymbol) result.symbol("Declaration");
    JavaSymbol classDeclaration = result.symbol("ClassDeclaration");
    List<JavaSymbol> parameters = classDeclaration.type.symbol.typeParameters.lookup("T");
    assertThat(parameters).hasSize(1);
    assertThat(parameters.get(0).getName()).isEqualTo("T");
    parameters = classDeclaration.type.symbol.typeParameters.lookup("S");
    assertThat(parameters).hasSize(1);
    assertThat(parameters.get(0).getName()).isEqualTo("S");
    assertThat(typeSymbol.owner()).isSameAs(classDeclaration);
    assertThat(typeSymbol.flags()).isEqualTo(Flags.PRIVATE);
    assertThat(typeSymbol.getSuperclass()).isSameAs(result.symbol("Superclass").type);
    assertThat(typeSymbol.getInterfaces()).containsExactly(
        result.symbol("FirstInterface").type,
        result.symbol("SecondInterface").type);
    assertThat(typeSymbol.members.lookup("this")).isNotEmpty();
    assertThat(typeSymbol.members.lookup("super")).hasSize(1);
    JavaSymbol superSymbol = typeSymbol.members.lookup("super").get(0);

    typeSymbol = (JavaSymbol.TypeJavaSymbol) result.symbol("Superclass");
    assertThat(superSymbol.type.symbol).isSameAs(typeSymbol);
    assertThat(typeSymbol.symbolMetadata.isAnnotatedWith("java.lang.Override")).isFalse();
    JavaSymbol superclass = typeSymbol.getSuperclass().symbol;
    assertThat(superclass.getName()).isEqualTo("Object");
    assertThat(superclass.owner).isInstanceOf(JavaSymbol.PackageJavaSymbol.class);
    assertThat(superclass.owner.getName()).isEqualTo("java.lang");

    assertThat(typeSymbol.getInterfaces()).isEmpty();

    typeSymbol = (JavaSymbol.TypeJavaSymbol) result.symbol("Foo");
    assertThat(typeSymbol.getSuperclass()).isSameAs(result.symbol("Baz").type);

    assertThat(result.reference(25,21)).isSameAs(result.symbol("method"));

    SymbolMetadataResolve metadata = classDeclaration.metadata();
    assertThat(metadata.annotations()).hasSize(1);
    assertThat(metadata.valuesForAnnotation("java.lang.Override")).isNull();
    assertThat(metadata.isAnnotatedWith("java.lang.Override")).isFalse();
    assertThat(metadata.valuesForAnnotation("java.lang.SuppressWarnings")).hasSize(1);
    assertThat(metadata.isAnnotatedWith("java.lang.SuppressWarnings")).isTrue();
  }

