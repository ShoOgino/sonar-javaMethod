  @Test
  public void ClassDeclaration() {
    Result result = Result.createFor("declarations/ClassDeclaration");
    Symbol.TypeSymbol typeSymbol = (Symbol.TypeSymbol) result.symbol("Declaration");
    Symbol classDeclaration = result.symbol("ClassDeclaration");
    assertThat(classDeclaration.isParametrized).isTrue();
    assertThat(typeSymbol.owner()).isSameAs(classDeclaration);
    assertThat(typeSymbol.flags()).isEqualTo(Flags.PRIVATE);
    assertThat(typeSymbol.getSuperclass()).isSameAs(result.symbol("Superclass").type);
    assertThat(typeSymbol.getInterfaces()).containsExactly(
        result.symbol("FirstInterface").type,
        result.symbol("SecondInterface").type);
    assertThat(typeSymbol.members.lookup("this")).isNotEmpty();
    assertThat(typeSymbol.members.lookup("super")).hasSize(1);
    Symbol superSymbol = typeSymbol.members.lookup("super").get(0);

    typeSymbol = (Symbol.TypeSymbol) result.symbol("Superclass");
    assertThat(superSymbol.type.symbol).isSameAs(typeSymbol);

    Symbol superclass = typeSymbol.getSuperclass().symbol;
    assertThat(superclass.getName()).isEqualTo("Object");
    assertThat(superclass.owner).isInstanceOf(Symbol.PackageSymbol.class);
    assertThat(superclass.owner.getName()).isEqualTo("java.lang");

    assertThat(typeSymbol.getInterfaces()).isEmpty();

    typeSymbol = (Symbol.TypeSymbol) result.symbol("Foo");
    assertThat(typeSymbol.getSuperclass()).isSameAs(result.symbol("Baz").type);

    assertThat(result.reference(25,21)).isSameAs(result.symbol("method"));
    assertThat(classDeclaration.metadata().annotations()).hasSize(1);
  }

