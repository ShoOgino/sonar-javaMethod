  @Test
  public void UnionType() throws Exception {
    Result result = Result.createFor("UnionTypes");

    JavaSymbol exceptionVariableSymbol = result.symbol("e0");
    assertThat(exceptionVariableSymbol.type()).isNotSameAs(Symbols.unknownType);
    assertThat(exceptionVariableSymbol.type().is("java.lang.Exception")).isTrue();
    JavaSymbol methodSymbol = result.reference(6, 13);
    assertThat(methodSymbol.owner).isSameAs(result.symbol("UnionTypes"));
    JavaSymbol methodDeclarationSymbol = result.symbol("unwrapException", 18);
    assertThat(methodSymbol).isEqualTo(methodDeclarationSymbol);
    assertThat(methodDeclarationSymbol.usages()).hasSize(1);

    exceptionVariableSymbol = result.symbol("e1");
    assertThat(exceptionVariableSymbol.type()).isNotSameAs(Symbols.unknownType);
    assertThat(exceptionVariableSymbol.type().is("UnionTypes$B")).isTrue();
    methodSymbol = result.reference(8, 13);
    assertThat(methodSymbol.owner).isSameAs(result.symbol("UnionTypes"));
    methodDeclarationSymbol = result.symbol("unwrapException", 22);
    assertThat(methodSymbol).isEqualTo(methodDeclarationSymbol);
    assertThat(methodDeclarationSymbol.usages()).hasSize(1);

    assertThat(exceptionVariableSymbol.usages()).hasSize(1);
    try {
      exceptionVariableSymbol.usages().clear();
      fail("list of usages of a symbol is not immutable");
    } catch (UnsupportedOperationException uoe) {
      assertThat(exceptionVariableSymbol.usages()).hasSize(1);
    }


    exceptionVariableSymbol = result.symbol("e2");
    assertThat(exceptionVariableSymbol.type()).isEqualTo(Symbols.unknownType);
    methodDeclarationSymbol = result.symbol("unwrapException", 26);
    assertThat(methodDeclarationSymbol.usages()).isEmpty();
  }

