  @Test
  public void multiplicative_and_additive_expression() {
    for (String op : Arrays.asList("*", "/", "%", "+", "-")) {
      for (String o1 : Arrays.asList(CHAR, BYTE, SHORT, INT)) {
        for (String o2 : Arrays.asList(CHAR, BYTE, SHORT, INT)) {
          assertThatTypeOf(o1, op, o2).isSameAs(symbols.intType);
        }
      }
      for (String other : Arrays.asList(CHAR, BYTE, SHORT, INT, LONG)) {
        assertThatTypeOf(LONG, op, other).isSameAs(symbols.longType);
        assertThatTypeOf(other, op, LONG).isSameAs(symbols.longType);
      }
      for (String other : Arrays.asList(CHAR, BYTE, SHORT, INT, LONG, FLOAT)) {
        assertThatTypeOf(FLOAT, op, other).isSameAs(symbols.floatType);
        assertThatTypeOf(other, op, FLOAT).isSameAs(symbols.floatType);
      }
      for (String other : Arrays.asList(CHAR, BYTE, SHORT, INT, LONG, FLOAT, DOUBLE)) {
        assertThatTypeOf(DOUBLE, op, other).isSameAs(symbols.doubleType);
        assertThatTypeOf(other, op, DOUBLE).isSameAs(symbols.doubleType);
      }
    }

    // TODO
    // string, object = string
    // object, string = string
    for (String other : Arrays.asList(STRING, CHAR, BYTE, SHORT, INT, LONG, FLOAT, DOUBLE, BOOLEAN, NULL)) {
      assertThatTypeOf(STRING, "+", other).isSameAs(symbols.stringType);
      assertThatTypeOf(other, "+", STRING).isSameAs(symbols.stringType);
    }
    // TODO check that null + null won't produce string - see Javac
  }

