  @Test
  public void type_parameters_should_be_read_from_bytecode() {
    Symbol.TypeSymbol typeParametersSymbol = bytecodeCompleter.getClassSymbol("org.sonar.java.resolve.targets.TypeParameters");
    typeParametersSymbol.complete();
    assertThat(typeParametersSymbol.typeParameters).isNotNull();
    assertThat(typeParametersSymbol.typeParameters.scopeSymbols()).hasSize(2);
    assertThat(typeParametersSymbol.typeVariableTypes).hasSize(2);

    Type.TypeVariableType TtypeVariableType = typeParametersSymbol.typeVariableTypes.get(0);
    assertThat(TtypeVariableType.erasure().getSymbol().getName()).isEqualTo("Object");
    assertThat(typeParametersSymbol.typeVariableTypes.get(1).erasure().getSymbol().getName()).isEqualTo("CharSequence");

    assertThat(typeParametersSymbol.getSuperclass()).isInstanceOf(Type.ParametrizedTypeType.class);
    assertThat(((Type.ParametrizedTypeType) typeParametersSymbol.getSuperclass()).typeSubstitution.keySet()).hasSize(1);
    Type.TypeVariableType keyTypeVariable = ((Type.ParametrizedTypeType) typeParametersSymbol.getSuperclass()).typeSubstitution.keySet().iterator().next();
    assertThat(keyTypeVariable.symbol.getName()).isEqualTo("S");
    Type actual = ((Type.ParametrizedTypeType) typeParametersSymbol.getSuperclass()).typeSubstitution.get(keyTypeVariable);
    assertThat(actual).isInstanceOf(Type.ParametrizedTypeType.class);
    assertThat(((Type.ParametrizedTypeType) actual).typeSubstitution.keySet()).hasSize(1);

    assertThat(typeParametersSymbol.getInterfaces()).hasSize(2);
    assertThat(typeParametersSymbol.getInterfaces().get(0)).isInstanceOf(Type.ParametrizedTypeType.class);

    Symbol.MethodSymbol funMethod = (Symbol.MethodSymbol) typeParametersSymbol.members().lookup("fun").get(0);
    assertThat(funMethod.getReturnType().type).isSameAs(TtypeVariableType);
    assertThat(funMethod.getParametersTypes().get(0)).isSameAs(TtypeVariableType);

    Symbol.MethodSymbol fooMethod = (Symbol.MethodSymbol) typeParametersSymbol.members().lookup("foo").get(0);
    Type.TypeVariableType WtypeVariableType = fooMethod.typeVariableTypes.get(0);
    assertThat(fooMethod.getParametersTypes().get(0).isTagged(Type.ARRAY)).isTrue();
    assertThat(((Type.ArrayType)fooMethod.getParametersTypes().get(0)).elementType()).isSameAs(WtypeVariableType);
    Type resultType = ((Type.MethodType) fooMethod.type).resultType;
    assertThat(resultType).isInstanceOf(Type.ParametrizedTypeType.class);
    Type.ParametrizedTypeType actualResultType = (Type.ParametrizedTypeType) resultType;
    assertThat(actualResultType.typeSubstitution.keySet()).hasSize(1);
    assertThat(actualResultType.typeSubstitution.values().iterator().next()).isSameAs(WtypeVariableType);

    //primitive types
    assertThat(fooMethod.getParametersTypes().get(1).isTagged(Type.INT)).isTrue();
    assertThat(fooMethod.getParametersTypes().get(2).isTagged(Type.LONG)).isTrue();

  }

