  @BeforeClass
  public static void setup() {
    JavaConfiguration conf = new JavaConfiguration(Charset.forName("UTF-8"));
    JavaResourceLocator javaResourceLocator = mock(JavaResourceLocator.class);
    when(javaResourceLocator.findSourceFileKeyByClassName(anyString())).thenAnswer(new Answer<String>() {
      @Override
      public String answer(InvocationOnMock invocation) throws Throwable {
        String fileName = (String) invocation.getArguments()[0];
        if(!fileName.endsWith(".java")) {
          fileName += ".java";
        }
        return fileName;
      }
    });
    JavaSquid squid = new JavaSquid(conf, javaResourceLocator);
    squid.scanDirectories(
        Collections.singleton(new File("src/test/files/bytecode/src")),
        Collections.singleton(new File("src/test/files/bytecode/bin")));
    index = squid.getIndex();
    graph = squid.getGraph();

    tag = index.search("tags/Tag");
    tagFile = index.search("tags/Tag.java");
    file = index.search("tags/File");
    line = index.search("tags/Line");
    tagName = index.search("tags/TagName");
    tagException = index.search("tags/TagException");
    language = index.search("tags/Language");
    sourceFile = index.search("tags/SourceFile");
    todo = index.search("tags/impl/Todo");
    fixme = index.search("tags/impl/FixMe");
    pacTag = index.search("tags");
    pacImpl = index.search("tags/impl");
  }

