  @Test
  public void force_coverage_to_zero_when_no_report() {
    Map<String, String> props = ImmutableMap.of(JacocoConfiguration.REPORT_MISSING_FORCE_ZERO, "true", JacocoConfiguration.REPORT_PATH_PROPERTY, "foo");
    DefaultFileSystem fileSystem = new DefaultFileSystem((File)null);
    fileSystem.add(new DefaultInputFile("","foo").setLanguage("java"));
    JacocoConfiguration configuration = new JacocoConfiguration(new Settings().addProperties(props), fileSystem);
    JaCoCoSensor sensor_force_coverage = new JaCoCoSensor(configuration, perspectives, fileSystem, pathResolver, javaResourceLocator, javaClasspath);
    outputDir = TestUtils.getResource("/org/sonar/plugins/jacoco/JaCoCoSensorTest/");
    org.sonar.api.resources.File resource = mock(org.sonar.api.resources.File.class);
    when(context.getResource(any(Resource.class))).thenReturn(resource);
    when(javaClasspath.getBinaryDirs()).thenReturn(ImmutableList.of(outputDir));
    when(pathResolver.relativeFile(any(File.class), any(String.class))).thenReturn(new File("foo"));
    assertThat(sensor_force_coverage.shouldExecuteOnProject(project)).isTrue();
    sensor_force_coverage.analyse(project, context);

    verify(context, times(1)).saveMeasure(any(Resource.class), eqMetric(CoreMetrics.LINES_TO_COVER_KEY, 7));
    verify(context, times(1)).saveMeasure(any(Resource.class), eqMetric(CoreMetrics.UNCOVERED_LINES_KEY, 7));
    verify(context, times(1)).saveMeasure(any(Resource.class), eqMetric(CoreMetrics.CONDITIONS_TO_COVER_KEY, 2));
    verify(context, times(1)).saveMeasure(any(Resource.class), eqMetric(CoreMetrics.UNCOVERED_CONDITIONS_KEY, 2));
  }

