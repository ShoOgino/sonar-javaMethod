  private void myMethod() {
    List<String> myList = new ArrayList<String>();
    Set<A> myASet = new HashSet<A>();
    ArrayList<B> myBList = new ArrayList<B>();
    List<Set<Integer>> mySetList = new ArrayList<Set<Integer>>();
    List<Number> myNumberList = new ArrayList<Number>();
    List notTypedList = new ArrayList();

    Integer myInteger = Integer.valueOf(1);
    String myString = "";
    String[] myArrayString = new String[] {"myString"};
    Integer[] myArrayInteger = new Integer[] {Integer.valueOf(1)};

    myList.contains(myInteger); // Noncompliant [[sc=12;ec=20]] {{A "List<String>" cannot contain a "Integer".}}
    myList.remove(myInteger); // Noncompliant {{A "List<String>" cannot contain a "Integer".}}
    myList.removeAll(myNumberList); // Noncompliant {{A "List<String>" cannot contain a "Number".}}
    myList.removeAll(Arrays.asList("a", "b"));
    mySetList.removeAll(mySetList);
    mySetList.removeAll(mySetList.get(0)); // Noncompliant {{A "List<Set>" cannot contain a "Integer".}}
    mySetList.removeAll(null);
    mySetList.removeAll(notTypedList);
    myList.contains(myString); // Compliant
    myBList.contains(myInteger); // Noncompliant {{A "ArrayList<B>" cannot contain a "Integer".}}
    mySetList.contains(myString); // Noncompliant {{A "List<Set>" cannot contain a "String".}}
    mySetList.contains(returnOne()); // Noncompliant {{A "List<Set>" cannot contain a "Integer".}}
    mySetList.remove(B.returnOne()); // Noncompliant {{A "List<Set>" cannot contain a "Integer".}}
    myBList.contains(new B()); // Compliant
    myBList.remove(new A()); // Compliant
    myList.contains(myArrayInteger); // Noncompliant {{A "List<String>" cannot contain a "Integer[]".}}
    myList.remove(myArrayInteger[0]); // Noncompliant {{A "List<String>" cannot contain a "Integer".}}
    myList.remove(myArrayString[0]); // Compliant
    myASet.contains(new C()); // Compliant
    myASet.remove(new B()); // Compliant
    myNumberList.contains(myInteger); // Compliant

    Map<A, String> mapAString = new HashMap<>();
    mapAString.containsKey(null);
    mapAString.containsKey("key"); // Noncompliant {{A "Map<A, String>" cannot contain a "String" in a "A" type.}}
    mapAString.containsValue("val");
    mapAString.get("key"); // Noncompliant {{A "Map<A, String>" cannot contain a "String" in a "A" type.}}
    mapAString.getOrDefault("key", "val"); // Noncompliant {{A "Map<A, String>" cannot contain a "String" in a "A" type.}}
    mapAString.remove("key"); // Noncompliant {{A "Map<A, String>" cannot contain a "String" in a "A" type.}}
    mapAString.remove(new A(), "val");
    mapAString.remove(new A(), new A()); // Noncompliant {{A "Map<A, String>" cannot contain a "A" in a "String" type.}}
    mapAString.remove("key", new A()); // Noncompliant
                                       // Noncompliant@-1
    mapAString.remove("key", "val"); // Noncompliant {{A "Map<A, String>" cannot contain a "String" in a "A" type.}}

    Map<String, A> mapStringA = new HashMap<>();
    mapStringA.containsKey("key");
    mapStringA.containsValue("val"); // Noncompliant {{A "Map<String, A>" cannot contain a "String" in a "A" type.}}
    mapStringA.get("key");
    mapStringA.getOrDefault("key", new A());
    mapStringA.remove("key");
    mapStringA.remove(new A(), "val"); // Noncompliant
                                       // Noncompliant@-1
    mapStringA.remove(new A(), new A()); // Noncompliant {{A "Map<String, A>" cannot contain a "A" in a "String" type.}}
    mapStringA.remove("key", new A());
    mapStringA.remove("key", "val"); // Noncompliant {{A "Map<String, A>" cannot contain a "String" in a "A" type.}}
  }

