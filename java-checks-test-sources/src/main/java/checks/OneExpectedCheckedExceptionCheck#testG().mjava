  @Test
  public void testG() {
    // Do you expect g() or f() throwing the exception?
    assertThrows(IOException.class, () -> throwIOException2(throwIOException(1)) ); // Noncompliant
    assertThrows(IOException.class, () -> throwIOException2(throwIOException(1)), "Message"); // Noncompliant
    assertThrows(IOException.class, () -> throwIOException2(throwIOException(1)), () -> "message"); // Noncompliant
    assertThrows(IOException.class, () -> { // Noncompliant [[sc=5;ec=17;secondary=25,26] {{Refactor the code of the lambda to have only one invocation throwing an exception.}}
        if (throwIOException2(1) ==
          throwIOException(1)) {}
      } );
    assertThrows(IOException.class, () -> // Noncompliant [[sc=5;ec=17;secondary=30,31]]
      new ThrowingIOException(
        throwIOException(1)
      ) );
    org.junit.Assert.assertThrows(IOException.class, () -> throwIOException2(throwIOException(1)) ); // Noncompliant
    org.junit.Assert.assertThrows("Message", IOException.class, () -> throwIOException2(throwIOException(1)) ); // Noncompliant
    assertThrows(Exception.class, () -> throwException(throwIOException(1)) ); // Noncompliant
    assertThrows(Exception.class, () -> throwIOAndOtherException(throwIOException(1)) ); // Noncompliant

    assertThrows(Exception.class, () -> throwIOAndOtherException(1) ); // Compliant, only one method can throw
    assertThrows(IOException.class, () -> throwIOException(1)); // Compliant, only one method can throw IOException
    assertThrows(IOException.class, () -> new ThrowingNothing(throwIOException(1))); // Compliant
    assertThrows(IOException.class, () -> throwNothing(throwIOException2(1))); // Compliant, only one method can throw IOException
    assertThrows(IOException.class, () -> throwIOException(throwException(1))); // Compliant, only one method can throw IOException
    assertThrows(IllegalStateException.class, () -> {throwRuntimeException();throwRuntimeException();}); // Compliant, not a checked exception

    assertThrows(myException, () -> throwIOException2(throwIOException(1))); // Compliant, FN
    assertThrows(this.myException, () -> throwIOException2(throwIOException(1))); // Compliant, FN
    assertThrows(IOException.class, exec); // Compliant, FN
    assertThrows(IOException.class, exec); // Compliant, FN
    assertEquals(IOException.class, (Executable)(() -> throwIOException2(throwIOException(1))) ); // Compliant
  }

