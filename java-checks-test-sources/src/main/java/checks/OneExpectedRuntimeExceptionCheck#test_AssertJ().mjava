  @Test
  public void test_AssertJ() {

    Throwable thrown = org.assertj.core.api.Assertions
      .catchThrowableOfType(  // Noncompliant [[sc=8;ec=28;secondary=156,157]] {{Refactor the code of the lambda to have only one invocation throwing an exception.}}
        () -> foo(
          foo(1)),
        IllegalStateException.class);
    org.assertj.core.api.Assertions.assertThat(thrown).hasMessage("error");

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> foo(foo(1))) // Compliant, checked exception
      .isInstanceOf(IOException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> foo(foo(1))) // Noncompliant
      .as("description")
      .isInstanceOf(IllegalStateException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> foo(foo(1))) // Noncompliant
      .isExactlyInstanceOf(IllegalStateException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> foo(foo(1))) // Noncompliant
      .isOfAnyClassIn(IOException.class, IllegalStateException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> foo(foo(1))) // Noncompliant
      .isInstanceOfAny(IllegalStateException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> foo(foo(1))) // Compliant, expected exception type list is empty
      .isInstanceOfAny();

    org.assertj.core.api.Assertions
      .assertThatExceptionOfType(IllegalStateException.class)
      .isThrownBy(() -> foo(foo(1))); // Noncompliant

    org.assertj.core.api.Assertions
      .assertThatCode(() -> foo(foo(1))) // Noncompliant
      .isInstanceOf(IllegalStateException.class);

    thrown = org.assertj.core.api.Assertions
      .catchThrowable(() -> foo(foo(1))); // false-negative, it's complex to find the expected exception type
    org.assertj.core.api.Assertions.assertThat(thrown).isInstanceOf(IllegalStateException.class);
  }

