  @Email(regexp = ".*?") // Noncompliant {{Remove the '?' from this unnecessarily reluctant quantifier.}}
  void noncompliant(String str) {
    Pattern.compile(".*?x?").matcher(str).find(); // Noncompliant [[sc=22;ec=25]] {{Fix this reluctant quantifier that will only ever match the empty string.}}
    Pattern.compile(".*?$").matcher(str).find(); // Noncompliant {{Remove the '?' from this unnecessarily reluctant quantifier.}}
    Pattern.compile(".*?x?^").matcher(str).find(); // Noncompliant {{Fix this reluctant quantifier that will only ever match the empty string.}}
    str.split(".*?x?^"); // Noncompliant {{Fix this reluctant quantifier that will only ever match the empty string.}}
    str.matches(".*?"); // Noncompliant {{Remove the '?' from this unnecessarily reluctant quantifier.}}
    str.matches(".*?()"); // Noncompliant {{Remove the '?' from this unnecessarily reluctant quantifier.}}
    str.matches(".*?()*"); // Noncompliant {{Remove the '?' from this unnecessarily reluctant quantifier.}}
    str.matches(".*?((?=))*"); // Noncompliant {{Remove the '?' from this unnecessarily reluctant quantifier.}}
    str.matches(".*?(?!x)"); // Noncompliant {{Remove the '?' from this unnecessarily reluctant quantifier.}}

    Matcher m = Pattern.compile(".*?").matcher(str); // Noncompliant {{Fix this reluctant quantifier that will only ever match the empty string.}}
    m.find();

    RegExUtils.removeAll(str, ".*?"); // Noncompliant {{Fix this reluctant quantifier that will only ever match the empty string.}}
    Pattern p = Pattern.compile(".*?"); // Noncompliant {{Fix this reluctant quantifier that will only ever match the empty string.}}
    RegExUtils.removeAll(str, p);
  }

