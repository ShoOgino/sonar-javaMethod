  void compliant() {
    String str = "123";
    str.matches("a-z\\d");
    str.matches("[0-9][0-9]?");
    str.matches("[xX]");
    str.matches("[\\s\\S]");
    str.matches("[[^\\s\\S]x]");
    str.matches("(?U)[\\s\\S]");
    str.matches("(?U)[\\S\\u0085\\u2028\\u2029]");
    str.matches("[\\d\\D]");
    str.matches("(?U)[\\d\\D]");
    str.matches("[\\w\\W]");
    str.matches("(?U)[\\w\\W]");
    str.matches("[\\wä]");
    str.matches("(?i)[äÄ]");
    str.matches("(?i)[Ä-Üä]");
    str.matches("(?u)[äÄ]");
    str.matches("(?u)[xX]");
    str.matches("[ab-z]");
    str.matches("[[a][b]]");
    str.matches("[[^a]a]");
    str.matches("(?i)[a-Öö]");
    str.matches("[0-9\\Q.-_\\E]"); // This used to falsely interpret .-_ as a range and complain that it overlaps with 0-9
    str.matches("[A-Z\\Q-_.\\E]");
    str.matches("[\\x00\\x01]]"); // This used to falsely complain about x and 0 being duplicates
    str.matches("[\\x00-\\x01\\x02-\\x03]]");
    str.matches("[z-a9-0]"); // Illegal character class should not make the check explode
    str.matches("[aa"); // Check should not run on syntactically invalid regexen
    str.matches("(?U)[\\wä]"); // False negative because we don't support Unicode characters in \\w and \\W
    str.matches("(?U)[[^\\W]a]"); // False negative because once we negate a character class whose contents we don't
                                  // fully understand, we ignore it to avoid false positives
    str.matches("[\\N{slightly smiling face}\\N{slightly smiling face}]"); // FN because we don't support \\N
    str.matches("[[a-z&&b-e]c]"); // FN because we don't support intersections
    str.matches("(?i)[A-_d-{]"); // FN because we ignore case insensitivity unless both ends of the ranges are letters
    str.matches("(?i)[A-z_]"); // FN because A-z gets misinterpreted as A-Za-z due to the way we handle case insensitivity
    str.matches("[\\p{IsLatin}x]"); // FN because we don't support \p at the moment
  }

