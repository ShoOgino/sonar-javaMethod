  Object compliant(String input, String groupName, int groupNumber) {
    Pattern invalid = Pattern.compile("[");

    visibleFromOutsidePattern = Pattern.compile("(?<group>[a-z])");
    patterns[0] = Pattern.compile("(?<group>[a-z])");

    Pattern p1 = Pattern.compile("(?<month>[0-9]{2})/(?<year>[0-9]{2})");
    Matcher m1 = p1.matcher(input);
    if (m1.matches()) {
      m1.group("month");
      m1.group("year");
    }

    Pattern p2 = Pattern.compile("(?<player1>[0-9]+):(?<player2>[0-9]+)");
    Matcher m2 = p2.matcher(input);
    if (m2.matches()) {
      m2.group("player1");
      m2.group("player2");
    }

    Pattern p3 = Pattern.compile("(?<group>[a-z])");
    Matcher m3 = p3.matcher(input);
    if (m3.matches()) {
      m3.group(groupNumber);
    }

    Pattern p4 = Pattern.compile("(?<g1>[a-z]):(?<g2>[a-z]):(?<g3>[a-z])");
    Matcher m4 = p4.matcher(input);
    if (m4.matches()) {
      m4.group(groupName);
    }

    Pattern p5 = Pattern.compile("(?<g1>[a-z]):\\k<g1>");
    Matcher m5 = p5.matcher(input);
    if (m5.matches()) {
      System.out.println("OK");
    }

    if (Math.random() > 0.5) {
      Pattern p6 = Pattern.compile("(?<group>[a-z])");
      Matcher m6 = p6.matcher(input);
      return m6;
    }

    if (Math.random() > 0.5) {
      Pattern p7 = Pattern.compile("(?<group>[a-z])");
      return p7;
    }

    Pattern p8 = Pattern.compile("(?<g1>[a-z])([0-9]{2})");
    Matcher m8 = p8.matcher(input);
    if (m8.matches()) {
      m8.group("g1");
      m8.group(2);
    }

    Pattern p9 = Pattern.compile("[0-9]{2}");
    Matcher m9 = p9.matcher(input);
    if (m9.matches()) {
      m9.group(0);
    }

    Pattern p10 = Pattern.compile("(?<g1>[0-9]{2})");
    if (Math.random() > 0.5) {
      p10 = Pattern.compile("(?<g2>[0-9]{2})");
    }
    Matcher m10 = p10.matcher(input);
    if (m10.matches()) {
      m10.group(1);
    }

    if (Math.random() > 0.5) {
      return this;
    }
    if (Math.random() > 0.5) {
      String str = "";
      return str;
    }

     Pattern p11 = Pattern.compile("\\\\u+[a-fA-F0-9]{4}");
     Matcher m11 = p11.matcher(input);
     m11.group(0);

    if (input.matches("(?<name>test)\\k<name>")) {
      System.out.println(input);
    }

    // When a pattern or matcher is passed to another method, we consider its group as used
    Pattern p12 = Pattern.compile("(?<name>test)");
    Matcher m12 = p12.matcher(input);
    someMethod(m12);

    Pattern p13 = Pattern.compile("(?<name>test)");
    someMethod(p13);

    someOtherMethod().group(1); // This should be ignored since we don't know which regex we're calling group for

    return null;
  }

