  void testInstanceOf(Object param) {
    barbar((o) -> o instanceof String); // Noncompliant {{Replace this lambda with method reference 'String.class::isInstance'.}}
    barbar(String.class::isInstance); // Compliant
  
    barbar4((o) -> o instanceof TestA); // Noncompliant {{Replace this lambda with method reference 'TestA.class::isInstance'.}}
    barbar4(TestA.class::isInstance); //Compliant
  
    barbar3(List.class::isInstance); //Compliant
    barbar3((o) -> o instanceof List); // Noncompliant {{Replace this lambda with method reference 'List.class::isInstance'.}}

    barbar5(TestA[].class::isInstance); //Compliant
    barbar5((o) -> o instanceof TestA[]); // Noncompliant {{Replace this lambda with method reference 'TestA[].class::isInstance'.}}

    barbar6(TestA[][].class::isInstance); //Compliant
    barbar6((o) -> o instanceof TestA[][]); // Noncompliant {{Replace this lambda with method reference 'TestA[][].class::isInstance'.}}

    barbar7(List.class::isInstance); //Compliant
    barbar7((o) -> o instanceof List ); // Noncompliant {{Replace this lambda with method reference 'List.class::isInstance'.}}

    barbar8(List[].class::isInstance); //Compliant
    barbar8((o) -> o instanceof List[] ); // Noncompliant {{Replace this lambda with method reference 'List[].class::isInstance'.}}

    barbar9(char.class::isInstance); //Compliant
    barbar9(Character.class::isInstance); //Compliant
    barbar9((o) -> o instanceof Character); // Noncompliant {{Replace this lambda with method reference 'Character.class::isInstance'.}}
  }

