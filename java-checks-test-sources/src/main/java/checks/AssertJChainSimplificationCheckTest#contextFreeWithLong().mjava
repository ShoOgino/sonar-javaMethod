  void contextFreeWithLong() {
    assertThat(getLong()).isEqualTo(0); // Noncompliant {{Use isZero() instead.}}
    assertThat(getLong()).isEqualTo(0L); // Noncompliant {{Use isZero() instead.}}
    assertThat(getLong()).isEqualTo(0l); // Noncompliant {{Use isZero() instead.}}
    assertThat(getLong()).isEqualTo(42l); // Compliant
    assertThat(getLong()).isEqualTo(42L); // Compliant

    assertThat(getLong()).isGreaterThan(0L); // Noncompliant {{Use isPositive() instead.}}
    assertThat(getLong()).isGreaterThan(-1L); // Noncompliant {{Use isNotNegative() instead.}}
    assertThat(getLong()).isGreaterThanOrEqualTo(0L); // Noncompliant {{Use isNotNegative() instead.}}
    assertThat(getLong()).isGreaterThanOrEqualTo(1L); // Noncompliant {{Use isPositive() instead.}}
    assertThat(getLong()).isGreaterThanOrEqualTo(1l); // Noncompliant {{Use isPositive() instead.}}
    assertThat(getLong()).isGreaterThanOrEqualTo(42L); // Compliant
    assertThat(getLong()).isLessThan(0L); // Noncompliant {{Use isNegative() instead.}}
    assertThat(getLong()).isLessThan(1L); // Noncompliant {{Use isNotPositive() instead.}}
    assertThat(getLong()).isLessThanOrEqualTo(0L);// Noncompliant {{Use isNotPositive() instead.}}
    assertThat(getLong()).isLessThanOrEqualTo(-1L);// Noncompliant {{Use isNegative() instead.}}
    assertThat(getLong()).isLessThanOrEqualTo(-42L);// Compliant
    assertThat(getLong()).isNotEqualTo(0L); // Noncompliant {{Use isNotZero() instead.}}
  }

