  void mapRelatedAssertionChains() {
    String value = "";
    String key = "";
    Map<Object, Object> otherMap = getMap();

    assertThat(getMap()).hasSize(0); // Noncompliant {{Use isEmpty() instead.}}
    assertThat(getMap().isEmpty()).isTrue(); // Noncompliant {{Use assertThat(actual).isEmpty() instead.}}
    assertThat(getMap().isEmpty()).isFalse(); // Noncompliant {{Use assertThat(actual).isNotEmpty() instead.}}
    assertThat(getMap().size()).isZero(); // Noncompliant {{Use assertThat(actual).isEmpty() instead.}}
    assertThat(getMap().size()).isEqualTo(42); // Noncompliant {{Use assertThat(actual).hasSize(expected) instead.}}
    assertThat(getMap().size()).isEqualTo(otherMap.size()); // Noncompliant {{Use assertThat(actual).hasSameSizeAs(expected) instead.}}
    assertThat(getMap().size()).isEqualTo(getCollection().size()); // Noncompliant {{Use assertThat(actual).hasSameSizeAs(expected) instead.}}

    assertThat(getMap().size()).isLessThanOrEqualTo(42); // Noncompliant {{Use assertThat(actual).hasSizeLessThanOrEqualTo(expected) instead.}}
    assertThat(getMap().size()).isLessThan(42); // Noncompliant {{Use assertThat(actual).hasSizeLessThan(expected) instead.}}
    assertThat(getMap().size()).isGreaterThan(42); // Noncompliant {{Use assertThat(actual).hasSizeGreaterThan(expected) instead.}}
    assertThat(getMap().size()).isGreaterThanOrEqualTo(42); // Noncompliant {{Use assertThat(actual).hasSizeGreaterThanOrEqualTo(expected) instead.}}
    assertThat(getMap().size()).isLessThan(0); // Noncompliant {{Use isNegative() instead.}}

    assertThat(getMap().containsKey(key)).isTrue(); // Noncompliant {{Use assertThat(actual).containsKey(expected) instead.}}
    assertThat(getMap().containsValue(value)).isTrue(); // Noncompliant {{Use assertThat(actual).containsValue(expected) instead.}}
    assertThat(getMap().get(key)).isEqualTo(value); // Noncompliant {{Use assertThat(actual).containsEntry(key, value) instead.}}
    assertThat(getMap().get(key)).isNotEqualTo(value); // Noncompliant {{Use assertThat(actual).doesNotContainEntry(key, value) instead.}}
  }

