  void myMethod(byte[] bytes, java.io.File file, OutputStream outputStream, java.io.FileDescriptor fileDescriptor) throws IOException {
    new String(bytes); // Noncompliant {{Remove this use of constructor "String(byte[])".}}
    new String(bytes, 0, 1); // Noncompliant {{Remove this use of constructor "String(byte[],int,int)".}}
    "".getBytes(); // Noncompliant {{Remove this use of "getBytes".}}
    "".getBytes(0, 0, bytes, 0); // Noncompliant {{Remove this use of "getBytes".}}
    new java.io.ByteArrayOutputStream().toString(); // Noncompliant
    new FileReader("fileName"); // Noncompliant
    new FileReader(file); // Noncompliant [[sc=9;ec=19]]
    new FileReader(new java.io.FileDescriptor()); // Noncompliant
    new FileWriter(file); // Noncompliant
    new FileWriter(file, true); // Noncompliant
    new FileWriter(new java.io.FileDescriptor()); // Noncompliant
    new FileWriter("fileName"); // Noncompliant
    new FileWriter("fileName", true); // Noncompliant
    new FileWriter("fileName", StandardCharsets.UTF_8, true); // java 11 - not resolved if not build with java 11, valid
    new InputStreamReader(new java.io.FileInputStream("")); // Noncompliant
    new OutputStreamWriter(outputStream); // Noncompliant
    new PrintStream(file); // Noncompliant
    new PrintStream(outputStream); // Noncompliant
    new PrintStream(outputStream, true); // Noncompliant
    new PrintStream("fileName"); // Noncompliant
    new PrintWriter(file); // Noncompliant
    new PrintWriter(outputStream); // Noncompliant
    new PrintWriter(outputStream, true); // Noncompliant
    new PrintWriter("fileName"); // Noncompliant
    new Formatter(""); // Noncompliant
    new Formatter(file); // Noncompliant
    new Formatter(outputStream); // Noncompliant
    new Scanner(file); // Noncompliant
    new java.util.Scanner(new java.io.FileInputStream("")); // Noncompliant
    FileReader reader1 = null; // Compliant
    FileReader reader2 = new FileReader(file); // Noncompliant [[sc=30;ec=40]] {{Remove this use of constructor "FileReader(File)".}}
    FileReader reader3 = new FileReader(file, StandardCharsets.UTF_8); // Compliant
    FileReader reader4 = new FileReader(fileDescriptor); // Noncompliant {{Remove this use of constructor "FileReader(FileDescriptor)".}}
    FileReader reader5 = new FileReader("filename"); // Noncompliant {{Remove this use of constructor "FileReader(String)".}}
    FileReader reader6 = new FileReader("filename", StandardCharsets.UTF_8); // Compliant
    java.io.Reader reader7 = fileReader(); // Compliant
    FileWriter writer1 = null; // Compliant
    java.io.Writer writer2 = fileWriter(); // Compliant
    FileWriter writer3 = new FileWriter(file); // Noncompliant [[sc=30;ec=40]] {{Remove this use of constructor "FileWriter(File)".}}
    FileWriter writer4 = new FileWriter(fileDescriptor); // Noncompliant {{Remove this use of constructor "FileWriter(FileDescriptor)".}}
    FileWriter writer5 = new FileWriter(file, true); // Noncompliant {{Remove this use of constructor "FileWriter(File,boolean)".}}
    FileWriter writer6 = new FileWriter(file, StandardCharsets.UTF_8); // Compliant
    FileWriter writer7 = new FileWriter(file, StandardCharsets.UTF_8, true); // Compliant
    FileWriter writer8 = new FileWriter("filename"); // Noncompliant {{Remove this use of constructor "FileWriter(String)".}}
    FileWriter writer9 = new FileWriter("filename", true); // Noncompliant {{Remove this use of constructor "FileWriter(String,boolean)".}}
    FileWriter writer10 = new FileWriter("filename", StandardCharsets.UTF_8); // Compliant
    FileWriter writer11 = new FileWriter("filename", StandardCharsets.UTF_8, true); // Compliant

    // Compliant
    new String("");
    "".length();
    new java.io.ByteArrayOutputStream().toString("UTF-8");
    UnknownClass unknown;
  }

