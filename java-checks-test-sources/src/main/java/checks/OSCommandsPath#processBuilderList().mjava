  private void processBuilderList() {
    new ProcessBuilder((Arrays.asList("make")));  // Noncompliant [[sc=25;ec=46]] {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList(("make")));  // Noncompliant [[sc=24;ec=47]] {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList("make"));  // Noncompliant [[sc=24;ec=45]] {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList("m../ake"));   // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList("mak./e"));   // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList("bin~/make"));   // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList("7:\\\\make"));  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList("m..\\ake"));  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList("ma.\\ke"));  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList("SERVER\\make"));  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Arrays.asList());
    new ProcessBuilder(Arrays.asList("/usr/bin/make"));
    new ProcessBuilder(Arrays.asList("/usr/bin/make -j8"));
    new ProcessBuilder(Arrays.asList("/usr/bin/make", "-j8"));
    new ProcessBuilder(Arrays.asList("../make"));
    new ProcessBuilder(Arrays.asList("./make"));
    new ProcessBuilder(Arrays.asList("~/bin/make"));
    new ProcessBuilder(Arrays.asList("Z:\\make"));
    new ProcessBuilder(Arrays.asList("..\\make"));
    new ProcessBuilder(Arrays.asList(".\\make"));
    new ProcessBuilder(Arrays.asList("\\\\SERVER\\make"));

    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST);  // Noncompliant [[sc=24;ec=50]] {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST_UNIX_PARENT);  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST_UNIX_CURRENT);  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST_UNIX_HOME);  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST_WINDOWS_ABSOLUTE);  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST_WINDOWS_PARENT);  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST_WINDOWS_CURRENT);  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST_WINDOWS_NETWORK);  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(NON_COMPLIANT_COMMAND_LIST_VARIABLE);  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(COMPLIANT_COMMAND_LIST_UNIX);
    new ProcessBuilder(COMPLIANT_COMMAND_LIST_UNIX_PARENT);
    new ProcessBuilder(COMPLIANT_COMMAND_LIST_UNIX_CURRENT);
    new ProcessBuilder(COMPLIANT_COMMAND_LIST_UNIX_HOME);
    new ProcessBuilder(COMPLIANT_COMMAND_LIST_WINDOWS_ABSOLUTE);
    new ProcessBuilder(COMPLIANT_COMMAND_LIST_WINDOWS_PARENT);
    new ProcessBuilder(COMPLIANT_COMMAND_LIST_WINDOWS_CURRENT);
    new ProcessBuilder(COMPLIANT_COMMAND_LIST_WINDOWS_NETWORK);

    new ProcessBuilder(Collections.singletonList("make"));  // Noncompliant [[sc=24;ec=57]] {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Collections.singletonList("m../ake"));   // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Collections.singletonList("mak./e"));   // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Collections.singletonList("bin~/make"));   // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Collections.singletonList("7:\\\\make"));  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Collections.singletonList("m..\\ake"));  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Collections.singletonList("ma.\\ke"));  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Collections.singletonList("SERVER\\make"));  // Noncompliant {{Make sure the "PATH" used to find this command includes only what you intend.}}
    new ProcessBuilder(Collections.singletonList("/usr/bin/make"));
    new ProcessBuilder(Collections.singletonList("/usr/bin/make -j8"));
    new ProcessBuilder(Collections.singletonList("../make"));
    new ProcessBuilder(Collections.singletonList("./make"));
    new ProcessBuilder(Collections.singletonList("~/bin/make"));
    new ProcessBuilder(Collections.singletonList("Z:\\make"));
    new ProcessBuilder(Collections.singletonList("..\\make"));
    new ProcessBuilder(Collections.singletonList(".\\make"));
    new ProcessBuilder(Collections.singletonList("\\\\SERVER\\make"));
  }

