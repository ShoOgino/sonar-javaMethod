  @Test
  public void assertj_java6assertions() {
    org.assertj.core.api.Java6Assertions.assertThat(1).isGreaterThan(0);
    org.assertj.core.api.Java6Assertions.assertThat(1); // Noncompliant
    org.assertj.core.api.Java6Assertions.assertThat(1).withThreadDumpOnError().isGreaterThan(0);
    org.assertj.core.api.Java6Assertions.assertThat(1).withThreadDumpOnError(); // Noncompliant
    org.assertj.core.api.Java6Assertions.assertThat(1).overridingErrorMessage("error").isGreaterThan(0);
    org.assertj.core.api.Java6Assertions.assertThat(1).overridingErrorMessage("error"); // Noncompliant
    org.assertj.core.api.Java6Assertions.assertThat(1).usingDefaultComparator().isGreaterThan(0);
    org.assertj.core.api.Java6Assertions.assertThat(1).usingDefaultComparator(); // Noncompliant
    Comparator customComparator = null;
    org.assertj.core.api.Java6Assertions.assertThat(1).usingComparator(customComparator).isGreaterThanOrEqualTo(0);
    org.assertj.core.api.Java6Assertions.assertThat(1).usingComparator(customComparator); // Noncompliant
    org.assertj.core.api.Java6Assertions.assertThat("a").asString().hasSize(1);
    org.assertj.core.api.Java6Assertions.assertThat("a").asString(); // Noncompliant
    List a = null;
    org.assertj.core.api.Java6Assertions.assertThat(a).asList().hasSize(0);
    org.assertj.core.api.Java6Assertions.assertThat(a).asList(); // Noncompliant
    org.assertj.core.api.SoftAssertions softly = new org.assertj.core.api.SoftAssertions();
    softly.assertThat((String) null); // Noncompliant
    softly.assertAll();
  }

