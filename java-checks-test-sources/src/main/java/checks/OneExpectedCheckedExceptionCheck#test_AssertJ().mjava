  @Test
  public void test_AssertJ() {

    Throwable thrown = org.assertj.core.api.Assertions
      .catchThrowableOfType(  // Noncompliant [[sc=8;ec=28;secondary=161,162]] {{Refactor the code of the lambda to have only one invocation throwing an exception.}}
      () -> throwIOException2(
        throwIOException(1)),
      IOException.class);
    org.assertj.core.api.Assertions.assertThat(thrown).hasMessage("error");

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> throwIOException2(throwIOException(1))) // Noncompliant
      .as("description")
      .isInstanceOf(IOException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> throwIOException2(throwIOException(1))) // Compliant, unchecked exception
      .isInstanceOf(IllegalStateException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> throwIOException2(throwIOException(1))) // Noncompliant
      .isExactlyInstanceOf(IOException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> throwIOException2(throwIOException(1))) // Noncompliant
      .isOfAnyClassIn(IndexOutOfBoundsException.class, IOException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> throwIOException2(throwIOException(1))) // Noncompliant
      .isInstanceOfAny(IOException.class);

    org.assertj.core.api.Assertions
      .assertThatThrownBy(() -> throwIOException2(throwIOException(1))) // Compliant, expected exception type list is empty
      .isInstanceOfAny();

    assertThatExceptionOfType(IOException.class)
      .isThrownBy(() -> throwIOException2(throwIOException(1))); // Noncompliant

    org.assertj.core.api.Assertions
      .assertThatCode(() -> throwIOException2(throwIOException(1))) // Noncompliant
      .isInstanceOf(IOException.class);

    thrown = org.assertj.core.api.Assertions
      .catchThrowable(() -> throwIOException2(throwIOException(1))); // false-negative, it's complex to find the expected exception type
    org.assertj.core.api.Assertions.assertThat(thrown).isInstanceOf(IOException.class);

    // coverage
    assertThatExceptionOfType(IOException.class);
    int coverage = (assertThatExceptionOfType(IOException.class)).toString().getBytes().length;
  }

