  @Test
  void test_assertj() {
    assertThat(bytePrimitive())
      .isNotNull(); // Noncompliant [[sc=8;ec=17]] {{Change the assertion arguments to not compare a primitive value with null.}}
    assertThat(shortPrimitive())
      .as("msg")
      .isNotNull() // Noncompliant
      .isNull();   // Noncompliant
    assertThatObject(intPrimitive()).isNull(); // Noncompliant
    assertThat(charPrimitive()).isNotNull();      // Noncompliant
    assertThat(getString()).isNotNull();          // Compliant
    assertThat(longPrimitive()).isNotNull();      // Noncompliant
    assertThat(floatPrimitive()).isNotNull();     // Noncompliant
    assertThat(doublePrimitive()).isNotNull();    // Noncompliant

    assertThat(doublePrimitive())
      .withFailMessage("msg", 42)
      .isNotEqualTo(null); // Noncompliant [[sc=21;ec=25;secondary=25]] {{Change the assertion arguments to not compare dissimilar types.}}

    assertThat(booleanPrimitive())
      .describedAs("msg")
      .isNotEqualTo("foo") // Noncompliant
      .isNotSameAs(null)  // Noncompliant
      .isSameAs("bar");   // Noncompliant

    assertThat(doublePrimitive())
      .overridingErrorMessage("msg", 42)
      .isNotEqualTo(null); // Noncompliant
    assertThat(booleanPrimitive()).isNotEqualTo(null); // Noncompliant

    assertThat(intArray()).isNotEqualTo(42);             // Noncompliant
    assertThat(intArray()).isNotEqualTo(new int[] {42}); // Compliant

    assertThat(intPrimitive()).isNotEqualTo(42);             // Compliant
    assertThat(intPrimitive()).isNotEqualTo(new int[] {42}); // Noncompliant

    Object o = new A();
    A a = new A();
    A a2 = new A();
    B b = new B();
    X x = new X();
    Y y = new Y();
    I1 i1 = new B();
    I2 i2 = new Y();

    assertThat(o).isNotEqualTo(new int[] {42}); // Compliant
    assertThat(a).isNotEqualTo(new int[] {42}); // Noncompliant
    assertThat(a).isNotEqualTo(new A[] {a});    // Noncompliant
    assertThat(new int[] {42}).isNotEqualTo(a); // Noncompliant
    assertThat(new A[] {a}).isNotEqualTo(a);    // Noncompliant

    assertThat(new A[] {}).isNotEqualTo(new A[] {}); // Compliant
    assertThat(new B[] {}).isNotEqualTo(new A[] {}); // Compliant
    assertThat(new X[] {}).isNotEqualTo(new A[] {}); // Noncompliant
    assertThat(new A[] {}).isNotEqualTo(new A[][] {}); // Noncompliant
    assertThat(new B[][] {}).isNotEqualTo(new A[][] {}); // Compliant
    assertThat(new X[][] {}).isNotEqualTo(new A[][] {}); // Noncompliant
    assertThat(new A[][][] {}).isNotEqualTo(new A[][] {}); // Noncompliant
    assertThat(new int[][] {}).isNotEqualTo(new int[][] {}); // Compliant
    assertThat(new boolean[][] {}).isNotEqualTo(new int[][] {}); // Noncompliant
    assertThat(new A[][] {}).isNotEqualTo(new int[][] {}); // Noncompliant
    assertThat(new int[][] {}).isNotEqualTo(new A[][] {}); // Noncompliant

    assertThat(new int[] {}).isNotEqualTo(new int[] {}); // Compliant
    assertThat(new int[] {}).isNotEqualTo(new A[] {}); // Noncompliant
    assertThat(new int[] {}).isNotEqualTo(new long[] {});// Noncompliant

    assertThat(a2).isNotEqualTo(a); // Compliant
    assertThat(new B() {}).isNotEqualTo(b); // Compliant
    assertThat(i1).isNotEqualTo(b); // Compliant
    assertThat(b).isNotEqualTo(i1);// Compliant
    assertThat(new I1() {}).isNotEqualTo(b); // Noncompliant
    assertThat(i2).isNotEqualTo(b); // Noncompliant
    assertThat(b).isNotEqualTo(a); // Compliant
    assertThat(a).isNotEqualTo(b); // Compliant
    assertThat(o).isNotEqualTo(b); // Compliant

    org.assertj.core.api.AssertionsForInterfaceTypes.
      assertThat(x).isNotEqualTo(a);  // Noncompliant
    org.assertj.core.api.AssertionsForClassTypes.
      assertThat(x).isEqualTo(a);  // Noncompliant

    // Here we are not sure, but it seems valuable to raise an issue that
    // could be a false-positive because the negative assertion is useless by
    // always passing if types are dissimilar
    assertThat(i1).isNotEqualTo(a); // Noncompliant

    // Here we are not sure, but it seems NOT valuable to raise an issue that
    // could be a false-positive because the positive assertion is helpful and
    // always fails if types are dissimilar
    assertThat(i1).isEqualTo(a); // Compliant
    // And in case of final classes, the inheritance is known and final,
    // we can raise issues without having false-positives
    assertThat(i1).isEqualTo(y); // Noncompliant

    assertThat(i2).isNotEqualTo(a);   // Noncompliant
    assertThat(i2).isEqualTo(a);      // Compliant
    assertThat(x).isEqualTo(a);       // Noncompliant

    assertThat(i1).isNotEqualTo(i1);   // Compliant
    assertThat(i1).isEqualTo(i1);      // Compliant

    assertThat(i2).isNotEqualTo(i1);   // Noncompliant
    assertThat(i2).isEqualTo(i1);      // Compliant

    assertThat(i1).isNotEqualTo(y);   // Noncompliant

    assertThat(a)
      .extracting("hashCode")
      .isNotEqualTo(42); // Compliant

    int[][] arrayOfArray = new int[0][];
    assertThat(arrayOfArray).contains(arrayOfArray);       // false-negative
    assertThat(arrayOfArray).doesNotContain(arrayOfArray); // false-negative
    assertThat(arrayOfArray).isIn(arrayOfArray);           // false-negative
  }

