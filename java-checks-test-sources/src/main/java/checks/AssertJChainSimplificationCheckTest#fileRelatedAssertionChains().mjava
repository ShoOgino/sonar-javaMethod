  void fileRelatedAssertionChains() {
    int size = 1;
    String name = "name";

    assertThat(getFile()).hasSize(0); // Noncompliant {{Use isEmpty() instead.}}
    assertThat(getFile().length()).isZero(); // Noncompliant {{Use assertThat(actual).isEmpty() instead.}}
    assertThat(getFile().length()).isEqualTo(0); // Noncompliant {{Use isZero() instead.}}
    assertThat(getFile().length()).isNotZero(); // Noncompliant {{Use assertThat(actual).isNotEmpty() instead.}}
    assertThat(getFile().length()).isNotEqualTo(0);	// Noncompliant {{Use isNotZero() instead.}}
    assertThat(getFile().length()).isEqualTo(size); // Noncompliant {{Use assertThat(actual).hasSize(expected) instead.}}

    assertThat(getFile().canRead()).isTrue(); // Noncompliant {{Use assertThat(actual).canRead() instead.}}
    assertThat(getFile().canWrite()).isTrue(); // Noncompliant {{Use assertThat(actual).canWrite() instead.}}
    assertThat(getFile().exists()).isTrue();// Noncompliant	{{Use assertThat(actual).exists() instead.}}
    assertThat(getFile().exists()).isFalse();	// Noncompliant {{Use assertThat(actual).doesNotExist() instead.}}
    assertThat(getFile().getName()).isEqualTo(name); // Noncompliant {{Use assertThat(actual).hasName(expected) instead.}}
    assertThat(getFile().getParent()).isEqualTo(name); // Noncompliant {{Use assertThat(actual).hasParent(expected) instead.}}
    assertThat(getFile().getParentFile()).isEqualTo(getFile()); // Noncompliant {{Use assertThat(actual).hasParent(expected) instead.}}
    assertThat(getFile().getParent()).isNull();	// Noncompliant {{Use assertThat(actual).hasNoParent() instead.}}
    assertThat(getFile().getParentFile()).isNull(); // Noncompliant	{{Use assertThat(actual).hasNoParent() instead.}}
    assertThat(getFile().isAbsolute()).isTrue(); // Noncompliant	{{Use assertThat(actual).isAbsolute() instead.}}
    assertThat(getFile().isAbsolute()).isFalse(); // Noncompliant	{{Use assertThat(actual).isRelative() instead.}}
    assertThat(getFile().isDirectory()).isTrue(); // Noncompliant	{{Use assertThat(actual).isDirectory() instead.}}
    assertThat(getFile().isFile()).isTrue(); // Noncompliant	{{Use assertThat(actual).isFile() instead.}}

    assertThat(getFile().list()).isEmpty(); // Noncompliant	{{Use assertThat(actual).isEmptyDirectory() instead.}}
    assertThat(getFile().listFiles()).isEmpty(); // Noncompliant	{{Use assertThat(actual).isEmptyDirectory() instead.}}
    assertThat(getFile().list()).isNotEmpty(); // Noncompliant	{{Use assertThat(actual).isNotEmptyDirectory() instead.}}
    assertThat(getFile().listFiles()).isNotEmpty(); // Noncompliant	{{Use assertThat(actual).isNotEmptyDirectory() instead.}}

    // We report only step by step, not the final transformation possible
    assertThat(getFile().list().length).isEqualTo(0); // Noncompliant {{Use isZero() instead.}}
    assertThat(getFile().list().length).isZero(); // Noncompliant {{Use assertThat(actual).isEmpty() instead.}}
    assertThat(getFile().list()).isEmpty(); // Noncompliant	{{Use assertThat(actual).isEmptyDirectory() instead.}}
    assertThat(getFile()).isEmptyDirectory(); // Compliant, 3 iterations to reach a nice assertion
  }

