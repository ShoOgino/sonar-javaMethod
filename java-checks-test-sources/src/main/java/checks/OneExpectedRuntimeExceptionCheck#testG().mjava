  @Test
  public void testG() {
    // Do you expect g() or f() throwing the exception?
    assertThrows(IllegalStateException.class, () -> foo(foo(1)) ); // Noncompliant
    assertThrows(IllegalStateException.class, () -> foo(foo(1)), "Message"); // Noncompliant
    assertThrows(IllegalStateException.class, () -> foo(foo(1)), () -> "message"); // Noncompliant
    assertThrows(IllegalStateException.class, () -> { // Noncompliant [[sc=5;ec=17;secondary=23,24] {{Refactor the code of the lambda to have only one invocation throwing an exception.}}
      if (foo(1) ==
        foo(1)) {}
    } );
    assertThrows(IllegalStateException.class, () -> // Noncompliant [[sc=5;ec=17;secondary=27,28]]
      new NestedClass(
        foo(1)
      ) );
    org.junit.Assert.assertThrows(IllegalStateException.class, () -> foo(foo(1)) ); // Noncompliant
    org.junit.Assert.assertThrows("Message", IllegalStateException.class, () -> foo(foo(1)) ); // Noncompliant
    assertThrows(RuntimeException.class, () -> foo(foo(1)) ); // Noncompliant
    assertThrows(RuntimeException.class, () -> throwCheckedException(throwRuntimeException(1)) ); // Noncompliant

    assertThrows(RuntimeException.class, () -> foo(1) ); // Compliant, only one method can throw

    assertThrows(IOException.class, () -> {throwCheckedException(1);throwCheckedException(1);}); // Compliant, not an unchecked exception

    assertThrows(myException, () -> foo(foo(1))); // Compliant, FN
    assertThrows(this.myException, () -> foo(foo(1))); // Compliant, FN
    assertThrows(IllegalStateException.class, exec); // Compliant, FN
    assertThrows(IllegalStateException.class, exec); // Compliant, FN
  }

