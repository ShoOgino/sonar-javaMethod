  void assertJ() {
    // Simple cases, we can find the expected value
    assertThat(0).isEqualTo(new AssertionArgumentOrderCheck().actual()); // Noncompliant [[sc=16;ec=17;secondary=52]] {{Swap these 2 arguments so they are in the correct order: actual value, expected value.}}
    assertThat(new AssertionArgumentOrderCheck().actual()).isEqualTo(0);
    assertThat("a").isEqualTo("b"); // Noncompliant {{Change this assertion to not compare two literals.}}
    assertThat(actualObject()).isEqualTo("constantString");
    assertThat("constantString").isEqualTo(actualObject()); // Noncompliant
    assertThat(0).isLessThanOrEqualTo(actualObject()); // Noncompliant
    assertThat(CONSTANT).isEqualTo(actualObject()); // Noncompliant
    assertThat(CONSTANT).isEqualTo(123); // Compliant, CONSTANT can store something you want to test, not the best pattern, but still acceptable in this context.
    assertThat(MyBean.MY_CST).isEqualTo(actualObject()); // Noncompliant
    assertThat(MyBean.MY_CST).isEqualTo(123); // Compliant, testing a constant
    assertThat(MyBean.MY_CST).isEqualTo(ConstantUtils.MY_CONSTANT); // Compliant, testing two constant
    assertThat(123).isEqualTo(ConstantUtils.MY_CONSTANT); // Noncompliant

    // More "complex" case, we don't have the expected value, report only when the actual is a literal
    assertThat("constantString").as("message").isEqualTo(actualObject()); // Noncompliant {{Replace this literal with the actual expression you want to assert.}}
    assertThat(0.1).isCloseTo(actualObject(), withinPercentage(11)); // Noncompliant
    assertThat(ConstantUtils.MY_CONSTANT).isCloseTo(actualObject(), withinPercentage(11)); // Compliant
    assertThat(ConstantUtils.MY_CONSTANT).as("message").isEqualTo(actualObject()); // Compliant
    assertThat(ConstantUtils.MY_CONSTANT).isEqualTo(CONSTANT); // Compliant
    assertThat("constantString"); // Noncompliant

    assertThatObject(2).isEqualTo(actualObject()); // Noncompliant
    assertThatObject(actualObject()).isEqualTo(3); // Compliant

  }

