  @Test
  void test_assertj_date_and_time() {
    // AssertJ supports date and time comparison with string.
    assertThat(getDate()).isEqualTo("1970-01-01T01:00:00"); // Compliant
    assertThat(getDate()).isNotEqualTo("2020-01-01T01:00:00"); // Compliant

    assertThat(new Date(0)).isEqualTo("1970-01-01T01:00:00"); // Compliant
    assertThat(LocalDate.parse("1970-01-01")).isEqualTo("1970-01-01"); // Compliant
    assertThat(LocalDateTime.parse("2007-12-03T10:15:30")).isEqualTo("2007-12-03T10:15:30"); // Compliant
    assertThat(ZonedDateTime.parse("2007-12-03T10:15:30+01:00")).isEqualTo("2007-12-03T10:15:30+01:00"); // Compliant
    assertThat(OffsetDateTime.parse("2007-12-03T10:15:30+01:00")).isEqualTo("2007-12-03T10:15:30+01:00"); // Compliant
    assertThat(OffsetTime.parse("10:15:30+01:00")).isEqualTo("10:15:30+01:00"); // Compliant
    assertThat(LocalTime.parse("10:15")).isEqualTo("10:15"); // Compliant
    assertThat(Instant.parse("2007-12-03T10:15:30.00Z")).isEqualTo("2007-12-03T10:15:30.00Z"); // Compliant

    assertThat(getDate().hashCode()).isEqualTo("1970-01-01T01:00:00"); // Noncompliant
    assertThat(OffsetDateTime.timeLineOrder()).isEqualTo("2007-12-03T10:15:30+01:00"); // Noncompliant
    assertThat("1970-01-01T01:00:00").isEqualTo(getDate()); // Noncompliant
    assertThat(getDate()).isSameAs("1970-01-01T01:00:00"); // Noncompliant
  }

