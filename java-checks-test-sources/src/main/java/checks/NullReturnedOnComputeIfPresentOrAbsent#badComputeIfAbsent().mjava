  public void badComputeIfAbsent() {
    Map<String, String> map = new HashMap<>();
    map.computeIfAbsent("myKey", key -> // Noncompliant [[sc=9;ec=24;secondary=+1]] {{Use "Map.containsKey(key)" followed by "Map.put(key, null)" to add null values.}}
      null);
    map.computeIfAbsent("myKey", NullReturnedOnComputeIfPresentOrAbsent::absentLambda); // Compliant uninteresting corner case

    String nullValue = null;
    map.computeIfAbsent("myKey", key -> nullValue); // Compliant uninteresting corner case

    map.computeIfAbsent("myKey", key -> "brand new"); // Compliant

    TreeMap<String, String> second = new TreeMap<>();
    second.computeIfAbsent("myKey", key -> null); // Compliant corner case where subtype of java.util.Map may break specification

    Map<String, String> third = new TreeMap<>();
    third.computeIfAbsent("myKey", key -> null); // Noncompliant
  }

