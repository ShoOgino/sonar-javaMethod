  void customLogs() {
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      CUSTOM_LOGGER.log(e);
    }
    try {
      /* ... */
    } catch (Exception e) { // Noncompliant
      CUSTOM_LOGGER.log(e.getMessage());
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant, heuristic detects "log", assume it will be correctly handled
      String message = "Some context for exception" + e.getMessage();
      CUSTOM_LOGGER.log(message);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      CUSTOM_LOGGER.log("something", e);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      String message = "Some context for exception" + e.getMessage();
      CUSTOM_LOGGER.log("something", message);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      CUSTOM_LOGGER.doSomethingWithException(e);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant, heuristic detects "log", assume it will be correctly handled
      String message = "Some context for exception" + e.getMessage();
      CUSTOM_LOGGER.doSomethingWithMessage(message);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      PROVIDER.getLogger().doSomethingWithException(e);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant, heuristic detects "log", assume it will be correctly handled
      String message = "Some context for exception" + e.getMessage();
      PROVIDER.getLogger().doSomethingWithMessage(message);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      PROVIDER.doSomethingWithException(e);
    }
    try {
      /* ... */
    } catch (Exception e) { // Noncompliant
      String message = "Some context for exception" + e.getMessage();
      PROVIDER.doSomethingWithMessage(message); // No clear sign that this call will do something useful
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant, heuristic detects "log", assume it will be correctly handled
      String message = "Some context for exception" + e.getMessage();
      logSomething(message);
    }
    try {
      /* ... */
    } catch (Exception e) { // Noncompliant
      String message = "Some context for exception" + e.getMessage();
      doSomething(message); // No clear sign that this call will do something useful
    }
    try {
      /* ... */
    } catch (Exception e) { // Noncompliant
      String message = "Some context for exception" + e.getMessage();
      PROVIDER.getLogger();
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant, heuristic detects "log", assume it will be correctly handled
      String message = "Some context for exception" + e.getMessage();
      CUSTOM_LOGGER.log("a", message);
      PROVIDER.getLogger();
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      String message = "Some context for exception" + e.getMessage();
      CUSTOM_LOGGER.setSomething("something").log(message);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      String message = "Some context for exception" + e.getMessage();
      CUSTOM_LOGGER.setSomething(message).doSomethingWithMessage("Other message");
    }
    try {
      /* ... */
    } catch (Exception e) { // Noncompliant
      CUSTOM_LOGGER.log(e.getMessage());
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant
      String message = "Some context for exception" + e.getMessage();
      MyCustomLogger.staticallyImportedMethod(message);
    }
    try {
      /* ... */
    } catch (Exception e) { // Compliant, type contains "log"
      String message = "Some context for exception" + e.getMessage();
      staticallyImportedMethod(message);
    }
    try {
      /* ... */
    } catch (Exception e) { // Noncompliant
      String message = "Some context for exception" + e.getMessage();
      staticallyImportedMethodFromProvider(message);
    }
  }

