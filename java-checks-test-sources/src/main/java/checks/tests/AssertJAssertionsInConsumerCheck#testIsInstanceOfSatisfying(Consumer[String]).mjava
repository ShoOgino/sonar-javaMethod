  @Test
  public void testIsInstanceOfSatisfying(Consumer<String> unknownRequirements) {
    Object myObj = getSomeObject();

    Consumer<String> myPredicateAsConsumer = s -> s.equals("b");
    assertThat(myObj).isInstanceOfSatisfying(String.class, "b"::equals); // Noncompliant [[sc=23;ec=45;secondary=20]] {{Rework this assertion to assert something inside the Consumer argument.}}
    assertThat(myObj).isInstanceOfSatisfying(String.class, s -> s.equals("b")); // Noncompliant [[sc=23;ec=45;secondary=21]]
    assertThat(myObj).isInstanceOfSatisfying(String.class, myPredicateAsConsumer); // Noncompliant [[sc=23;ec=45;secondary=22]]

    Consumer<String> myRequirements = s -> assertThat(s).isEqualTo("b");
    assertThat(myObj).isInstanceOfSatisfying(String.class, s -> assertThat(s).isEqualTo("b"));
    assertThat(myObj).isInstanceOfSatisfying(String.class, myRequirements);
    assertThat(myObj).isInstanceOfSatisfying(String.class, classRequirements);
    assertThat(myObj).isInstanceOfSatisfying(String.class, this::localMethodWithAssertion);
    assertThat(myObj).isInstanceOfSatisfying(String.class, unknownRequirements); // Ok - we consider expressions that cannot be resolved as compliant
  }

