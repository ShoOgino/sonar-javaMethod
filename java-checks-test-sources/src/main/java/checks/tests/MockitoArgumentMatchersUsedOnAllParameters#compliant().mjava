  @Test
  public void compliant() {
    Foo foo = mock(Foo.class);
    Integer i1 = null, i2 = null, val1 = null, val2 = null;
    given(foo.bar(anyInt(), eq(i1), eq(i2))).willReturn(null);
    when(foo.baz(val1, val2)).thenReturn("hi");
    doThrow(new RuntimeException()).when(foo).quux(intThat(x -> x >= 42), eq(-1));
    verify(foo).bar(eq(i1), anyInt(), eq(i2));
    verify(foo).bop();

    ArgumentCaptor<Integer> captor = ArgumentCaptor.forClass(Integer.class);
    verify(foo).bar(captor.capture(), any(), any());

    // Casting a matcher is compliant
    verify(foo).bar((Integer) anyInt(), any(), any());
    verify(foo).bar((Integer) captor.capture(), any(), any());
    verify(foo).bar((Integer) (Number) (Integer) captor.capture(), any(), any());
    verify(foo).bar(((Integer) ((Number) ((Integer) captor.capture()))), any(), any());

    // Mix argument checkers from top Mockito and ArgumentMatchers classes
    verify(foo).bar(Mockito.anyInt(), any(), any());
    verify(foo).bar(Mockito.intThat(x -> x >= 42), Mockito.any(), any());
    verify(foo).bar(eq(42), any(), Mockito.notNull());

    // Additional argument checkers
    verify(foo).bar(gt(42), any(), any());
    verify(foo).bar(intThat(x -> x >= 42), or(ArgumentMatchers.any(), notNull()), any());
    verify(foo).bar(eq(42), any(), not(null));

    anyInt();
    eq(42);
    anySet();
    anyList();
  }

