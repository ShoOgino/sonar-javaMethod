  private void execute(MethodTree tree) {
    PerformanceMeasure.Duration cfgDuration = PerformanceMeasure.start("cfg");
    CFG cfg = CFG.build(tree);
    exitBlock = cfg.exitBlock();
    cfgDuration.stop();

    checkerDispatcher.init(tree, cfg);

    PerformanceMeasure.Duration liveVariablesDuration = PerformanceMeasure.start("LiveVariables.analyze");
    liveVariables = LiveVariables.analyze(cfg);
    liveVariablesDuration.stop();

    explodedGraph = new ExplodedGraph();
    methodTree = tree;
    constraintManager = new ConstraintManager();
    workList = new LinkedList<>();
    // Linked hashSet is required to guarantee order of yields to be generated
    endOfExecutionPath = new LinkedHashSet<>();
    programState = ProgramState.EMPTY_STATE;
    steps = 0;
    for (ProgramState startingState : startingStates(tree, programState)) {
      enqueue(new ProgramPoint(cfg.entryBlock()), startingState);
    }
    while (!workList.isEmpty()) {
      steps++;
      if (steps > maxSteps()) {
        throwMaxSteps(tree);
      }
      // LIFO:
      setNode(workList.removeFirst());
      CFG.Block block = (CFG.Block) programPosition.block;
      if (block.successors().isEmpty()) {
        endOfExecutionPath.add(node);
        continue;
      }
      try {
        Tree terminator = block.terminator();
        if (programPosition.i < block.elements().size()) {
          // process block element
          visit(block.elements().get(programPosition.i), terminator);
        } else if (terminator == null) {
          // process block exit, which is unconditional jump such as goto-statement or return-statement
          handleBlockExit(programPosition);
        } else if (programPosition.i == block.elements().size()) {
          // process block exist, which is conditional jump such as if-statement
          PerformanceMeasure.Duration postStatementDuration = PerformanceMeasure.start("PostStatement");
          checkerDispatcher.executeCheckPostStatement(terminator);
          postStatementDuration.stop();
        } else {
          // process branch
          // process block exist, which is conditional jump such as if-statement
          PerformanceMeasure.Duration preStatementDuration = PerformanceMeasure.start("PreStatement");
          checkerDispatcher.executeCheckPreStatement(terminator);
          preStatementDuration.stop();
          PerformanceMeasure.Duration handleBlockExitDuration = PerformanceMeasure.start("handleBlockExit");
          handleBlockExit(programPosition);
          handleBlockExitDuration.stop();
        }
      } catch (TooManyNestedBooleanStatesException e) {
        throwTooManyBooleanStates(tree, e);
      } catch (RelationalSymbolicValue.TransitiveRelationExceededException e) {
        throwTooManyTransitiveRelationsException(tree, e);
      }
    }

    handleEndOfExecutionPath(false);
    PerformanceMeasure.Duration endOfExecutionDuration = PerformanceMeasure.start("EndOfExecution");
    checkerDispatcher.executeCheckEndOfExecution();
    endOfExecutionDuration.stop();
    // Cleanup:
    workList = null;
    node = null;
    programState = null;
    constraintManager = null;
  }

