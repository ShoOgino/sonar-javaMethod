  private void learnIdentifierConstraints(IdentifierTree tree, SymbolicValue sv) {
    if (THIS_SUPER.contains(tree.name())) {
      programState = programState.addConstraint(sv, ObjectConstraint.NOT_NULL);
      return;
    }
    Tree declaration = tree.symbol().declaration();
    if (!isFinalField(tree.symbol()) || declaration == null) {
      return;
    }
    VariableTree variableTree = (VariableTree) declaration;
    ExpressionTree initializer = variableTree.initializer();
    if (initializer == null) {
      return;
    }
    // only check final field with an initializer
    initializer = ExpressionUtils.skipParentheses(initializer);
    if (initializer.is(Tree.Kind.NULL_LITERAL)) {
      programState = programState.addConstraint(sv, ObjectConstraint.NULL);
    } else if (initializer.is(Tree.Kind.NEW_CLASS, Tree.Kind.NEW_ARRAY, Tree.Kind.STRING_LITERAL)
      || isNonNullMethodInvocation(initializer)
      || variableTree.symbol().type().isPrimitive()
      || initializer.symbolType().isPrimitive()) {
      programState = programState.addConstraint(sv, ObjectConstraint.NOT_NULL);
    }
  }

