    @Override
    public void visitMethodInvocation(MethodInvocationTree tree) {
      if (BIG_INT_DEC_DIVIDE_REMAINDER.matches(tree)) {
        ProgramState.SymbolicValueSymbol rightOp = programState.peekValueSymbol();
        handleDivide(tree, programState.peekValue(1), rightOp.symbolicValue(), rightOp.symbol());
      } else if (BIG_INT_DEC_ADD_SUB.matches(tree)) {
        handlePlusMinus(programState.peekValue(1), programState.peekValue(0));
      } else if (BIG_INT_DEC_MULTIPLY.matches(tree)) {
        handleMultiply(programState.peekValue(1), programState.peekValue(0));
      } else if (BIG_INT_DEC_VALUE_OF.matches(tree)) {
        ExpressionTree arg = tree.arguments().get(0);
        SymbolicValue sv = programState.peekValue(0);
        if (arg.is(Tree.Kind.IDENTIFIER) && isZero(sv)) {
          reuseSymbolicValue(sv);
        }
      } else if (KEEPING_CONSTRAINTS_WITHOUT_PARAM.matches(tree)) {
        reuseSymbolicValue(programState.peekValue(0));
      } else if (KEEPING_CONSTRAINTS_WITH_ONE_PARAM.matches(tree)) {
        reuseSymbolicValue(programState.peekValue(1));
      }
    }

