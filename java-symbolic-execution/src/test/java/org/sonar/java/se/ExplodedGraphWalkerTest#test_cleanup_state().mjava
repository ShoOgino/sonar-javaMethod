  @Test
  void test_cleanup_state() {
    final int[] steps = new int[2];
    SECheckVerifier.newVerifier()
      .onFile("src/test/files/se/SeEngineTestCleanupState.java")
      .withChecks(new SymbolicExecutionVisitor(Collections.singletonList(new NullDereferenceCheck())) {
        @Override
        public void visitNode(Tree tree) {
          ExplodedGraphWalker explodedGraphWalker = new ExplodedGraphWalker(this.behaviorCache, (Sema) context.getSemanticModel(), false);
          explodedGraphWalker.visitMethod((MethodTree) tree, methodBehaviorForSymbol(((MethodTree) tree).symbol()));
          steps[0] += explodedGraphWalker.steps;
        }
      })
      .withClassPath(SETestUtils.CLASS_PATH)
      .verifyNoIssues();
    SECheckVerifier.newVerifier()
      .onFile("src/test/files/se/SeEngineTestCleanupState.java")
      .withChecks(new SymbolicExecutionVisitor(Collections.emptyList()) {
        @Override
        public void visitNode(Tree tree) {
          ExplodedGraphWalker explodedGraphWalker = new ExplodedGraphWalker(this.behaviorCache, (Sema) context.getSemanticModel());
          MethodTree methodTree = (MethodTree) tree;
          explodedGraphWalker.visitMethod(methodTree, methodBehaviorForSymbol(methodTree.symbol()));
          steps[1] += explodedGraphWalker.steps;
        }
      })
      .withClassPath(SETestUtils.CLASS_PATH)
      .verifyNoIssues();
      assertThat(steps[0])
        .isPositive()
        .isGreaterThan(steps[1]);
  }

