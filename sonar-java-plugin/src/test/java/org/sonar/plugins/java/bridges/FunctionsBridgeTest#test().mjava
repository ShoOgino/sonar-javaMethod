  @Test
  public void test() {
    Resource sonarFile = mock(Resource.class);
    SourceFile squidFile = new SourceFile("file");

    SourceClass squidClass = new SourceClass("class");
    squidClass.setMeasure(JavaMetric.CLASSES, 1);
    squidFile.addChild(squidClass);

    SourceClass squidAnonymousClass = new SourceClass("anonymousClass");
    squidFile.addChild(squidAnonymousClass);

    SourceMethod squidMethod = new SourceMethod("method");
    squidClass.addChild(squidMethod);

    SourceMethod squidAccessor = new SourceMethod("accessor");
    squidAccessor.setMeasure(Metric.ACCESSORS, 1);
    squidClass.addChild(squidAccessor);

    bridge.onFile(squidFile, sonarFile);

    ArgumentCaptor<Measure> measureCaptor = ArgumentCaptor.forClass(Measure.class);
    verify(context, times(4)).saveMeasure(eq(sonarFile), measureCaptor.capture());

    List<Measure> measures = measureCaptor.getAllValues();

    assertThat(measures.get(0).getMetric()).isSameAs(CoreMetrics.FUNCTIONS);
    assertThat(measures.get(0).getValue()).isEqualTo(1);

    assertThat(measures.get(1).getMetric()).isSameAs(CoreMetrics.ACCESSORS);
    assertThat(measures.get(1).getValue()).isEqualTo(1);

    assertThat(measures.get(2).getMetric()).isSameAs(CoreMetrics.COMPLEXITY_IN_FUNCTIONS);
    assertThat(measures.get(2).getValue()).isEqualTo(0);

    assertThat(measures.get(3).getMetric()).isSameAs(CoreMetrics.FUNCTION_COMPLEXITY_DISTRIBUTION);
  }

