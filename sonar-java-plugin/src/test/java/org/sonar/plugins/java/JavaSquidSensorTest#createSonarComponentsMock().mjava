  private static SonarComponents createSonarComponentsMock() {
    SonarComponents sonarComponents = mock(SonarComponents.class);
    BadMethodName_S00100_Check check = new BadMethodName_S00100_Check();
    when(sonarComponents.checkClasses()).thenReturn(new CodeVisitor[] {check});

    Symbolizable symbolizable = mock(Symbolizable.class);
    Symbolizable.SymbolTableBuilder symboltableBuilder = mock(Symbolizable.SymbolTableBuilder.class);
    when(sonarComponents.symbolizableFor(any(File.class))).thenReturn(symbolizable);
    when(symbolizable.newSymbolTableBuilder()).thenReturn(symboltableBuilder);
    when(sonarComponents.fileLinesContextFor(any(File.class))).thenReturn(mock(FileLinesContext.class));

    Highlightable highlightable = mock(Highlightable.class);
    when(highlightable.newHighlighting()).thenReturn(mock(Highlightable.HighlightingBuilder.class));
    when(sonarComponents.highlightableFor(any(File.class))).thenReturn(highlightable);

    Checks<JavaCheck> checks = mock(Checks.class);
    when(checks.ruleKey(any(JavaCheck.class))).thenReturn(RuleKey.of("squid", RuleAnnotationUtils.getRuleKey(BadMethodName_S00100_Check.class)));
    when(sonarComponents.checks()).thenReturn(Lists.<Checks<JavaCheck>>newArrayList(checks));


    ResourcePerspectives resourcePerspectives = mock(ResourcePerspectives.class);
    when(sonarComponents.getResourcePerspectives()).thenReturn(resourcePerspectives);
    when(resourcePerspectives.as(any(Issuable.class.getClass()), any(Resource.class))).thenReturn(mock(Issuable.class));
    return sonarComponents;
  }

