  private void testIssueCreation(InputFile.Type onType, int expectedIssues) throws IOException {
    Settings settings = new MapSettings();
    NoSonarFilter noSonarFilter = mock(NoSonarFilter.class);
    SensorContextTester context = createContext(onType);
    DefaultFileSystem fs = context.fileSystem();
    SonarComponents sonarComponents = createSonarComponentsMock(context);
    DefaultJavaResourceLocator javaResourceLocator = new DefaultJavaResourceLocator(fs, new JavaClasspath(settings, fs));
    PostAnalysisIssueFilter postAnalysisIssueFilter = new PostAnalysisIssueFilter(fs);
    JavaSquidSensor jss = new JavaSquidSensor(sonarComponents, fs, javaResourceLocator, settings, noSonarFilter, postAnalysisIssueFilter);

    jss.execute(context);
    verify(noSonarFilter, times(1)).noSonarInFile(fs.inputFiles().iterator().next(), Sets.newHashSet(81));
    verify(sonarComponents, times(expectedIssues)).reportIssue(any(AnalyzerMessage.class));

    context = createContext(onType);
    fs = context.fileSystem();
    sonarComponents = createSonarComponentsMock(context);
    javaResourceLocator = new DefaultJavaResourceLocator(fs, new JavaClasspath(settings, fs));
    postAnalysisIssueFilter = new PostAnalysisIssueFilter(fs);
    jss = new JavaSquidSensor(sonarComponents, fs, javaResourceLocator, settings, noSonarFilter, postAnalysisIssueFilter);

    settings.setProperty(Java.SOURCE_VERSION, "wrongFormat");
    jss.execute(context);

    context = createContext(onType);
    fs = context.fileSystem();
    sonarComponents = createSonarComponentsMock(context);
    javaResourceLocator = new DefaultJavaResourceLocator(fs, new JavaClasspath(settings, fs));
    postAnalysisIssueFilter = new PostAnalysisIssueFilter(fs);
    jss = new JavaSquidSensor(sonarComponents, fs, javaResourceLocator, settings, noSonarFilter, postAnalysisIssueFilter);

    settings.setProperty(Java.SOURCE_VERSION, "1.7");
    jss.execute(context);
  }

