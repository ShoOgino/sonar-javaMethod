  @Test
  public void test_issues_creation() throws Exception {
    Settings settings = new Settings();
    DefaultFileSystem fs = new DefaultFileSystem(new File("src/test/java/"));
    File file = new File("src/test/java/org/sonar/plugins/java/JavaSquidSensorTest.java");
    fs.add(new DefaultInputFile(file.getPath()).setFile(file).setLanguage("java"));
    Project project = mock(Project.class);
    JavaClasspath javaClasspath = new JavaClasspath(project, settings, fs);

    SonarComponents sonarComponents = createSonarComponentsMock(fs);
    DefaultJavaResourceLocator javaResourceLocator = new DefaultJavaResourceLocator(fs, javaClasspath, mock(SuppressWarningsFilter.class));
    JavaSquidSensor jss = new JavaSquidSensor(javaClasspath, sonarComponents, fs, javaResourceLocator, settings, mock(NoSonarFilter.class));
    SensorContext context = mock(SensorContext.class);
    when(context.getResource(any(InputPath.class))).thenReturn(org.sonar.api.resources.File.create("src/test/java/org/sonar/plugins/java/JavaSquidSensorTest.java"));

    jss.analyse(project, context);

    String message = "Rename this method name to match the regular expression '^[a-z][a-zA-Z0-9]*$'.";
    verify(sonarComponents).addIssue(eq(file.getAbsoluteFile()), any(JavaCheck.class), eq(70), eq(message), isNull(Double.class));
    verify(sonarComponents).addIssue(eq(file.getAbsoluteFile()), any(JavaCheck.class), eq(80), eq(message), isNull(Double.class));
    verify(sonarComponents).addIssue(eq(file.getAbsoluteFile()), any(JavaCheck.class), eq(129), eq(message), isNull(Double.class));

    settings.setProperty(CoreProperties.DESIGN_SKIP_DESIGN_PROPERTY, true);
    jss.analyse(project, context);
  }

