  @Override
  public List getExtensions() {
    ImmutableList.Builder<Object> builder = ImmutableList.builder();
    builder.addAll(SurefireExtensions.getExtensions());
    builder.addAll(JaCoCoExtensions.getExtensions());
    builder.addAll(JavaClasspathProperties.getProperties());
    builder.add(
        JavaClasspath.class,
        JavaTestClasspath.class,
        JavaCommonRulesEngine.class,
        JavaCommonRulesDecorator.class,
        Java.class,
        CommonRulesSonarWayProfile.class,
        PropertyDefinition.builder(Java.FILE_SUFFIXES_KEY)
            .defaultValue(Java.DEFAULT_FILE_SUFFIXES)
            .name("File suffixes")
            .description("Comma-separated list of suffixes for files to analyze. To not filter, leave the list empty.")
            .subCategory("General")
            .onQualifiers(Qualifiers.PROJECT)
            .build(),
        PropertyDefinition.builder(JavaPlugin.SQUID_ANALYSE_ACCESSORS_PROPERTY)
            .defaultValue(Boolean.toString(JavaPlugin.SQUID_ANALYSE_ACCESSORS_DEFAULT_VALUE))
            .category(JAVA_CATEGORY)
            .subCategory(GENERAL_SUBCATEGORY)
            .name("Separate Accessors")
            .description("Flag whether SonarQube should separate accessors (getters/setters) from methods. " +
                "In that case, accessors are not counted in metrics such as complexity or API documentation.")
            .type(PropertyType.BOOLEAN)
            .onQualifiers(Qualifiers.PROJECT)
            .build(),
        PropertyDefinition.builder(CoreProperties.DESIGN_SKIP_DESIGN_PROPERTY)
            .defaultValue(Boolean.toString(CoreProperties.DESIGN_SKIP_DESIGN_DEFAULT_VALUE))
            .category(JAVA_CATEGORY)
            .subCategory(GENERAL_SUBCATEGORY)
            .name("Skip design analysis")
            .type(PropertyType.BOOLEAN)
            .hidden()
            .build(),
        PropertyDefinition.builder(JavaPlugin.JSON_OUTPUT_FOLDER)
            .category(JAVA_CATEGORY)
            .subCategory(GENERAL_SUBCATEGORY)
            .name("Output folder of issues as Json files")
            .type(PropertyType.STRING)
            .hidden()
            .build(),

        JavaRulesDefinition.class,
        JavaSonarWayProfile.class,
        SonarComponents.class,
        DefaultJavaResourceLocator.class,
        JavaSquidSensor.class,
        SuppressWarningsFilter.class);
    return builder.build();
  }

