  /**
   * @see org.sonar.java.ast.visitors.FileVisitor
   * @see org.sonar.java.ast.visitors.PackageVisitor
   */
  private void loadSquidFilesAndPackages(SquidIndex squid, SensorContext context, Project project) {
    Map<Resource, SourceCode> directoryReverseMap = Maps.newHashMap();

    Collection<SourceCode> files = squid.search(new QueryByType(SourceFile.class));
    for (SourceCode squidFile : files) {
      String filePath = squidFile.getName();

      File file = new File(filePath);
      Resource sonarFile = org.sonar.api.resources.File.fromIOFile(file, project);

      // resource is reloaded to get the id:
      put(squidFile, context.getResource(sonarFile));
      SourceCode squidPackage = squidFile.getParent(SourcePackage.class);
      // we ignore mapping for unresolved package
      if (PackageVisitor.UNRESOLVED_PACKAGE.equals(squidPackage.getKey())) {
        continue;
      }
      Resource sonarDirectory = context.getResource(sonarFile.getParent());
      SourceCode previousDirectoryMapping = directoryReverseMap.get(sonarDirectory);
      if (previousDirectoryMapping == null) {
        directoryReverseMap.put(sonarDirectory, squidPackage);
        put(squidPackage, sonarDirectory);
      } else if (!previousDirectoryMapping.equals(squidPackage)) {
        String message = "Directory contains files belonging to different packages";
        String warning = " - some metrics could be reported incorrectly: {}";
        if (skipPackageDesignAnalysis) {
          LOG.warn(message + warning, file.getParentFile());
        } else {
          LOG.error(message + warning, file.getParentFile());
          throw new SonarException(message + " : " + file.getParentFile() +
              " Please fix your source code or use " + CoreProperties.DESIGN_SKIP_PACKAGE_DESIGN_PROPERTY + "=true to continue the analysis.");
        }
      }
    }
  }

