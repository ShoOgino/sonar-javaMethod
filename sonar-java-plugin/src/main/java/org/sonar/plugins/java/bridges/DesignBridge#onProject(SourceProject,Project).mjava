  @Override
  public void onProject(SourceProject squidProject, Project sonarProject) {
    Set<SourceCode> squidPackages = squidProject.getChildren();
    if (squidPackages != null) {
      squidPackages = Sets.filter(squidPackages, new Predicate<SourceCode>() {
        @Override
        public boolean apply(@Nullable SourceCode input) {
          return input != null && !PackageVisitor.UNRESOLVED_PACKAGE.equals(input.getKey());
        }
      });
      if (squidPackages.isEmpty()) {
        return;
      }
      TimeProfiler profiler = new TimeProfiler(LOG).start("Package design analysis");
      LOG.debug("{} packages to analyze", squidPackages.size());

      savePackageDependencies(squidPackages);

      IncrementalCyclesAndFESSolver<SourceCode> cyclesAndFESSolver = new IncrementalCyclesAndFESSolver<SourceCode>(squid, squidPackages);
      LOG.debug("{} cycles", cyclesAndFESSolver.getCycles().size());

      Set<Edge> feedbackEdges = cyclesAndFESSolver.getFeedbackEdgeSet();
      LOG.debug("{} feedback edges", feedbackEdges.size());
      int tangles = cyclesAndFESSolver.getWeightOfFeedbackEdgeSet();

      saveViolations(feedbackEdges);
      savePositiveMeasure(sonarProject, CoreMetrics.PACKAGE_CYCLES, cyclesAndFESSolver.getCycles().size());
      savePositiveMeasure(sonarProject, CoreMetrics.PACKAGE_FEEDBACK_EDGES, feedbackEdges.size());
      savePositiveMeasure(sonarProject, CoreMetrics.PACKAGE_TANGLES, tangles);
      savePositiveMeasure(sonarProject, CoreMetrics.PACKAGE_EDGES_WEIGHT, getEdgesWeight(squidPackages));

      String dsmJson = serializeDsm(squid, squidPackages, feedbackEdges);
      Measure dsmMeasure = new Measure(CoreMetrics.DEPENDENCY_MATRIX, dsmJson).setPersistenceMode(PersistenceMode.DATABASE);
      context.saveMeasure(sonarProject, dsmMeasure);

      profiler.stop();
    }
  }

