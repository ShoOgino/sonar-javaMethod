  public void reportIssues(SourceFile squidFile, Resource sonarFile) {
    if (squidFile.hasCheckMessages()) {
      Issuable issuable = resourcePerspectives.as(Issuable.class, sonarFile);
      Set<CheckMessage> messages = squidFile.getCheckMessages();
      for (CheckMessage checkMessage : messages) {
        Object check = checkMessage.getCheck();
        RuleKey ruleKey;
        if (check instanceof RuleKey) {
          // VisitorsBridge uses RuleKey
          ruleKey = (RuleKey) check;
        } else {
          ruleKey = checks.ruleKey((CodeVisitor) checkMessage.getCheck());
        }
        Multimap<String, Integer> ignoreLinesForRules = ignoredLinesForRulesByFile.get(squidFile.getKey());
        if (ruleKey != null && ignoreLinesForRules != null && !ignoreLinesForRules.get(ruleKey.toString()).contains(checkMessage.getLine())) {
          Issue issue = issuable.newIssueBuilder()
              .ruleKey(ruleKey)
              .line(checkMessage.getLine())
              .message(checkMessage.formatDefaultMessage()).build();
          issuable.addIssue(issue);
        }
      }
      // Remove from memory:
      messages.clear();
    }
  }

