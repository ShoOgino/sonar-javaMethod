  public void reportIssues(SourceFile squidFile, Resource sonarFile) {
    if (squidFile.hasCheckMessages()) {
      Issuable issuable = resourcePerspectives.as(Issuable.class, sonarFile);
      Set<CheckMessage> messages = squidFile.getCheckMessages();
      if (issuable != null) {
        for (CheckMessage checkMessage : messages) {
          Object check = checkMessage.getCheck();

          RuleKey ruleKey = getRuleKey((JavaCheck) check);
          if (ruleKey == null) {
            throw new IllegalStateException("Cannot find rule key for instance of " + check.getClass());
          }
          if (checkMessage instanceof org.sonar.java.CheckMessage) {
            AnalyzerMessage issue = ((org.sonar.java.CheckMessage) checkMessage).analyzerMessage;
            if (issue != null) {
              reportIssueNew(sonarFile, issuable, issue, ruleKey);
              continue;
            }
          }
          Issue issue = issuable.newIssueBuilder()
            .ruleKey(ruleKey)
            .line(checkMessage.getLine())
            .message(checkMessage.formatDefaultMessage())
            .effortToFix(checkMessage.getCost())
            .build();
          issuable.addIssue(issue);
        }
      }
      // Remove from memory:
      messages.clear();
    }
  }

