  void doStuff(boolean test, MyEnum myEnum, List myList)
  {                                     // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    if (test)
      System.out.println();
    
    if (test) {                         // Compliant
    } else
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    }
    
    switch (myEnum)
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
      case A:
        break;
      default:
        break;
    }
    
    do {                                // Compliant
    } while(test);
    
    while (test)
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    }
    
    for (int i = 0; i < 10; i++)
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    }
    
    for (Object object : myList) {      // Compliant
    }
    
    synchronized (myList)
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    }
    
    try
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    } catch(Exception e)
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    }
    
    try (FileInputStream fis = new FileInputStream(""))
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    } finally
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
    }
    
    Closeable c = new Closeable()
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
      @Override
      public void close() throws IOException {
      }
    };
    
    Closeable c2 = new Closeable() {    // Compliant
      @Override
      public void close() throws IOException {
        
      }
    };
    
    LABEL:
    {                                   // Noncompliant {{Move this left curly brace to the end of previous line of code.}}
      myMethod();
    }
  }

