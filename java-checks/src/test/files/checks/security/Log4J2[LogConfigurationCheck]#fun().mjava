  void fun() {
// Questionable: creating a new custom configuration
    ConfigurationBuilderFactory.newConfigurationBuilder(); // Noncompliant [[sc=5;ec=58]] {{Make sure that this logger's configuration is safe.}}

    // Questionable: setting loggers level can result in writing sensitive information in production
    Configurator.setAllLevels("com.example", org.apache.logging.log4j.Level.DEBUG); // Noncompliant
    Configurator.setLevel("com.example", org.apache.logging.log4j.Level.DEBUG); // Noncompliant
    java.util.Map<String,org.apache.logging.log4j.Level> levelMap;
    Configurator.setLevel(levelMap); // Noncompliant
    Configurator.setRootLevel(org.apache.logging.log4j.Level.DEBUG); // Noncompliant

    Configuration config;
    // Questionable: this modifies the configuration
    org.apache.logging.log4j.core.Appender appender;
    config.addAppender(appender);  // Noncompliant

    java.net.URI uri;
    LoggerContext context;
    context.setConfigLocation(uri);  // Noncompliant

    java.io.InputStream stream;
    java.io.File file;
    java.net.URL url;
    java.lang.ClassLoader loader;

    // Questionable: Load the configuration from a stream or file
    new ConfigurationSource(stream); // Noncompliant
    new ConfigurationSource(stream, file);// Noncompliant
    new ConfigurationSource(stream, url);// Noncompliant
    ConfigurationSource.fromResource("source", loader);// Noncompliant
    ConfigurationSource.fromUri(uri);// Noncompliant

    org.apache.logging.log4j.Level level;
    Filter filter;
    LoggerConfig loggerConfig = config.getRootLogger();
    loggerConfig.addAppender(appender, level, filter); // Noncompliant
    loggerConfig.setLevel(level); // Noncompliant

  }

