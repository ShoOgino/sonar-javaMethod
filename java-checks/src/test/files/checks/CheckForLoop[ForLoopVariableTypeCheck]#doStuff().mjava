  void doStuff() {
    java.util.Collection unparameterized = java.util.Collections.emptySet();
    for (Object o: unparameterized) {}

    java.util.List<B> listOfB = java.util.Collections.singletonList(new B());
    for (B b: listOfB) {}
    for (A a: listOfB) {}
    for (A a: listOfB) { // Noncompliant [[sc=10;ec=11;secondary=29]] {{Change "A" to the type handled by the Collection.}}
      B b = (B) a;
    }
    for (Object o: listOfB) {}
    for (Object o: listOfB) { // Noncompliant {{Change "Object" to the type handled by the Collection.}}
      B b = (B) o;
    }

    for (B b: C.getBs()) {}
    for (A b: C.getBs()) {}
    for (A a: C.getBs()) { // Noncompliant {{Change "A" to the type handled by the Collection.}}
      B b = (B) a;
    }

    for (B b: C.getExtendedBs()) {}
    for (A a: C.getExtendedBs()) {}
    for (A a: C.getExtendedBs()) { // Noncompliant {{Change "A" to the type handled by the Collection.}}
      B b = (B) a;
    }
    for (A a: C.getExtendedAs()) {}

    for (B b: java.util.Collections.singletonList(new B())) {}
    for (A a: java.util.Collections.singletonList(new B())) {}
    for (A a: java.util.Collections.singletonList(new B())) { // Noncompliant {{Change "A" to the type handled by the Collection.}}
      B b = (B) a;
    }

    for (D.E e: D.getEs()) {}
    for (Object o; listOfB.hasNext(); o = listOfB.next()) {}
    while (listOfB.hasNext()) { listOfB.next(); }

    java.util.Set<java.util.Set<B>> setOfSetOfB = java.util.Collections.emptySet();
    for (java.util.Set<B> s: setOfSetOfB) {}
    for (java.util.Set s: setOfSetOfB) {}
    for (Object s: setOfSetOfB) {}
    for (Object s: setOfSetOfB) { // Noncompliant
      B b = (B) s;
    }

    java.util.Map t = new java.util.HashMap();
    for (java.util.Map.Entry e : ((java.util.Map<?,?>)t).entrySet()) {}

    java.util.List l;
    for (Object o: l) {
      B b = (B) o;
    }

    class Foo implements java.util.Collection<String> {}
    for (Object o: new Foo()) { // Compliant: ignoring raw subtypes of j.u.Collection
      String s = (String) o;
    }

    int[] arrayOfInt = new int[0];
    for (Object e: arrayOfInt) { // Noncompliant
      int i = (int) e;
    }
    for (Object o: arrayOfInt) {}
    for (int i: arrayOfInt) {}
  }

