  void closeable_not_closed_in_loops(Collection<Object> objects, Collection<String> propertyList) throws Exception {
    Reader reader = null;
    for (int i = 0; i < MAX_LOOP; i++) {
      reader = new FileReader(""); // Noncompliant {{Close this "Reader"}}
    }
    reader.close();
    
    Reader reader2 = null;
    for (int i = 0; i < MAX_LOOP; i++) {
      reader2 = new FileReader(""); // Compliant
      reader2.close();
    }
    
    Reader reader3 = null;
    for (;;) {
      reader3 = new FileReader(""); // Compliant
      reader3.close();
    }
    
    int j = 0;

    InputStream is = null;
    while (j < MAX_LOOP) {
      is = new FileInputStream(""); // Noncompliant {{Close this "InputStream"}}
      j++;
    }
    is.close();
    
    j = 0;
    InputStream is2 = null;
    while (j < MAX_LOOP) {
      is2 = new FileInputStream(""); // Compliant
      is2.close();
      j++;
    }
    
    Writer writer = null;
    for (Object object : objects) {
      writer = new FileWriter(""); // Noncompliant {{Close this "Writer"}}
    }
    writer.close();
    
    Writer writer2 = null;
    for (Object object : objects) {
      writer2 = new FileWriter(""); // Compliant
      writer2.close();
    }
    
    j = 0;
    FileInputStream fis = null;
    do {
      fis = new FileInputStream(""); // Noncompliant {{Close this "FileInputStream"}}
      j++;
    } while (j < MAX_LOOP);
    fis.close();
    
    j = 0;
    FileInputStream fis2 = null;
    do {
      fis2 = new FileInputStream(""); // Compliant
      fis2.close();
      j++;
    } while (j < MAX_LOOP);
    
    OutputStream stream = null;
    try{
      for (String property : propertyList) {
        stream = new FileOutputStream("myfile.txt");  // Noncompliant {{Close this "OutputStream"}}
        // ...
      }
    }catch(Exception e){
      // ...
    }finally{
      stream.close();  // Multiple stream were opened. Only the last is closed.
    }
    
    OutputStream stream2 = null;
    try{
      stream2 = new FileOutputStream("myfile.txt");  // Compliant
      for (String property : propertyList) {
        // ...
      }
    }catch(Exception e){
      // ...
    }finally{
      stream2.close();  // Multiple stream were opened. Only the last is closed.
    }
  }

