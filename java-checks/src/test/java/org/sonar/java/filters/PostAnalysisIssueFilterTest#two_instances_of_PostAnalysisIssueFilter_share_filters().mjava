  @Test
  void two_instances_of_PostAnalysisIssueFilter_share_filters() {
    IssueFilterChain chain = mock(IssueFilterChain.class);
    when(chain.accept(ArgumentMatchers.any())).thenReturn(true);

    when(fakeIssue.componentKey()).thenReturn(INPUT_FILE.key());
    when(fakeIssue.line()).thenReturn(666);

    PostAnalysisIssueFilter p1 = new PostAnalysisIssueFilter();
    PostAnalysisIssueFilter p2 = new PostAnalysisIssueFilter();

    p1.scanFile(context);
    p2.scanFile(context);

    assertThat(p1.accept(fakeIssue, chain)).isTrue();
    assertThat(p2.accept(fakeIssue, chain)).isTrue();

    InternalSyntaxToken fakeToken = new InternalSyntaxToken(666, 0, "fake_token", Collections.emptyList(), false);
    GeneratedCodeFilter filter = (GeneratedCodeFilter) PostAnalysisIssueFilter.ISSUE_FILTERS.get(4);
    filter.excludeLines(fakeToken);

    assertThat(p1.accept(fakeIssue, chain)).isFalse();
    assertThat(p2.accept(fakeIssue, chain)).isFalse();
  }

