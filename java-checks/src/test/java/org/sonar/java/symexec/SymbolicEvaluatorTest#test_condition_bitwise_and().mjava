  @Test
  public void test_condition_bitwise_and() {
    // evaluation
    assertThat(evaluateCondition("false & false").isAlwaysFalse()).isTrue();
    assertThat(evaluateCondition("false & true").isAlwaysFalse()).isTrue();
    assertThat(evaluateCondition("false & local2").isAlwaysFalse()).isTrue();
    assertThat(evaluateCondition("true & false").isAlwaysFalse()).isTrue();
    assertThat(evaluateCondition("true & true").isAlwaysTrue()).isTrue();
    assertThat(evaluateCondition("true & local2").isUnknown()).isTrue();
    assertThat(evaluateCondition("local1 & false").isAlwaysFalse()).isTrue();
    assertThat(evaluateCondition("local1 & true").isUnknown()).isTrue();
    assertThat(evaluateCondition("local1 & local").isUnknown()).isTrue();

    // number of spawned states
    assertOutputStates(evaluateCondition("false & false"), 0, 1, 0);
    assertOutputStates(evaluateCondition("false & true"), 0, 1, 0);
    assertOutputStates(evaluateCondition("false & local2"), 0, 1, 0);
    assertOutputStates(evaluateCondition("true & false"), 0, 1, 0);
    assertOutputStates(evaluateCondition("true & true"), 1, 0, 0);
    assertOutputStates(evaluateCondition("true & local2"), 1, 1, 0);
    assertOutputStates(evaluateCondition("local1 & false"), 0, 2, 0);
    assertOutputStates(evaluateCondition("local1 & true"), 1, 1, 0);
    assertOutputStates(evaluateCondition("local1 & local2"), 1, 2, 0);
  }

