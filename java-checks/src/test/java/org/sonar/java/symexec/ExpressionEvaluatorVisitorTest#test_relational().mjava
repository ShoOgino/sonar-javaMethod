  @Test
  public void test_relational() {
    ExecutionState state = new ExecutionState();

    ExpressionEvaluatorVisitor greaterThanVisitor = evaluateRelationalOperator(state, Tree.Kind.GREATER_THAN);
    validateState(greaterThanVisitor.falseStates.get(0), SymbolicRelation.LESS_EQUAL, SymbolicRelation.GREATER_EQUAL);
    validateState(greaterThanVisitor.trueStates.get(0), SymbolicRelation.GREATER_THAN, SymbolicRelation.LESS_THAN);

    ExpressionEvaluatorVisitor greaterEqualVisitor = evaluateRelationalOperator(state, Tree.Kind.GREATER_THAN_OR_EQUAL_TO);
    validateState(greaterEqualVisitor.falseStates.get(0), SymbolicRelation.LESS_THAN, SymbolicRelation.GREATER_THAN);
    validateState(greaterEqualVisitor.trueStates.get(0), SymbolicRelation.GREATER_EQUAL, SymbolicRelation.LESS_EQUAL);

    ExpressionEvaluatorVisitor equalToVisitor = evaluateRelationalOperator(state, Tree.Kind.EQUAL_TO);
    validateState(equalToVisitor.falseStates.get(0), SymbolicRelation.NOT_EQUAL, SymbolicRelation.NOT_EQUAL);
    validateState(equalToVisitor.trueStates.get(0), SymbolicRelation.EQUAL_TO, SymbolicRelation.EQUAL_TO);

    ExpressionEvaluatorVisitor lessThanVisitor = evaluateRelationalOperator(state, Tree.Kind.LESS_THAN);
    validateState(lessThanVisitor.falseStates.get(0), SymbolicRelation.GREATER_EQUAL, SymbolicRelation.LESS_EQUAL);
    validateState(lessThanVisitor.trueStates.get(0), SymbolicRelation.LESS_THAN, SymbolicRelation.GREATER_THAN);

    ExpressionEvaluatorVisitor lessEqualVisitor = evaluateRelationalOperator(state, Tree.Kind.LESS_THAN_OR_EQUAL_TO);
    validateState(lessEqualVisitor.falseStates.get(0), SymbolicRelation.GREATER_THAN, SymbolicRelation.LESS_THAN);
    validateState(lessEqualVisitor.trueStates.get(0), SymbolicRelation.LESS_EQUAL, SymbolicRelation.GREATER_EQUAL);

    ExpressionEvaluatorVisitor notEqualVisitor = evaluateRelationalOperator(state, Tree.Kind.NOT_EQUAL_TO);
    validateState(notEqualVisitor.falseStates.get(0), SymbolicRelation.EQUAL_TO, SymbolicRelation.EQUAL_TO);
    validateState(notEqualVisitor.trueStates.get(0), SymbolicRelation.NOT_EQUAL, SymbolicRelation.NOT_EQUAL);

    ExpressionEvaluatorVisitor fieldFieldVisitor = new ExpressionEvaluatorVisitor(state, new BinaryExpressionTreeImpl(Tree.Kind.NOT_EQUAL_TO, FIELD, TOKEN, FIELD));
    validateUnknownResult(state, fieldFieldVisitor);

    ExpressionEvaluatorVisitor fieldLocalVisitor = new ExpressionEvaluatorVisitor(state, new BinaryExpressionTreeImpl(Tree.Kind.NOT_EQUAL_TO, FIELD, TOKEN, VARIABLE2));
    validateUnknownResult(state, fieldLocalVisitor);

    ExpressionEvaluatorVisitor localFieldVisitor = new ExpressionEvaluatorVisitor(state, new BinaryExpressionTreeImpl(Tree.Kind.NOT_EQUAL_TO, VARIABLE1, TOKEN, FIELD));
    validateUnknownResult(state, localFieldVisitor);

    ExpressionEvaluatorVisitor nestedFalseVisitor = new ExpressionEvaluatorVisitor(notEqualVisitor.falseStates.get(0),
      new BinaryExpressionTreeImpl(Tree.Kind.NOT_EQUAL_TO, VARIABLE1, TOKEN, VARIABLE2));
    validateState(nestedFalseVisitor.falseStates.get(0), SymbolicRelation.EQUAL_TO, SymbolicRelation.EQUAL_TO);
    assertThat(nestedFalseVisitor.trueStates).isEmpty();

    ExpressionEvaluatorVisitor nestedTrueVisitor = new ExpressionEvaluatorVisitor(notEqualVisitor.trueStates.get(0),
      new BinaryExpressionTreeImpl(Tree.Kind.NOT_EQUAL_TO, VARIABLE1, TOKEN, VARIABLE2));
    assertThat(nestedTrueVisitor.falseStates).isEmpty();
    validateState(nestedTrueVisitor.trueStates.get(0), SymbolicRelation.NOT_EQUAL, SymbolicRelation.NOT_EQUAL);

    // comparison must not fail if either or both operands are not identifiers.
    new ExpressionEvaluatorVisitor(state, new BinaryExpressionTreeImpl(Tree.Kind.EQUAL_TO, LITERAL_NULL, TOKEN, LITERAL_NULL));
  }

