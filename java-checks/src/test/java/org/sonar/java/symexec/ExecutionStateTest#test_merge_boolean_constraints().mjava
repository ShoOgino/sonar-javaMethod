  @Test
  public void test_merge_boolean_constraints() {
    Symbol.VariableSymbol booleanFalse = mockLocalVariable();
    Symbol.VariableSymbol booleanTrue = mockLocalVariable();
    Symbol.VariableSymbol booleanBoth = mockLocalVariable();

    ExecutionState parentState = new ExecutionState();
    ExecutionState state = new ExecutionState(parentState);
    ExecutionState childState1 = new ExecutionState(state);
    ExecutionState childState21 = new ExecutionState(state);
    ExecutionState childState22 = new ExecutionState(new ExecutionState(childState21));
    ExecutionState childState31 = new ExecutionState(state);
    ExecutionState childState32 = new ExecutionState(new ExecutionState(childState31));

    // constraint must not be set if it can be retrieved from the parent state.
    parentState.setBooleanConstraint(booleanFalse, FALSE);
    childState1.setBooleanConstraint(booleanFalse, FALSE);
    childState21.setBooleanConstraint(booleanFalse, FALSE);
    childState32.setBooleanConstraint(booleanFalse, FALSE);
    state.mergeConstraintsAndRelations(ImmutableList.of(childState1, childState22, childState32));
    assertThat(state.constraints.get(booleanFalse)).isNull();
    assertThat(state.getBooleanConstraint(booleanFalse)).isSameAs(FALSE);

    // constraint must shadow constraint in parent state.
    childState1.setBooleanConstraint(booleanTrue, TRUE);
    childState21.setBooleanConstraint(booleanTrue, TRUE);
    childState32.setBooleanConstraint(booleanTrue, TRUE);
    state.mergeConstraintsAndRelations(ImmutableList.of(childState1, childState22, childState32));
    assertThat(state.getBooleanConstraint(booleanTrue)).isSameAs(TRUE);

    // union of different value must yield UNKNOWN
    childState1.setBooleanConstraint(booleanBoth, FALSE);
    childState21.setBooleanConstraint(booleanBoth, TRUE);
    childState32.setBooleanConstraint(booleanBoth, TRUE);
    state.mergeConstraintsAndRelations(ImmutableList.of(childState1, childState22, childState32));
    assertThat(state.getBooleanConstraint(booleanBoth)).isSameAs(UNKNOWN);
  }

