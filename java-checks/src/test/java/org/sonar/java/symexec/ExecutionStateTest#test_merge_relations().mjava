  @Test
  public void test_merge_relations() {
    SymbolicValue symbol11 = new SymbolicValue.SymbolicVariableValue(mockLocalVariable());
    SymbolicValue symbol12 = new SymbolicValue.SymbolicVariableValue(mockLocalVariable());

    ExecutionState parentState = new ExecutionState();
    ExecutionState state = new ExecutionState(parentState);
    ExecutionState childState1 = new ExecutionState(state);
    ExecutionState childState21 = new ExecutionState(state);
    ExecutionState childState22 = new ExecutionState(new ExecutionState(childState21));
    ExecutionState childState31 = new ExecutionState(state);
    ExecutionState childState32 = new ExecutionState(new ExecutionState(childState31));

    parentState.setRelation(symbol11, SymbolicRelation.GREATER_THAN, symbol12);
    childState1.setRelation(symbol11, SymbolicRelation.GREATER_THAN, symbol12);
    childState21.setRelation(symbol11, SymbolicRelation.GREATER_THAN, symbol12);
    childState32.setRelation(symbol11, SymbolicRelation.GREATER_THAN, symbol12);
    state.mergeConstraintsAndRelations(ImmutableList.of(childState1, childState22, childState32));
    assertThat(state.relations.get(symbol11, symbol12)).isNull();
    assertThat(state.getRelation(symbol11, symbol12)).isEqualTo(SymbolicRelation.GREATER_THAN);
    assertThat(state.relations.get(symbol12, symbol11)).isNull();
    assertThat(state.getRelation(symbol12, symbol11)).isEqualTo(SymbolicRelation.LESS_THAN);

    parentState.setRelation(symbol11, SymbolicRelation.UNKNOWN, symbol12);
    childState1.setRelation(symbol11, SymbolicRelation.LESS_THAN, symbol12);
    childState21.setRelation(symbol11, SymbolicRelation.LESS_EQUAL, symbol12);
    childState32.setRelation(symbol11, SymbolicRelation.LESS_EQUAL, symbol12);
    state.mergeConstraintsAndRelations(ImmutableList.of(childState1, childState22, childState32));
    assertThat(state.getRelation(symbol11, symbol12)).isEqualTo(SymbolicRelation.LESS_EQUAL);
    assertThat(state.getRelation(symbol12, symbol11)).isEqualTo(SymbolicRelation.GREATER_EQUAL);
  }

