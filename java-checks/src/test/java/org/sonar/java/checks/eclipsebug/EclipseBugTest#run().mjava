  private void run() {
    // contains a "javax" package, but any empty directory containing a "javax" empty folder would do it
    List<File> classPath = Collections.singletonList(new File("target/test-jars/jsr305-1.3.9.jar"));
    for (int i = 0; i < 1000; i++) {
      i++;
      System.out.println("Iteration " + i);
      String source = "" +
        "class Example {\n" +
        "  void example() {\n" +
        "    System.out.println(javax.naming.Context.class);\n" + // sometimes leads to "The type javax.naming.Context is not accessible"
        "  }\n" +
        "}\n";

      ASTParser astParser = ASTParser.newParser(AST.JLS12);

      Map<String, String> options = new HashMap<>(JavaCore.getDefaultOptions());
      String version = "12";
      options.put(JavaCore.COMPILER_COMPLIANCE, version);
      options.put(JavaCore.COMPILER_SOURCE, version);
      options.put(JavaCore.COMPILER_RELEASE, version);
      options.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, "enabled");
      astParser.setCompilerOptions(options);

      astParser.setEnvironment(
        classPath.stream().map(File::getAbsolutePath).toArray(String[]::new),
        new String[] {},
        new String[] {},
        true);
      astParser.setUnitName("Example.java");
      astParser.setResolveBindings(true);
      astParser.setBindingsRecovery(true);

      char[] sourceChars = source.toCharArray();
      astParser.setSource(sourceChars);

      CompilationUnit astNode = (CompilationUnit) astParser.createAST(null);

      IProblem[] problems = astNode.getProblems();
      if (problems.length > 0) {
        String message0 = problems[0].getMessage();
        System.err.println(message0);
        throw new IllegalStateException(message0);
      }
    }
  }

