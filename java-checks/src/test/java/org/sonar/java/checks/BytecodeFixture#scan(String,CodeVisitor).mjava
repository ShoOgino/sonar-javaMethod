  public static SourceFile scan(String target, CodeVisitor visitor) {
    final File baseDir = new File("src/test/java/");
    File file = new File(baseDir, "org/sonar/java/checks/targets/" + target + ".java");

    File bytecodeFile = new File("target/test-classes/");

    if (!file.isFile()) {
      throw new IllegalArgumentException("File '" + file.getName() + "' not found.");
    }
    SensorContext sensorContext = mock(SensorContext.class);
    when(sensorContext.getResource(Matchers.any(org.sonar.api.resources.File.class))).thenAnswer(new Answer<org.sonar.api.resources.File>() {
      @Override
      public org.sonar.api.resources.File answer(InvocationOnMock invocation) throws Throwable {
        org.sonar.api.resources.File response = (org.sonar.api.resources.File) invocation.getArguments()[0];
        response.setEffectiveKey("");
        return response;
      }
    });
    Project project = mock(Project.class);
    ProjectFileSystem pfs = mock(ProjectFileSystem.class);
    when(project.getFileSystem()).thenReturn(pfs);
    when(pfs.getBasedir()).thenReturn(baseDir);
    DefaultJavaResourceLocator javaResourceLocator = new DefaultJavaResourceLocator(project, null, new SuppressWarningsFilter());
    javaResourceLocator.setSensorContext(sensorContext);
    JavaSquid javaSquid = new JavaSquid(new JavaConfiguration(Charset.forName("UTF-8")), javaResourceLocator, visitor);
    javaSquid.scan(Collections.singleton(file), Collections.<File>emptyList(), Collections.singleton(bytecodeFile));

    Collection<SourceCode> sources = javaSquid.getIndex().search(new QueryByType(SourceFile.class));
    if (sources.size() != 1) {
      throw new IllegalStateException("Only one SourceFile was expected whereas " + sources.size() + " has been returned.");
    }
    return (SourceFile) sources.iterator().next();
  }

