  private void checkIssues(SourceCode sourceCode) {
    if (expectNoIssues) {
      assertNoIssues(sourceCode);
    } else if (StringUtils.isNotEmpty(expectFileIssue)) {
      assertSingleIssue(sourceCode);
    } else {
      Preconditions.checkState(sourceCode.hasCheckMessages(), "At least one issue expected");
      List<Integer> unexpectedLines = Lists.newLinkedList();
      for (CheckMessage checkMessage : sourceCode.getCheckMessages()) {
        int line = checkMessage.getLine();
        if (!expected.containsKey(line)) {
          unexpectedLines.add(line);
        } else {
          List<String> list = expected.get(line);
          String expectedMessage = list.remove(list.size() - 1);
          if (expectedMessage != null) {
            assertThat(checkMessage.getText(Locale.US)).isEqualTo(expectedMessage);
          }
        }
      }
      if (!expected.isEmpty() || !unexpectedLines.isEmpty()) {
        Collections.sort(unexpectedLines);
        String expectedMsg = !expected.isEmpty() ? "Expected " + expected : "";
        String unexpectedMsg = !unexpectedLines.isEmpty() ? (expectedMsg.isEmpty() ? "" : ", ") + "Unexpected at " + unexpectedLines : "";
        throw Fail.fail(expectedMsg + unexpectedMsg);
      }
    }

  }

