  @Test
  public void isMatching_match_first_time_with_full_match() {
    Token token1 = mockToken("token1");
    Token token2 = mockToken("token2");
    Token token3 = mockToken("token3");

    Comparator<Token> comparator = mock(Comparator.class);
    when(comparator.compare(Mockito.any(Token.class), Mockito.any(Token.class))).thenReturn(-1);
    when(comparator.compare(token2, token2)).thenReturn(0);

    CommonPatternMatcher nextCommonPatternMatcher = mock(CommonPatternMatcher.class);
    when(nextCommonPatternMatcher.getTokensToMatch()).thenReturn(Lists.newArrayList(token2));
    when(nextCommonPatternMatcher.getComparator()).thenReturn(comparator);
    when(nextCommonPatternMatcher.isMatching(Lists.newArrayList(token2, token3, token2))).thenReturn(true);

    Rule rule = mock(Rule.class);

    PrefixParser prefixParser = mock(PrefixParser.class);
    when(prefixParser.parse(rule, Lists.newArrayList(token1))).thenReturn(PrefixParseResult.FULL_MATCH);

    List<Token> tokens = Lists.newArrayList(token1, token2, token3, token2);

    assertThat(new VaryingPatternMatcher(nextCommonPatternMatcher, prefixParser, rule).isMatching(tokens)).isEqualTo(true);

    verify(prefixParser).parse(rule, Lists.newArrayList(token1));
    verify(comparator).compare(token1, token2);
    verify(comparator).compare(token2, token2);
    verify(nextCommonPatternMatcher).isMatching(Lists.newArrayList(token2, token3, token2));
  }

