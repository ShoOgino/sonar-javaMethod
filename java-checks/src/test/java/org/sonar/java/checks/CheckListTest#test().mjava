  /**
   * Enforces that each check has test, name and description.
   */
  @Test
  public void test() {
    List<Class> checks = CheckList.getChecks();
    for (Class cls : checks) {
      String testName = '/' + cls.getName().replace('.', '/') + "Test.class";
      assertThat(getClass().getResource(testName))
        .overridingErrorMessage("No test for " + cls.getSimpleName())
        .isNotNull();
    }

    Set<String> keys = Sets.newHashSet();
    Set<String> names = Sets.newHashSet();
    List<Rule> rules = new AnnotationRuleParser().parse("repositoryKey", checks);
    for (Rule rule : rules) {
      assertThat(keys).as("Duplicate key " + rule.getKey()).excludes(rule.getKey());
      assertThat(names).as("Duplicate name "+rule.getKey()+" : " + rule.getName()).excludes(rule.getName());
      keys.add(rule.getKey());
      names.add(rule.getName());

      assertThat(getClass().getResource("/org/sonar/l10n/java/rules/" + CheckList.REPOSITORY_KEY + "/" + rule.getKey() + ".html"))
        .overridingErrorMessage("No description for " + rule.getKey())
        .isNotNull();

      assertThat(rule.getDescription())
        .overridingErrorMessage("Description of " + rule.getKey() + " should be in separate file")
        .isNull();

      for (RuleParam param : rule.getParams()) {
        assertThat(param.getDescription()).overridingErrorMessage(rule.getKey() +" missing description for param "+ param.getKey()).isNotEmpty();
      }
    }
  }

