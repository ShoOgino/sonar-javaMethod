  @Test
  void consecutive_and_subsequent_method_invocation() {
    List<MethodInvocationTree> methodInvocationList = new ArrayList<>();
    parseMethod("class A { void m(){ this.a1.a2.toString().toUpperCase().length(); int x = (getClass()).getMethods().length; } A a1; A a2; }")
      .block()
      .accept(new BaseTreeVisitor() {
        @Override
        public void visitMethodInvocation(MethodInvocationTree tree) {
          super.visitMethodInvocation(tree);
          methodInvocationList.add(tree);
        }
      });

    assertThat(methodInvocationList).hasSize(5);
    MethodInvocationTree toStringMethod = methodInvocationList.get(0);
    MethodInvocationTree toUpperCaseMethod = methodInvocationList.get(1);
    MethodInvocationTree lengthMethod = methodInvocationList.get(2);
    MethodInvocationTree getClassMethod = methodInvocationList.get(3);
    MethodInvocationTree getMethodsMethod = methodInvocationList.get(4);

    assertThat(toStringMethod.symbol().name()).isEqualTo("toString");
    assertThat(toUpperCaseMethod.symbol().name()).isEqualTo("toUpperCase");
    assertThat(lengthMethod.symbol().name()).isEqualTo("length");
    assertThat(getClassMethod.symbol().name()).isEqualTo("getClass");
    assertThat(getMethodsMethod.symbol().name()).isEqualTo("getMethods");

    MemberSelectExpressionTree thisA1A2 = (MemberSelectExpressionTree) ((MemberSelectExpressionTree) toStringMethod.methodSelect()).expression();
    MemberSelectExpressionTree thisA1 = (MemberSelectExpressionTree) thisA1A2.expression();
    IdentifierTree a2 = thisA1A2.identifier();
    IdentifierTree a1 = thisA1.identifier();
    IdentifierTree keywordThis = (IdentifierTree) thisA1.expression();

    assertThat(MethodTreeUtils.consecutiveMethodInvocation(keywordThis)).isEmpty();
    assertThat(MethodTreeUtils.consecutiveMethodInvocation(a1)).isEmpty();
    assertThat(MethodTreeUtils.consecutiveMethodInvocation(a2)).containsSame(toStringMethod);

    assertThat(MethodTreeUtils.consecutiveMethodInvocation(toStringMethod)).containsSame(toUpperCaseMethod);
    assertThat(MethodTreeUtils.consecutiveMethodInvocation(toUpperCaseMethod)).containsSame(lengthMethod);
    assertThat(MethodTreeUtils.consecutiveMethodInvocation(lengthMethod)).isEmpty();
    assertThat(MethodTreeUtils.consecutiveMethodInvocation(getClassMethod)).containsSame(getMethodsMethod);
    assertThat(MethodTreeUtils.consecutiveMethodInvocation(getMethodsMethod)).isEmpty();

    MethodMatchers toUpperCaseMethodMatchers = MethodMatchers.create()
      .ofTypes("java.lang.String").names("toUpperCase").addWithoutParametersMatcher().build();
    MethodMatchers lengthMethodMatchers = MethodMatchers.create()
      .ofTypes("java.lang.String").names("length").addWithoutParametersMatcher().build();

    assertThat(MethodTreeUtils.subsequentMethodInvocation(toStringMethod, lengthMethodMatchers)).containsSame(lengthMethod);
    assertThat(MethodTreeUtils.subsequentMethodInvocation(toStringMethod, toUpperCaseMethodMatchers)).containsSame(toUpperCaseMethod);
    assertThat(MethodTreeUtils.subsequentMethodInvocation(toUpperCaseMethod, lengthMethodMatchers)).containsSame(lengthMethod);
    assertThat(MethodTreeUtils.subsequentMethodInvocation(toUpperCaseMethod, toUpperCaseMethodMatchers)).isEmpty();
    assertThat(MethodTreeUtils.subsequentMethodInvocation(lengthMethod, toUpperCaseMethodMatchers)).isEmpty();
    assertThat(MethodTreeUtils.subsequentMethodInvocation(lengthMethod, lengthMethodMatchers)).isEmpty();

    // coverage
    assertThat(MethodTreeUtils.hasKind(null, Tree.Kind.METHOD_INVOCATION)).isFalse();
    assertThat(MethodTreeUtils.consecutiveMethodInvocation(((MemberSelectExpressionTree) toStringMethod.parent()).identifier())).isEmpty();
  }

