  @Test
  void intersects_dot() {
    assertIntersects(".", "a", false).isTrue();
    assertIntersects("a", ".", true).isTrue();
    assertIntersects(".", "[a-z]", false).isTrue();
    assertIntersects("[a-z]+", ".+", false).isTrue();

    // by default [\r\n\u0085\u2028\u2029] excluded from DotTree
    assertIntersects(".", "[\r\n\u0085\u2028\u2029]", false).isFalse();
    assertIntersects(".+", "\b\f \t", false).isTrue();

    // only \n excluded when UNIX_LINES is set
    assertIntersects(".", "\n", false, Pattern.UNIX_LINES).isFalse();
    assertIntersects("(?d).", "\n", false).isFalse();
    assertIntersects(".+", "\b\f \t\r\u0085\u2028\u2029", false, Pattern.UNIX_LINES).isTrue();
    assertIntersects("(?d).+", "\b\f \t\r\u0085\u2028\u2029", false).isTrue();

    // no exclusion and UNIX_LINES is ignored when DOTALL is set
    assertIntersects(".", "\n", false, Pattern.DOTALL).isTrue();
    assertIntersects(".", "\n", false, Pattern.UNIX_LINES|Pattern.DOTALL).isTrue();
    assertIntersects("(?d).", "\n", false, Pattern.DOTALL).isTrue();
    assertIntersects("(?s).", "\n", false).isTrue();
    assertIntersects("(?ds).", "\n", false).isTrue();
    assertIntersects(".+", "\b\f \t\r\n\u0085\u2028\u2029", false, Pattern.DOTALL).isTrue();
  }

