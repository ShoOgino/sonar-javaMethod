  public static List<AnalyzerMessage> scan(String target, final BytecodeVisitor visitor) {
    final File file = new File(target);

    File bytecodeFile = new File("target/test-classes/");

    if (!file.isFile()) {
      throw new IllegalArgumentException("File '" + file.getName() + "' not found.");
    }
    SensorContext sensorContext = mock(SensorContext.class);
    when(sensorContext.getResource(Matchers.any(InputPath.class))).thenReturn(org.sonar.api.resources.File.create(file.getPath()));
    DefaultFileSystem fs = new DefaultFileSystem(null);
    fs.add(new DefaultInputFile(file.getPath()));
    DefaultJavaResourceLocator javaResourceLocator = new DefaultJavaResourceLocator(fs, null, new SuppressWarningsFilter());
    javaResourceLocator.setSensorContext(sensorContext);
    final List<AnalyzerMessage> analyzerMessages = new ArrayList<>();
    BytecodeVisitor visitorWithFakeContext = new ByteCodeVisitorWithFakeContext(visitor, file, javaResourceLocator, analyzerMessages);
    JavaSquid javaSquid = new JavaSquid(new JavaConfiguration(Charset.forName("UTF-8")), null, null, javaResourceLocator, visitorWithFakeContext);
    javaSquid.scan(Collections.singleton(file), Collections.<File>emptyList(), Collections.singleton(bytecodeFile));

    Collection<SourceCode> sources = javaSquid.getIndex().search(new QueryByType(SourceFile.class));
    if (sources.size() != 1) {
      throw new IllegalStateException("Only one SourceFile was expected whereas " + sources.size() + " has been returned.");
    }
    return analyzerMessages;
  }

