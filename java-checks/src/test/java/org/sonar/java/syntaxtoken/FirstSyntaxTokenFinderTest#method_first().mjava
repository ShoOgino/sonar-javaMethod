  @Test
  public void method_first() {
    CompilationUnitTree compilationUnit = getCompilationUnit("class Test { void foo() {} }");
    SyntaxToken firstToken = getFirstSyntaxToken(getFirstMethod(compilationUnit));
    assertThat(firstToken.text()).isEqualTo("void");

    compilationUnit = getCompilationUnit("class Test { private void foo() {} }");
    firstToken = getFirstSyntaxToken(getFirstMethod(compilationUnit));
    assertThat(firstToken.text()).isEqualTo("private");

    compilationUnit = getCompilationUnit("class Test { Test() {} }");
    firstToken = getFirstSyntaxToken(getFirstMethod(compilationUnit));
    assertThat(firstToken.text()).isEqualTo("Test");

    compilationUnit = getCompilationUnit("class Test { <T> void Test(T t) {} }");
    firstToken = getFirstSyntaxToken(getFirstMethod(compilationUnit));
    assertThat(firstToken.text()).isEqualTo("<");

    compilationUnit = getCompilationUnit("class Test<T> { T Test() {} }");
    firstToken = getFirstSyntaxToken(getFirstMethod(compilationUnit));
    assertThat(firstToken.text()).isEqualTo("T");
  }

