  private Table<Symbol.VariableSymbol, Symbol.VariableSymbol, SymbolicRelation> findCommonRelationSymbols(Iterable<ExecutionState> states) {
    // stored value is completely meaningless since only the pair of symbols is relevant, but HashBasedTable does not accept null.
    Table<Symbol.VariableSymbol, Symbol.VariableSymbol, SymbolicRelation> result = HashBasedTable.create();
    for (ExecutionState state : states) {
      for (ExecutionState current = state; !current.equals(this); current = current.parentState) {
        for (Map.Entry<Symbol.VariableSymbol, Map<Symbol.VariableSymbol, SymbolicRelation>> leftEntry : current.relations.rowMap().entrySet()) {
          for (Symbol.VariableSymbol rightSymbol : leftEntry.getValue().keySet()) {
            result.put(leftEntry.getKey(), rightSymbol, UNKNOWN);
          }
        }
        for (Map.Entry<Symbol.VariableSymbol, Map<Symbol.VariableSymbol, SymbolicRelation>> rightEntry : current.relations.columnMap().entrySet()) {
          for (Symbol.VariableSymbol leftSymbol : rightEntry.getValue().keySet()) {
            result.put(leftSymbol, rightEntry.getKey(), UNKNOWN);
          }
        }
      }
    }
    return result;
  }

