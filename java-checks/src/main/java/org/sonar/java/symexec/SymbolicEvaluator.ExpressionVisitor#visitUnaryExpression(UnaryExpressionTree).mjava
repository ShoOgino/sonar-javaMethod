    @Override
    public final void visitUnaryExpression(UnaryExpressionTree tree) {
      super.visitUnaryExpression(tree);
      if (tree.is(Tree.Kind.LOGICAL_COMPLEMENT)) {
        currentResult = currentResult.negate();
      } else {
        if (tree.is(Tree.Kind.POSTFIX_DECREMENT, Tree.Kind.POSTFIX_INCREMENT, Tree.Kind.PREFIX_DECREMENT, Tree.Kind.PREFIX_INCREMENT)) {
          Symbol.VariableSymbol symbol = extractVariableSymbol(tree.expression());
          if (symbol != null) {
            currentState.invalidateRelationsOnSymbol(symbol);
          }
        }
        currentResult = SymbolicBooleanConstraint.UNKNOWN;
      }
    }

