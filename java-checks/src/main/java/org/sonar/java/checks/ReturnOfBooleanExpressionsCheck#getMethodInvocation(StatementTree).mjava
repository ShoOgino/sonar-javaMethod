  private static Optional<MethodInvocationTree> getMethodInvocation(@Nullable StatementTree statementTree) {
    if (statementTree == null) {
      return Optional.empty();
    }
    Tree newTree = statementTree;
    if (newTree.is(Tree.Kind.BLOCK)) {
      List<StatementTree> body = ((BlockTree) newTree).body();
      if (body.size() != 1) {
        return Optional.empty();
      }
      newTree = body.get(0);
    }
    ExpressionTree expressionTree = null;
    if (newTree.is(Tree.Kind.RETURN_STATEMENT)) {
      expressionTree = ((ReturnStatementTree) newTree).expression();
    } else if (newTree.is(Tree.Kind.EXPRESSION_STATEMENT)) {
      expressionTree = ((ExpressionStatementTree) newTree).expression();
    }
    if (expressionTree != null) {
      expressionTree = ExpressionUtils.skipParentheses(expressionTree);
      if (expressionTree.is(Kind.METHOD_INVOCATION)) {
        return Optional.of((MethodInvocationTree) expressionTree);
      }
    }
    return Optional.empty();
  }

