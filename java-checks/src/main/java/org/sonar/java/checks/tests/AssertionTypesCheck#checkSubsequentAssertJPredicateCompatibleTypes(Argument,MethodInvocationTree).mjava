  private void checkSubsequentAssertJPredicateCompatibleTypes(Argument actual, MethodInvocationTree previousMethod) {
    MethodTreeUtils.consecutiveMethodInvocation(previousMethod)
      .ifPresent(mit -> {
        boolean checkFollowingMethod = true;
        if (ASSERTJ_NULL_AND_NOT_NULL.matches(mit)) {
          checkNullableAssertion(ExpressionUtils.methodName(mit), actual);
        } else if (ASSERTJ_POSITIVE_PREDICATES.matches(mit)) {
          checkCompatibleTypes(actual, new Argument(mit, 0), Option.ACCEPT_DISSIMILAR_INTERFACE);
        } else if (ASSERTJ_NEGATIVE_PREDICATES.matches(mit)) {
          checkCompatibleTypes(actual, new Argument(mit, 0), Option.REJECT_DISSIMILAR_INTERFACE);
        } else if (!ASSERTJ_CONFIGURATION.matches(mit)) {
          // stop checking when methods like: extracting, using*, filtered*
          checkFollowingMethod = false;
        }
        if (checkFollowingMethod) {
          checkSubsequentAssertJPredicateCompatibleTypes(actual, mit);
        }
      });
  }

