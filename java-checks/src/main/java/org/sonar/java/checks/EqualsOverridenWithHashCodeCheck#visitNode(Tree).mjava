  @Override
  public void visitNode(Tree tree) {
    List<MethodTree> methods = ((ClassTree) tree).members().stream()
      .filter(member -> member.is(Tree.Kind.METHOD))
      .map(MethodTree.class::cast)
      .collect(Collectors.toList());

    Optional<MethodTree> equalsMethod = methods.stream().filter(EqualsOverridenWithHashCodeCheck::isEquals).findAny();
    Optional<MethodTree> hashCodeMethod = methods.stream().filter(EqualsOverridenWithHashCodeCheck::isHashCode).findAny();

    if (equalsMethod.isPresent() && !hashCodeMethod.isPresent()) {
      reportIssue(equalsMethod.get().simpleName(), getMessage(EQUALS, HASHCODE));
    } else if (hashCodeMethod.isPresent() && !equalsMethod.isPresent()) {
      reportIssue(hashCodeMethod.get().simpleName(), getMessage(HASHCODE, EQUALS));
    }
  }

