  private void checkForTrivialWrapper(MethodTree wrapper) {
    BlockTree block = wrapper.block();
    if (block == null) {
      // abstract methods
      return;
    }
    List<StatementTree> body = block.body();
    if (body.size() != 1) {
      // not trivial - empty body or more than one statement
      return;
    }
    MethodInvocationTree mit = getMethodInvocation(body.get(0));
    if (!isOnlyUsingWrapperParametersInMethodInvocation(mit, wrapper.symbol())) {
      // not trivial - operation on parameters
      return;
    }
    MethodTree methodDeclaration = (MethodTree) mit.symbol().declaration();
    if (isNativeMethod(methodDeclaration)) {
      reportIssue(wrapper.simpleName(),
        "Make this wrapper for native method '" + methodDeclaration.simpleName().name() + "' less trivial.",
        Collections.singletonList(new JavaFileScannerContext.Location("", methodDeclaration)),
        null);
    }
  }

