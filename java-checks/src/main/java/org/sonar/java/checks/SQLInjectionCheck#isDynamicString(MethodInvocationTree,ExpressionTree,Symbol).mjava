  private boolean isDynamicString(MethodInvocationTree methodTree, ExpressionTree arg, @Nullable Symbol currentlyChecking) {
    if (arg.is(Tree.Kind.IDENTIFIER)) {
      Symbol symbol = getSemanticModel().getReference((IdentifierTree) arg);
      if(symbol.equals(currentlyChecking)) {
        return false;
      }
      if (symbol.isStatic() && symbol.isFinal()) {
        return false;
      }

      Tree enclosingBlockTree = getSemanticModel().getTree(getSemanticModel().getEnv(methodTree));
      Tree argEnclosingDeclarationTree = getSemanticModel().getTree(getSemanticModel().getEnv(symbol));
      if(enclosingBlockTree.equals(argEnclosingDeclarationTree)) {
        //symbol is a local variable, check it is not a dynamic string.

        //Check declaration
        VariableTree declaration = (VariableTree) getSemanticModel().getTree(symbol);
        if(declaration.initializer() != null && isDynamicString(methodTree, declaration.initializer())) {
          return true;
        }
        //check usages by revisiting the enclosing tree.
        Collection<IdentifierTree> usages = getSemanticModel().getUsages(symbol);
        LocalVariableDynamicStringVisitor visitor = new LocalVariableDynamicStringVisitor(symbol, usages, methodTree);
        argEnclosingDeclarationTree.accept(visitor);
        return visitor.dynamicString;
      }
      //arg is not a local variable nor a constant, so it is a parameter
      parameterName = ((IdentifierTree) arg).name();
      return true;
    } else if (arg.is(Tree.Kind.PLUS)) {
      BinaryExpressionTree binaryArg = (BinaryExpressionTree) arg;
      return isDynamicString(methodTree, binaryArg.rightOperand(), currentlyChecking) || isDynamicString(methodTree, binaryArg.leftOperand(), currentlyChecking);

    } else if(arg.is(Tree.Kind.METHOD_INVOCATION)) {
      return false;
    }
    return !arg.is(Tree.Kind.STRING_LITERAL);
  }

