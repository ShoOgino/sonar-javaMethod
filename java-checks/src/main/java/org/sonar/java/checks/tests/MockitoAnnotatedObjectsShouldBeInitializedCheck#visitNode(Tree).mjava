  @Override
  public void visitNode(Tree tree) {
    ClassTree testClass = (ClassTree) tree;
    if (coveredByExtendWithAnnotation.contains(testClass)) {
      return;
    }

    if (hasAnnotation(testClass, EXTEND_WITH_ANNOTATION)) {
      List<ClassTree> classes = getInnerClassesCoveredByAnnotation(testClass);
      coveredByExtendWithAnnotation.addAll(classes);
      return;
    }

    List<VariableTree> mocksToInitialize = testClass.members().stream()
      .filter(MockitoAnnotatedObjectsShouldBeInitializedCheck::isFieldWithTargetAnnotation)
      .map(VariableTree.class::cast)
      .collect(Collectors.toList());

    if (!mocksToInitialize.isEmpty() && !mocksAreProperlyInitialized(testClass)) {
      AnnotationTree firstAnnotation = mocksToInitialize.get(0).modifiers().annotations().get(0);
      reportIssue(firstAnnotation, MESSAGE);
    }
  }

