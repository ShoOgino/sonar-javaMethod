  private static Multimap<Type, Type> getBaseTypeCaughtAfterSubtype(List<CatchTree> catches, Map<Type, Tree> typeToTypeTree) {
    Multimap<Type, Type> baseAfterSubtype = HashMultimap.create();
    List<Type> catchTypes = catches.stream()
      .flatMap(c -> {
        List<Type> types = new ArrayList<>();
        collectTypesFromTypeTree(c.parameter().type(), types, typeToTypeTree);
        return types.stream();
      })
      .filter(UnreachableCatchCheck::isChecked)
      .collect(Collectors.toList());

    for (int i = 0; i < catchTypes.size() - 1; i++) {
      Type topType = catchTypes.get(i);
      for (int j = i + 1; j < catchTypes.size(); j++) {
        Type bottomType = catchTypes.get(j);
        if (topType.isSubtypeOf(bottomType)) {
          baseAfterSubtype.put(bottomType, topType);
        }
      }
    }
    return baseAfterSubtype;
  }

