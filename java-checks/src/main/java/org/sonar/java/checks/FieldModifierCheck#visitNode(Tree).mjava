  @Override
  public void visitNode(Tree tree) {
    if (!hasSemantic()) {
      return;
    }
    ClassTree classTree = (ClassTree) tree;
    classTree.members().stream()
      .filter(FieldModifierCheck::isConsentWithCheck)
      .forEach(member -> {
        IdentifierTree simpleName = ((VariableTree) member).simpleName();
        reportIssue(simpleName, "Explicitly declare the visibility for \"" + simpleName.name() + "\".");
      });
  }

