  @Override
  public void visitNode(Tree tree) {
    if (!hasSemantic()) {
      return;
    }
    MethodTree methodTree = (MethodTree) tree;
    if (Boolean.TRUE.equals(((MethodTreeImpl) methodTree).isOverriding())) {
      return;
    }
    List<Symbol> booleanParameterSymbols = getBooleanParametersAsSymbol(methodTree.parameters());
    BlockTree blockTree = methodTree.block();

    if (isPublic(methodTree) && blockTree != null && !booleanParameterSymbols.isEmpty()) {
      for (Symbol variable : booleanParameterSymbols) {
        Collection<IdentifierTree> usages = variable.usages();
        if (usages.size() == 1) {
          blockTree.accept(new ConditionalStatementVisitor(variable.name(), Iterables.get(usages, 0), methodTree));
        }
      }
    }
  }

