  @Override
  protected List<MethodMatcher> getMethodInvocationMatchers() {
    return Arrays.asList(
      MethodMatcher.create().typeDefinition(JAVA_NIO_CHARSET).name("forName").parameters(JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(JAVA_LANG_STRING).name("getBytes").parameters(JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(JAVA_LANG_STRING).name("getBytes").parameters(JAVA_NIO_CHARSET),
      MethodMatcher.create().typeDefinition(COMMONS_CODEC_CHARSETS).name("toCharset").parameters(JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_CHARSETS).name("toCharset").parameters(JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_FILEUTILS).name("readFileToString").parameters(JAVA_IO_FILE, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_FILEUTILS).name("readLines").parameters(JAVA_IO_FILE, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_FILEUTILS).name("write").parameters(JAVA_IO_FILE, JAVA_LANG_CHARSEQUENCE, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_FILEUTILS).name("write").parameters(JAVA_IO_FILE, JAVA_LANG_CHARSEQUENCE, JAVA_LANG_STRING, "boolean"),
      MethodMatcher.create().typeDefinition(COMMONS_IO_FILEUTILS).name("writeStringToFile").parameters(JAVA_IO_FILE, JAVA_LANG_STRING, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_FILEUTILS).name("writeStringToFile").parameters(JAVA_IO_FILE, JAVA_LANG_STRING, JAVA_LANG_STRING, "boolean"),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("copy").parameters(JAVA_IO_INPUTSTREAM, JAVA_IO_WRITER, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("copy").parameters(JAVA_IO_READER, JAVA_IO_OUTPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("lineIterator").parameters(JAVA_IO_INPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("readLines").parameters(JAVA_IO_INPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("toByteArray").parameters(JAVA_IO_READER, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("toCharArray").parameters(JAVA_IO_INPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("toInputStream").parameters(JAVA_LANG_CHARSEQUENCE, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("toInputStream").parameters(JAVA_LANG_STRING, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("toString").parameters("byte[]", JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("toString").parameters(JAVA_IO_INPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("toString").parameters(JAVA_NET_URI, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("toString").parameters(JAVA_NET_URL, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("write").parameters("byte[]", JAVA_IO_WRITER, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("write").parameters("char[]", JAVA_IO_OUTPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("write").parameters(JAVA_LANG_CHARSEQUENCE, JAVA_IO_OUTPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("write").parameters(JAVA_LANG_STRING, JAVA_IO_OUTPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("write").parameters(JAVA_LANG_STRINGBUFFER, JAVA_IO_OUTPUTSTREAM, JAVA_LANG_STRING),
      MethodMatcher.create().typeDefinition(COMMONS_IO_IOUTILS).name("writeLines").parameters(JAVA_UTIL_COLLECTION, JAVA_LANG_STRING, JAVA_IO_OUTPUTSTREAM, JAVA_LANG_STRING),
      constructor(JAVA_LANG_STRING).parameters("byte[]", JAVA_LANG_STRING),
      constructor(JAVA_LANG_STRING).parameters("byte[]", "int", "int", JAVA_LANG_STRING),
      constructor(JAVA_IO_INPUTSTREAMREADER).parameters(JAVA_IO_INPUTSTREAM, JAVA_LANG_STRING),
      constructor(JAVA_IO_OUTPUTSTREAMWRITER).parameters(JAVA_IO_OUTPUTSTREAM, JAVA_LANG_STRING),
      constructor(COMMONS_IO_CHARSEQUENCEINPUTSTREAM).parameters(JAVA_LANG_CHARSEQUENCE, JAVA_LANG_STRING),
      constructor(COMMONS_IO_CHARSEQUENCEINPUTSTREAM).parameters(JAVA_LANG_CHARSEQUENCE, JAVA_LANG_STRING, "int"),
      constructor(COMMONS_IO_READERINPUTSTREAM).parameters(JAVA_IO_READER, JAVA_LANG_STRING),
      constructor(COMMONS_IO_READERINPUTSTREAM).parameters(JAVA_IO_READER, JAVA_LANG_STRING, "int"),
      constructor(COMMONS_IO_REVERSEDLINESFILEREADER).parameters(JAVA_IO_FILE, "int", JAVA_LANG_STRING),
      constructor(COMMONS_IO_LOCKABLEFILEWRITER).parameters(JAVA_IO_FILE, JAVA_LANG_STRING),
      constructor(COMMONS_IO_LOCKABLEFILEWRITER).parameters(JAVA_IO_FILE, JAVA_LANG_STRING, "boolean", JAVA_LANG_STRING),
      constructor(COMMONS_IO_WRITEROUTPUTSTREAM).parameters(JAVA_IO_WRITER, JAVA_LANG_STRING),
      constructor(COMMONS_IO_WRITEROUTPUTSTREAM).parameters(JAVA_IO_WRITER, JAVA_LANG_STRING, "int", "boolean"),
      constructor(COMMONS_CODEC_HEX).parameters(JAVA_LANG_STRING),
      constructor(COMMONS_CODEC_QUOTEDPRINTABLECODEC).parameters(JAVA_LANG_STRING));
  }

