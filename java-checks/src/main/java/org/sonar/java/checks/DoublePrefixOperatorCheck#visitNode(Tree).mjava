  @Override
  public void visitNode(Tree tree) {
    UnaryExpressionTree exprTree = (UnaryExpressionTree) tree;
    if (alreadyReported(exprTree)) {
      return;
    }
    ExpressionTree expr = ExpressionUtils.skipParentheses(exprTree.expression());
    if (exprTree.is(expr.kind())) {
      UnaryExpressionTree child = (UnaryExpressionTree) expr;
      if (child.is(Tree.Kind.BITWISE_COMPLEMENT) && !ExpressionUtils.skipParentheses(child.expression()).is(Tree.Kind.BITWISE_COMPLEMENT)) {
        return;
      }
      prefixSet.add(child);
      reportIssue(exprTree.operatorToken(), child.operatorToken(), "Remove multiple operator prefixes.");
    }
  }

