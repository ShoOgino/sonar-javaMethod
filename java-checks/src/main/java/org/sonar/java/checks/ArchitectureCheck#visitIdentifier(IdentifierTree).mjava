  @Override
  public void visitIdentifier(IdentifierTree tree) {
    String shouldCheckId = shouldCheck.peekFirst();
    if (shouldCheckId == null) {
      return;
    }
    Symbol symbol = tree.symbol();
    if (!symbol.isUnknown() && !currentType.contains(symbol.owner())) {
      Type type = symbol.type();
      if (type != null) {
        String fullyQualifiedName = type.fullyQualifiedName();
        Set<String> currentIssues = issues.peekFirst();
        if (!currentIssues.contains(fullyQualifiedName) && WildcardPattern.match(getToPatterns(), fullyQualifiedName)) {
          context.reportIssue(this, tree, shouldCheckId + " must not use " + fullyQualifiedName);
          currentIssues.add(fullyQualifiedName);
        }
      }
    }
  }

