  /**
   * Check if a methodTree is overriden.
   *
   * @param methodTree the methodTree to check.
   * @return true if overriden, null if some super types are unknown.
   */
  private Boolean isOverriden(MethodTree methodTree) {
    if (isAnnotatedOverride(methodTree)) {
      return true;
    }
    Boolean result = null;
    if (hasSemantic()) {
      result = false;
      Symbol.MethodSymbol methodSymbol = ((MethodTreeImpl) methodTree).getSymbol();

      Symbol.TypeSymbol enclosingClass = methodSymbol.enclosingClass();
      if (StringUtils.isEmpty(enclosingClass.getName())) {
        //FIXME : SONARJAVA-645 : exclude methods within anonymous classes
        return null;
      }
      for (Type.ClassType type : superTypes(enclosingClass)) {
        Boolean overrideFromType = overrideMethodFromSymbol(methodSymbol, type);
        if (overrideFromType == null) {
          result = null;
        } else if (BooleanUtils.isTrue(overrideFromType)) {
          return true;
        }
      }
    }
    return result;
  }

