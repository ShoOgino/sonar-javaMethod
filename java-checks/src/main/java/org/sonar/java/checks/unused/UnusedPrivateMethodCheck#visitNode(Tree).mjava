  @Override
  public void visitNode(Tree tree) {
    if(!hasSemantic()) {
      return;
    }
    MethodTree node = (MethodTree) tree;
    Symbol symbol = node.symbol();
    if (node.modifiers().annotations().isEmpty() && symbol.isPrivate() && symbol.usages().isEmpty()) {
      if (node.is(Tree.Kind.CONSTRUCTOR)) {
        if (!node.parameters().isEmpty()) {
          reportIssue(node.simpleName(), "Remove this unused private \"" + node.simpleName().name() + "\" constructor.");
        }
      } else if (!SerializableContract.SERIALIZABLE_CONTRACT_METHODS.contains(symbol.name())) {
        reportIssue(node.simpleName(), "Remove this unused private \"" + symbol.name() + "\" method.");
      }
    }
  }

