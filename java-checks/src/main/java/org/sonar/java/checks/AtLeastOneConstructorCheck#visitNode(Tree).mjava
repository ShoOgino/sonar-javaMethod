  @Override
  public void visitNode(Tree tree) {
    ClassTree node = (ClassTree) tree;
    IdentifierTree simpleName = node.simpleName();
    if (simpleName != null && !ModifiersUtils.hasModifier(((ClassTree) tree).modifiers(), Modifier.ABSTRACT)) {
      boolean hasPrivateMember = false;
      for (Tree member : node.members()) {
        if (member.is(Kind.CONSTRUCTOR)) {
          return;
        } else if (member.is(Kind.VARIABLE)) {
          VariableTree variable = (VariableTree) member;
          Symbol symbol = variable.symbol();
          hasPrivateMember |= variable.initializer() == null && symbol.isPrivate() && !symbol.isStatic();
        }
      }
      if (hasPrivateMember) {
        reportIssue(simpleName, "Add a constructor to the " + node.declarationKeyword().text() + ".");
      }
    }
  }

