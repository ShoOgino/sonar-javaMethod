  private Optional<RegexParseResult> getRegexOperand(MethodInvocationTree mit) {
    if (mit.methodSelect().is(Tree.Kind.MEMBER_SELECT)) {
      ExpressionTree object = ((MemberSelectExpressionTree) mit.methodSelect()).expression();
      if (isPatternOrMatcher(object.symbolType())) {
        return getRegex(object);
      }
    }
    return mit.arguments()
      .stream()
      .filter(arg -> isPatternOrMatcher(arg.symbolType()))
      .map(this::getRegex)
      .filter(Optional::isPresent)
      .map(Optional::get)
      .findFirst();
  }

