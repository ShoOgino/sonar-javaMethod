  @Override
  public void visitNode(Tree tree) {
    if (!hasSemantic()) {
      return;
    }
    List<Tree> members = ((ClassTree) tree).members();
    Optional<Tree> first = members.stream().filter(t -> t.is(Tree.Kind.CONSTRUCTOR) && isPrivateConstructor((MethodTree) t)).findFirst();
    if(first.isPresent()) {
      return;
    }
    members.stream()
      .filter(t -> t.is(Tree.Kind.VARIABLE) && isAnnotatedWithInject((VariableTree) t))
      .forEach(field -> reportIssue(((VariableTree) field).simpleName(), "Use constructor injection for this field.")
    );
  }

