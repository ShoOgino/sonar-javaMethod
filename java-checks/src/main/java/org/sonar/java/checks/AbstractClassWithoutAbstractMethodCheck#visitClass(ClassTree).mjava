  @Override
  public void visitClass(ClassTree tree) {
    if (tree.is(Tree.Kind.CLASS)) {
      Symbol.TypeSymbol typeSymbol = tree.symbol();
      if (typeSymbol != null && typeSymbol.isAbstract()) {
        Collection<Symbol> symbols = typeSymbol.memberSymbols();
        int abstractMethod = countAbstractMethods(symbols);
        if (isExtendingObject(tree) && abstractMethod == symbols.size() - 2) {
          //emtpy abstract class or only abstract method
          context.addIssue(tree, ruleKey, "Convert this \"" + typeSymbol + "\" class to an interface");
        }
        if (symbols.size() > 2 && abstractMethod == 0 && !isPartialImplementation(tree)) {
          //Not empty abstract class with no abstract method
          context.addIssue(tree, ruleKey, "Convert this \"" + typeSymbol + "\" class to a concrete class with a private constructor");
        }
      }
    }
    super.visitClass(tree);
  }

