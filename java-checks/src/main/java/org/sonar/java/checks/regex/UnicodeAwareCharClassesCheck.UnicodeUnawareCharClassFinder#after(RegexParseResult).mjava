    @Override
    protected void after(RegexParseResult regexParseResult) {
      int unicodeUnawareRangeSize = unicodeUnawareRanges.size();
      if (unicodeUnawareRangeSize == 1) {
        reportIssue(unicodeUnawareRanges.get(0),
          "Replace this character range with a Unicode-aware character class.", null, Collections.emptyList());
      } else if (unicodeUnawareRangeSize > 1) {
        List<RegexCheck.RegexIssueLocation> secondaries = unicodeUnawareRanges.stream()
          .map(tree -> new RegexIssueLocation(tree, "Character range"))
          .collect(Collectors.toList());

        reportIssue(regexParseResult.getResult(),
          "Replace these character ranges with Unicode-aware character classes.", null, secondaries);
      }


      if (!unicodeAwareWithFlag.isEmpty() && !containsUnicodeCharacterFlag) {
        List<RegexCheck.RegexIssueLocation> secondaries = unicodeAwareWithFlag.stream()
          .map(tree -> new RegexIssueLocation(tree, "Predefined/POSIX character class"))
          .collect(Collectors.toList());
        // Can not propose to use UNICODE_CHARACTER_CLASS for annotation because the matching flag
        // javax.validation.constraints.Pattern.Flag.UNICODE_CHARACTER_CLASS does not exist in javaee-api <= 8.0
        String flagName = methodInvocationOrAnnotation.is(Tree.Kind.ANNOTATION) ? "(?U)" : "UNICODE_CHARACTER_CLASS";
        reportIssue(methodOrAnnotationName(methodInvocationOrAnnotation),
          "Enable the \"" + flagName + "\" flag or use a Unicode-aware alternative.", null, secondaries);
      }
    }

