  @Override
  public JavaTreeVisitor createJavaTreeVisitor() {
    return new BaseTreeVisitor() {
      private int nestingLevel;

      @Override
      public void visitCompilationUnit(CompilationUnitTree tree) {
        nestingLevel = 0;
        super.visitCompilationUnit(tree);
      }

      @Override
      public void visitIfStatement(IfStatementTree tree) {
        nestingLevel++;
        if (nestingLevel == max + 1) {
          getContext().createLineViolation(NestedIfStatementsCheck.this, "Refactor this code to not nest more than " + max + " if statements.", ((JavaTree) tree).getLine());
        }
        visit(tree);
        nestingLevel--;
      }

      private void visit(IfStatementTree tree) {
        scan(tree.condition());
        scan(tree.thenStatement());

        StatementTree elseStatementTree = tree.elseStatement();
        if (elseStatementTree != null && elseStatementTree.is(Tree.Kind.IF_STATEMENT)) {
          visit((IfStatementTree) elseStatementTree);
        } else {
          scan(elseStatementTree);
        }
      }
    };
  }

