    @Override
    public void visitSequence(SequenceTree tree) {
      super.visitSequence(tree);
      List<RegexTree> items = tree.getItems();
      int repetitionPos = items.size() - 2;
      while (repetitionPos > 0 && items.get(repetitionPos).is(RegexTree.Kind.NON_CAPTURING_GROUP) &&
        ((NonCapturingGroupTree) items.get(repetitionPos)).getElement() == null) {
        repetitionPos--;
      }
      if (repetitionPos >= 0 && items.get(repetitionPos).is(RegexTree.Kind.REPETITION)) {
        RepetitionTree repetition = (RepetitionTree) items.get(repetitionPos);
        getReluctantlyQuantifiedElement(repetition).flatMap(element -> 
          findNegatedCharacterClassFor(items.get(items.size() - 1), getBaseCharacter(element)))
          .ifPresent(negatedClass -> {
            String newQuantifier = makePossessive(repetition.getQuantifier());
            String message = String.format("Replace this use of a reluctant quantifier with \"%s%s\".", negatedClass, newQuantifier);
            reportIssue(repetition, String.format(message, negatedClass), null, Collections.emptyList());
          });
      }
    }

