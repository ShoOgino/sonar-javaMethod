  @Override
  public void visitNode(Tree tree) {
    if (hasSemantic()) {
      MethodInvocationTree methodInvocationTree = (MethodInvocationTree) tree;
      Symbol symbolReference = null;
      Symbol.MethodSymbol method = null;
      String reportedName = "";
      if (methodInvocationTree.methodSelect().is(Tree.Kind.MEMBER_SELECT)) {
        MemberSelectExpressionTree mse = (MemberSelectExpressionTree) methodInvocationTree.methodSelect();
        IdentifierTree identifier = mse.identifier();
        reportedName = identifier.name();
        method = (Symbol.MethodSymbol) getSemanticModel().getReference(identifier);
        if (mse.expression().is(Tree.Kind.IDENTIFIER)) {
          symbolReference = getSemanticModel().getReference((IdentifierTree) mse.expression());
        }
      }
      if (symbolReference != null && method != null && isMethodFromCollection(method)) {
        for (ExpressionTree arg : methodInvocationTree.arguments()) {
          if (arg.is(Tree.Kind.IDENTIFIER)) {
            Symbol reference = getSemanticModel().getReference((IdentifierTree) arg);
            if (reference == symbolReference) {
              addIssue(tree, "Remove or correct this \"" + reportedName + "\" call.");
            }
          }
        }
      }
    }

  }

