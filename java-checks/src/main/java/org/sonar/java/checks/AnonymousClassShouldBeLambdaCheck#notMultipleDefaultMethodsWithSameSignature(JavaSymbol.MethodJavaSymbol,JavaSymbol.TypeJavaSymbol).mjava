  private static boolean notMultipleDefaultMethodsWithSameSignature(JavaSymbol.MethodJavaSymbol methodSymbol, JavaSymbol.TypeJavaSymbol interfaceOwner) {
    Set<JavaSymbol.MethodJavaSymbol> methods = new HashSet<>();
    List<TypeJavaSymbol> allInterfacesOfHierarchy = interfaceOwner.superTypes().stream().filter(type -> !type.is("java.lang.Object"))
      .map(ClassJavaType::getSymbol).collect(Collectors.toList());
    for (JavaSymbol.TypeJavaSymbol interfaceOfHierarchy : allInterfacesOfHierarchy) {
      methods.addAll(interfaceOfHierarchy.memberSymbols().stream().filter(Symbol::isMethodSymbol).map(method -> ((JavaSymbol.MethodJavaSymbol) method))
        .filter(method -> !method.name().equals(methodSymbol.name()))
        .filter(method -> sameParameters(method, methodSymbol))
        .collect(Collectors.toList()));
    }
    methods.addAll(
      interfaceOwner.memberSymbols().stream().filter(Symbol::isMethodSymbol).map(method -> ((JavaSymbol.MethodJavaSymbol) method))
        .filter(method -> sameParameters(method, methodSymbol))
        .collect(Collectors.toList()));
    return methodsDefaultAndNotStatic(methods);
  }

