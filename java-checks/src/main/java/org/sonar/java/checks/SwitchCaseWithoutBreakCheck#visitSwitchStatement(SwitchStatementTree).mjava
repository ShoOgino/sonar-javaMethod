  @Override
  public void visitSwitchStatement(SwitchStatementTree switchStatement) {
    switchStatement.cases().stream()
      // Exclude the last case as stated in RSPEC. This also excludes switches with no or a single case group.
      .limit(Math.max(0, switchStatement.cases().size() - 1))
      .forEach(caseGroup -> {
        // Assign issues to the last label in the group
        CaseLabelTree caseLabel = caseGroup.labels().get(caseGroup.labels().size() - 1);

          // Reverse the body as commonly the unconditional exit will be at the end of the body.
        if (Lists.reverse(caseGroup.body()).stream().noneMatch(SwitchCaseWithoutBreakCheck::isUnconditionalExit) && !intentionalFallThrough(switchStatement, caseGroup)) {
          context.reportIssue(this, caseLabel, "End this switch case with an unconditional break, return or throw statement.");
        }
      });

    super.visitSwitchStatement(switchStatement);
  }

