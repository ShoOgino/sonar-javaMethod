  @Override
  public void visitMethodInvocation(MethodInvocationTree tree) {
    Symbol symbol = tree.symbol();
    if (symbol.isMethodSymbol()) {
      MethodJavaSymbol methodSymbol = (MethodJavaSymbol) symbol;
      List<JavaSymbol> parameters = methodSymbol.getParameters().scopeSymbols();
      if (parameters.size() != 0) {
        for (int i = 0; i < tree.arguments().size(); i += 1) {
          // in case of varargs, there could be more arguments than parameters. in that case, pick the last parameter.
          if (checkNullity(parameters.get(i < parameters.size() ? i : parameters.size() - 1)) == AbstractValue.NOTNULL) {
            this.checkForIssue(tree.arguments().get(i),
              String.format("'%%s' is nullable here and method '%s' does not accept nullable argument", methodSymbol.name()),
              String.format("method '%s' does not accept nullable argument", methodSymbol.name()));
          }
        }
      }
    }
    super.visitMethodInvocation(tree);
  }

