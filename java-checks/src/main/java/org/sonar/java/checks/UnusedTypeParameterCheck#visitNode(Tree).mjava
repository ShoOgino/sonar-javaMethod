  @Override
  public void visitNode(Tree tree) {
    if (hasSemantic()) {
      TypeParameters typeParameters;
      String messageEnd;
      if (tree.is(Tree.Kind.METHOD)) {
        typeParameters = ((MethodTree) tree).typeParameters();
        messageEnd = "method.";
      } else {
        typeParameters = ((ClassTree) tree).typeParameters();
        messageEnd = "class.";
        if(tree.is(Tree.Kind.INTERFACE)) {
          messageEnd = "interface.";
        }
      }
      for (TypeParameterTree typeParameter : typeParameters) {
        Symbol symbol = getSemanticModel().getSymbol(typeParameter);
        if (getSemanticModel().getUsages(symbol).isEmpty()) {
          String message = new StringBuilder(typeParameter.identifier().name())
              .append(" is not used in the ")
              .append(messageEnd).toString();
          addIssue(typeParameter, message);
        }
      }
    }
  }

