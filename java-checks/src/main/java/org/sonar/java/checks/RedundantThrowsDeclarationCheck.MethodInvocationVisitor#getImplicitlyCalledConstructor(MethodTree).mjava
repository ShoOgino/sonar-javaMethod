    private static Optional<Symbol.MethodSymbol> getImplicitlyCalledConstructor(MethodTree methodTree) {
      Type superType = ((Symbol.TypeSymbol)methodTree.symbol().owner()).superClass();
      // superClass() returns null only for java.lang.Object; it is not possible.
      return Objects.requireNonNull(superType).symbol().memberSymbols().stream()
        .filter(MethodInvocationVisitor::isDefaultConstructor)
        .map(Symbol.MethodSymbol.class::cast)
        .findFirst();
    }

