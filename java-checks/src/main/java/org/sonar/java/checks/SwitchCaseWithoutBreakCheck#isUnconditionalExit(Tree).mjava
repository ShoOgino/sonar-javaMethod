  private static boolean isUnconditionalExit(Tree syntaxNode) {
    switch (syntaxNode.kind()) {
      case BREAK_STATEMENT:
      case THROW_STATEMENT:
      case RETURN_STATEMENT:
      case CONTINUE_STATEMENT:
        return true;
      case BLOCK:
        return ((BlockTree) syntaxNode).body().stream().anyMatch(SwitchCaseWithoutBreakCheck::isUnconditionalExit);
      case TRY_STATEMENT:
        return isUnconditionalExitInTryCatchStatement((TryStatementTree) syntaxNode);
      case IF_STATEMENT:
        return isUnconditionalExitInIfStatement((IfStatementTree) syntaxNode);
      default:
        return false;
    }
  }

