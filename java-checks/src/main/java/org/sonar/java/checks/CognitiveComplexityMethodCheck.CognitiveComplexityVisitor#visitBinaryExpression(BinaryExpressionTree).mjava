    @Override
    public void visitBinaryExpression(BinaryExpressionTree tree) {
      if(tree.is(CONDITIONAL_AND, CONDITIONAL_OR)) {
        increaseComplexityByOne(tree.operatorToken());
        ExpressionTree left = ExpressionUtils.skipParentheses(tree.leftOperand());
        if(left.kind() == tree.kind()) {
          ignored.add(((BinaryExpressionTree) left).operatorToken());
          complexity--;
        }
        ExpressionTree right = ExpressionUtils.skipParentheses(tree.rightOperand());
        if(right.kind() == tree.kind()) {
          ignored.add(((BinaryExpressionTree) right).operatorToken());
          complexity--;
        }
      }
      super.visitBinaryExpression(tree);
    }

