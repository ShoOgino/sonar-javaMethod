  @Override
  public void visitNode(Tree tree) {
    if (hasSemantic()) {
      ClassTreeImpl classTree = (ClassTreeImpl) tree;
      TypeSymbol classSymbol = classTree.getSymbol();
      if (isSerializable(classSymbol.getType()) && !isSerializable(classSymbol.getSuperclass())) {
        Type superclass = classSymbol.getSuperclass();
        if (!hasNonPrivateNoArgConstructor(superclass)) {
          addIssue(tree, "Add a no-arg constructor to \"" + superclass + "\".");
        }
      }
    }
  }

