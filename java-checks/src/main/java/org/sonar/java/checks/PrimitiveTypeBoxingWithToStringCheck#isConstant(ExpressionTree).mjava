  private static boolean isConstant(ExpressionTree operand) {
    switch (operand.kind()) {
      case BOOLEAN_LITERAL:
      case CHAR_LITERAL:
      case DOUBLE_LITERAL:
      case FLOAT_LITERAL:
      case INT_LITERAL:
      case LONG_LITERAL:
      case STRING_LITERAL:
        return true;
      case NULL_LITERAL:
        return false;
      case IDENTIFIER:
        return isPrimitiveConstant(((IdentifierTree) operand).symbol());
      case MEMBER_SELECT:
        MemberSelectExpressionTree mset = (MemberSelectExpressionTree) operand;
        if (ExpressionUtils.isSelectOnThisOrSuper(mset)) {
          // using "this.MY_CONSTANT" in concatenation forces boxing, while using A.MY_CONSTANT allow compiler to optimize code
          return false;
        }
        return isPrimitiveConstant(mset.identifier().symbol());
      default:
        return false;
    }
  }

