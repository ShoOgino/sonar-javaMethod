  @Override
  public void visitNode(Tree tree) {
    BinaryExpressionTree binaryExpressionTree = (BinaryExpressionTree) tree;
    if (isBoolean(binaryExpressionTree.leftOperand().symbolType())) {
      String operator = binaryExpressionTree.operatorToken().text();
      String replacement = REPLACEMENTS.get(operator);
      String sideEffectWarning = "";
      if (mayHaveSideEffect(binaryExpressionTree.rightOperand())) {
        sideEffectWarning = " and extract the right operand to a variable if it should always be evaluated";
      }
      reportIssue(binaryExpressionTree.operatorToken(), "Correct this \"" + operator + "\" to \"" + replacement + "\"" + sideEffectWarning + ".");
    }
  }

