  private void collectPattern(MethodInvocationTree mit) {
    for (Symbol.VariableSymbol knownPattern : knownPatternsWithGroups.keySet()) {
      if (ExpressionUtils.isInvocationOnVariable(mit, knownPattern, false)) {
        Optional<Symbol.VariableSymbol> matcher = getAssignedPrivateVariable(mit);
        if (matcher.isPresent()) {
          matcherToPattern.put(matcher.get(), knownPattern);
        } else {
          // Kill the noise
          // can be the case if used within a stream operation
          // discard the pattern, we lost its track
          knownPatternsWithGroups.remove(knownPattern);
        }
        break;
      }
    }
  }

