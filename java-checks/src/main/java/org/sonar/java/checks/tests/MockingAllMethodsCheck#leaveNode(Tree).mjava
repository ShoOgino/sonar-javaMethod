  @Override
  public void leaveNode(Tree tree) {
    if (tree.is(Tree.Kind.METHOD)) {
      for (Map.Entry<Symbol, Set<Symbol>> entry : mockedMethodsPerObject.entrySet()) {
        Symbol mockedObject = entry.getKey();
        Tree declaration = mockedObject.declaration();
        if (declaration != null) {
          Set<Symbol> mockedMethods = entry.getValue();
          Set<Symbol> declaredMethods = mockedObject.type().symbol().memberSymbols().stream()
            .filter(MockingAllMethodsCheck::isNonPrivateMethod)
            .collect(Collectors.toSet());
          if (declaredMethods.size() > 1 && mockedMethods.containsAll(declaredMethods)) {
            List<JavaFileScannerContext.Location> secondaries = mockedMethods.stream()
              .map(method -> new JavaFileScannerContext.Location("Method mocked here", whenCalls.get(method)))
              .collect(Collectors.toList());
            reportIssue(declaration, "Refactor this test instead of mocking every non-private member of this class.", secondaries, null);
          }
        }
      }
    }
  }

