  @Override
  public void visitNode(Tree tree) {
    ExpressionTree expr = ((ExpressionStatementTree) tree).expression();
    if (expr.is(Tree.Kind.METHOD_INVOCATION)) {
      MethodInvocationTree mit = (MethodInvocationTree) expr;
      if (isExcluded(mit)) {
        return;
      }
      Symbol methodSymbol = mit.symbol();
      if (!isVoidOrUnknown(mit.symbolType())
          && isCheckedType(methodSymbol.owner().type())
          && methodSymbol.isPublic()
          && !isConstructor(methodSymbol)) {
        IdentifierTree methodName = ExpressionUtils.methodName(mit);
        reportIssue(methodName, "The return value of \"" + methodName.name() + "\" must be used.");
      }
    }
  }

