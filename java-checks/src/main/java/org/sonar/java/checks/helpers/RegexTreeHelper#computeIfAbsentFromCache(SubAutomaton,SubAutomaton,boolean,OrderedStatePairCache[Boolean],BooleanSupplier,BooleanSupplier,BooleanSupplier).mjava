  private static boolean computeIfAbsentFromCache(SubAutomaton auto1, SubAutomaton auto2, boolean defaultAnswer, OrderedStatePairCache<Boolean> cache,
    BooleanSupplier evaluateAuto1Successors, BooleanSupplier evaluateAuto2Successors, BooleanSupplier compareAuto1AndAuto2) {
    if (hasNotSupportedTransitionType(auto1) || hasNotSupportedTransitionType(auto2)) {
      return defaultAnswer;
    }
    OrderedStatePair entry = new OrderedStatePair(auto1.start, auto2.start);
    Boolean cachedValue = cache.startCalculation(entry, defaultAnswer);
    if (cachedValue != null) {
      return cachedValue;
    }
    if (auto1.isAtEnd() && auto2.isAtEnd()) {
      return cache.save(entry, checkMatchedCharacters(auto1, auto2, true, defaultAnswer));
    } else if (auto1.isAtEnd() && auto2.incomingTransitionType() != EPSILON) {
      return cache.save(entry, checkMatchedCharacters(auto1, auto2, auto2.allowPrefix, defaultAnswer));
    } else if (auto2.isAtEnd() && auto1.incomingTransitionType() != EPSILON) {
      return cache.save(entry, checkMatchedCharacters(auto1, auto2, auto1.allowPrefix, defaultAnswer));
    } else if (auto2.incomingTransitionType() == EPSILON && !auto2.isAtEnd()) {
      return cache.save(entry, evaluateAuto2Successors.getAsBoolean());
    } else if (auto1.incomingTransitionType() == EPSILON && !auto1.isAtEnd()) {
      return cache.save(entry, evaluateAuto1Successors.getAsBoolean());
    } else {
      return cache.save(entry, compareAuto1AndAuto2.getAsBoolean());
    }
  }

