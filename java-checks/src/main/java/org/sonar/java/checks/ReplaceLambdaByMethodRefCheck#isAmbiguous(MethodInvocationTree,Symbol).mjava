  /**
   * This is a crude way to shutdown the FPs when method reference is ambiguous in case of lambda like x -> x.foo()
   * Full resolution algorithm is described in JLS 15.13.1
   */
  private static boolean isAmbiguous(MethodInvocationTree tree, Symbol parameterSymbol) {
    Symbol method = tree.symbol();
    Symbol.TypeSymbol methodOwner = (Symbol.TypeSymbol) method.owner();
    if (methodOwner.isUnknown() || method.isUnknown()) {
      return true;
    }
    // suitable method is instance method with no parameters, or static method with single parameter of the same type as lambda argument
    return methodOwner.lookupSymbols(method.name())
      .stream()
      .filter(Symbol::isMethodSymbol)
      .map(s -> (Symbol.MethodSymbol) s)
      .filter(m -> (!m.isStatic() && m.parameterTypes().isEmpty())
        || (m.isStatic() && m.parameterTypes().size() == 1 && parameterSymbol.type().isSubtypeOf(m.parameterTypes().get(0))))
      .count() > 1;
  }

