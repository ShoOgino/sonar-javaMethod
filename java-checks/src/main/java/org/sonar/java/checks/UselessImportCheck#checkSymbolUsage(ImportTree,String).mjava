  private void checkSymbolUsage(ImportTree importTree, String importName) {
    IdentifierTree id = null;
    if (importTree.qualifiedIdentifier().is(Tree.Kind.IDENTIFIER)) {
      id = (IdentifierTree) importTree.qualifiedIdentifier();
    } else if (importTree.qualifiedIdentifier().is(Tree.Kind.MEMBER_SELECT)) {
      id = ((MemberSelectExpressionTree) importTree.qualifiedIdentifier()).identifier();
    }
    if (id != null) {
      if (context.getSemanticModel() != null) {
        Symbol symbol = JUtils.importTreeSymbol(importTree);
        if (symbol != null) {
          Symbol owner = symbol.owner();
          // Exclude method symbols : they could be ambiguous or unresolved and lead to FP.
          if (symbol.isVariableSymbol() && symbol.usages().stream().allMatch(identifierTree -> JUtils.enclosingClass(identifierTree) == owner)) {
            context.reportIssue(this, importTree, "Remove this unused import '" + importName + "'.");
          }
        }
      }
    }
  }

