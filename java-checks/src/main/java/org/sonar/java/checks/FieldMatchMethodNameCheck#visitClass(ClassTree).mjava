  @Override
  public void visitClass(ClassTree tree) {
    Symbol.TypeSymbol classSymbol = ((ClassTreeImpl) tree).getSymbol();
    if (classSymbol != null) {
      Map<String, Symbol> indexSymbol = Maps.newHashMap();
      Multiset<String> fields = HashMultiset.create();
      Map<String, String> fieldsOriginal = Maps.newHashMap();
      Set<String> methodNames = Sets.newHashSet();
      Collection<Symbol> symbols = classSymbol.members().scopeSymbols();
      for (Symbol sym : symbols) {
        String symName = sym.getName().toLowerCase();
        if (sym.isVariableSymbol()) {
          indexSymbol.put(symName, sym);
          fields.add(symName);
          fieldsOriginal.put(symName, sym.getName());
        }
        if (sym.isMethodSymbol()) {
          methodNames.add(symName);
        }
      }
      fields.addAll(methodNames);
      for (Multiset.Entry<String> entry : fields.entrySet()) {
        if (entry.getCount() > 1) {
          Tree field = semanticModel.getTree(indexSymbol.get(entry.getElement()));
          if(field != null) {
            context.addIssue(field, ruleKey, "Rename the \"" + fieldsOriginal.get(entry.getElement()) + "\" member.");
          }
        }
      }
    }
    super.visitClass(tree);
  }

