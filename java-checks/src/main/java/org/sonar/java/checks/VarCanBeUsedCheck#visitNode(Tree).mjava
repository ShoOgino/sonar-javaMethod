  @Override
  public void visitNode(Tree tree) {
    VariableTree variableTree = (VariableTree) tree;
    ExpressionTree initializer = variableTree.initializer();
    TypeTree type = variableTree.type();
    Type symbolType = type.symbolType();
    String typeName = symbolType.name().toLowerCase(Locale.ROOT);
    IdentifierTree identifierTree = variableTree.simpleName();

    if (isMultiAssignment(variableTree) ||
      initializer == null ||
      type.is(Tree.Kind.VAR_TYPE) ||
      symbolType.isUnknown() ||
      !JUtils.isLocalVariable(variableTree.symbol()) ||
      symbolType.isParameterized()) {
      return;
    }

    initializer = ExpressionUtils.skipParentheses(initializer);

    if (initializer.is(Tree.Kind.CONDITIONAL_EXPRESSION, Tree.Kind.METHOD_REFERENCE, Tree.Kind.LAMBDA_EXPRESSION)) {
      return;
    }

    Type initializerType = initializer.symbolType();
    if (symbolType.fullyQualifiedName().equals(initializerType.fullyQualifiedName()) &&
      (isSelfExplained(initializer) ||
        typeWasMentionedInTheName(identifierTree, typeName) ||
        typeWasMentionedInTheInitializer(initializer, typeName))) {
      reportIssue(identifierTree, MESSAGE);
    }
  }

