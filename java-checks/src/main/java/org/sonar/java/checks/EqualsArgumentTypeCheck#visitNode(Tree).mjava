  @Override
  public void visitNode(Tree tree) {
    if (!hasSemantic()) {
      return;
    }
    MethodTree methodTree = (MethodTree) tree;
    if (methodTree.block() != null && "equals".equals(methodTree.symbol().name()) && methodTree.parameters().size() == 1) {
      Symbol parameterSymbol = methodTree.parameters().get(0).symbol();
      if (parameterSymbol.type().is("java.lang.Object")) {
        ExpressionVisitor visitor = new ExpressionVisitor(parameterSymbol);
        methodTree.accept(visitor);
        if (!visitor.typeChecked) {
          addIssue(tree, "Add a type test to this method.");
        }
      }
    }
  }

