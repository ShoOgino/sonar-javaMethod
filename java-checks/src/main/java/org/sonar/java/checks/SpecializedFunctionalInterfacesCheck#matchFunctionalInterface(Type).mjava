  private static Optional<String> matchFunctionalInterface(Type type) {
    if (!JUtils.isParametrized(type)) {
      return Optional.empty();
    }

    if (hasAnyUnknownTypeArgument(type)) {
      return Optional.empty();
    }

    switch (type.fullyQualifiedName()) {
      case "java.util.function.Function":
        return handleFunctionInterface(type);
      case "java.util.function.BiFunction":
        return handleBiFunctionInterface(type);
      case "java.util.function.BiConsumer":
        return handleBiConsumerInterface(type);
      case "java.util.function.Supplier":
        return handleSupplier(type);
      case "java.util.function.Consumer":
      case "java.util.function.Predicate":
      case "java.util.function.UnaryOperator":
      case "java.util.function.BinaryOperator":
        return handleSingleParameterFunctions(type);
      default:
        return Optional.empty();
    }
  }

