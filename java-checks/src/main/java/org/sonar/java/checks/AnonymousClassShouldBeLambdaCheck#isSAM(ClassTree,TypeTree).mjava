  private static boolean isSAM(ClassTree classBody, TypeTree identifier) {
    List<Tree> members = classBody.members();
    if (hasOnlyOneMethod(members) && classBody.symbol().isTypeSymbol()) {
      // Verify class body is a subtype of an interface
      JavaSymbol.TypeJavaSymbol symbol = (JavaSymbol.TypeJavaSymbol) classBody.symbol();
      MethodTree method = (MethodTree) members.get(0);
      JavaSymbol.TypeJavaSymbol interfaceOwner = (JavaSymbol.TypeJavaSymbol) identifier.symbolType().symbol();
      return symbol.getInterfaces().size() == 1 &&
        symbol.getSuperclass().is("java.lang.Object") &&
        notMultipleDefaultMethodsWithSameSignature((JavaSymbol.MethodJavaSymbol) method.symbol(), interfaceOwner);
    }
    return false;
  }

