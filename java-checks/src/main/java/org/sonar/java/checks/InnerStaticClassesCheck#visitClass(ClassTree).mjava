  @Override
  public void visitClass(ClassTree tree) {
    if (!tree.is(Tree.Kind.CLASS)) {
      return;
    }
    Symbol.TypeSymbol symbol = tree.symbol();
    outerClasses.push(symbol);
    atLeastOneReference.push(Boolean.FALSE);
    scan(tree.members());
    Boolean oneReference = atLeastOneReference.pop();
    outerClasses.pop();
    if (!symbol.isStatic()
      && !Boolean.TRUE.equals(oneReference)
      && !isParameterizedWithTypeVarFromParent(tree)
      && couldBeDeclaredStatic(symbol)) {
      Tree reportTree = tree.simpleName();
      if(reportTree == null) {
        // Ignore issues on anonymous classes
        return;
      }
      String message = "Make this a \"static\" inner class.";
      if(symbol.owner().isMethodSymbol()) {
        message = "Make this local class a \"static\" inner class.";
      }
      context.reportIssue(this, reportTree, message);
    }
  }

