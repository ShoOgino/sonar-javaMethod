  @Override
  public List<Tree.Kind> nodesToVisit() {
    ImmutableList.Builder<Class<? extends Tree>> builder = ImmutableList.builder();
    builder.add(ArrayAccessExpressionTree.class);
    builder.add(ArrayTypeTree.class);
    builder.add(AssignmentExpressionTree.class);
    builder.add(BinaryExpressionTree.class);
    builder.add(ConditionalExpressionTree.class);
    builder.add(IdentifierTree.class);
    builder.add(InstanceOfTree.class);
    builder.add(LambdaExpressionTree.class);
    builder.add(LiteralTree.class);
    builder.add(MemberSelectExpressionTree.class);
    builder.add(MethodInvocationTree.class);
    builder.add(NewArrayTree.class);
    builder.add(NewClassTree.class);
    builder.add(JavaTree.ParameterizedTypeTreeImpl.class);
    builder.add(ParenthesizedTree.class);
    builder.add(PrimitiveTypeTree.class);
    builder.add(TypeCastTree.class);
    builder.add(UnaryExpressionTree.class);
    Collection<Tree.Kind> kinds = Lists.newArrayList(getKinds(builder.build()));
    return ImmutableList.<Tree.Kind>builder().addAll(kinds).add(Tree.Kind.CLASS).add(Tree.Kind.NEW_ARRAY).add(Tree.Kind.CONDITIONAL_EXPRESSION).build();
  }

