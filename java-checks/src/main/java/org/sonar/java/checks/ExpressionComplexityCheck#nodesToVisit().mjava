  @Override
  public List<Tree.Kind> nodesToVisit() {
    return ImmutableList.<Tree.Kind>builder()
        .add(Tree.Kind.CLASS)
        .add(Tree.Kind.POSTFIX_INCREMENT)
        .add(Tree.Kind.POSTFIX_DECREMENT)
        .add(Tree.Kind.PREFIX_INCREMENT)
        .add(Tree.Kind.PREFIX_DECREMENT)
        .add(Tree.Kind.UNARY_PLUS)
        .add(Tree.Kind.UNARY_MINUS)
        .add(Tree.Kind.BITWISE_COMPLEMENT)
        .add(Tree.Kind.LOGICAL_COMPLEMENT)
        .add(Tree.Kind.MULTIPLY)
        .add(Tree.Kind.DIVIDE)
        .add(Tree.Kind.REMAINDER)
        .add(Tree.Kind.PLUS)
        .add(Tree.Kind.MINUS)
        .add(Tree.Kind.LEFT_SHIFT)
        .add(Tree.Kind.RIGHT_SHIFT)
        .add(Tree.Kind.UNSIGNED_RIGHT_SHIFT)
        .add(Tree.Kind.LESS_THAN)
        .add(Tree.Kind.GREATER_THAN)
        .add(Tree.Kind.LESS_THAN_OR_EQUAL_TO)
        .add(Tree.Kind.GREATER_THAN_OR_EQUAL_TO)
        .add(Tree.Kind.EQUAL_TO)
        .add(Tree.Kind.NOT_EQUAL_TO)
        .add(Tree.Kind.AND)
        .add(Tree.Kind.XOR)
        .add(Tree.Kind.OR)
        .add(Tree.Kind.CONDITIONAL_AND)
        .add(Tree.Kind.CONDITIONAL_OR)
        .add(Tree.Kind.CONDITIONAL_EXPRESSION)
        .add(Tree.Kind.ARRAY_ACCESS_EXPRESSION)
        .add(Tree.Kind.MEMBER_SELECT)
        .add(Tree.Kind.NEW_CLASS)
        .add(Tree.Kind.NEW_ARRAY)
        .add(Tree.Kind.METHOD_INVOCATION)
        .add(Tree.Kind.TYPE_CAST)
        .add(Tree.Kind.INSTANCE_OF)
        .add(Tree.Kind.PARENTHESIZED_EXPRESSION)
        .add(Tree.Kind.ASSIGNMENT)
        .add(Tree.Kind.MULTIPLY_ASSIGNMENT)
        .add(Tree.Kind.DIVIDE_ASSIGNMENT)
        .add(Tree.Kind.REMAINDER_ASSIGNMENT)
        .add(Tree.Kind.PLUS_ASSIGNMENT)
        .add(Tree.Kind.MINUS_ASSIGNMENT)
        .add(Tree.Kind.LEFT_SHIFT_ASSIGNMENT)
        .add(Tree.Kind.RIGHT_SHIFT_ASSIGNMENT)
        .add(Tree.Kind.UNSIGNED_RIGHT_SHIFT_ASSIGNMENT)
        .add(Tree.Kind.AND_ASSIGNMENT)
        .add(Tree.Kind.XOR_ASSIGNMENT)
        .add(Tree.Kind.OR_ASSIGNMENT)
        .add(Tree.Kind.INT_LITERAL)
        .add(Tree.Kind.LONG_LITERAL)
        .add(Tree.Kind.FLOAT_LITERAL)
        .add(Tree.Kind.DOUBLE_LITERAL)
        .add(Tree.Kind.BOOLEAN_LITERAL)
        .add(Tree.Kind.CHAR_LITERAL)
        .add(Tree.Kind.STRING_LITERAL)
        .add(Tree.Kind.NULL_LITERAL)
        .add(Tree.Kind.IDENTIFIER)
        .add(Tree.Kind.ARRAY_TYPE)
        .add(Tree.Kind.LAMBDA_EXPRESSION)
        .add(Tree.Kind.PRIMITIVE_TYPE)
        .build();
  }

