  @Override
  public void visitNode(Tree tree) {
    if (isClassTree(tree)) {
      ClassTree classTree = (ClassTree) tree;
      // Exclude anonymous classes
      isInAnonymousClass.push(classTree.simpleName() == null);
      if (!isInAnonymousClass.peek()) {
        checkIndentation(Collections.singletonList(classTree));
      }
    } else if (tree.is(Kind.METHOD_INVOCATION)) {
      adjustMethodInvocation((MethodInvocationTree) tree);
      return;
    }
    expectedLevel += indentationLevel;
    isBlockAlreadyReported = false;

    switch (tree.kind()) {
      case CLASS:
      case ENUM:
      case INTERFACE:
      case ANNOTATION_TYPE:
        checkClass((ClassTree) tree);
        break;
      case CASE_GROUP:
        checkCaseGroup((CaseGroupTree) tree);
        break;
      case BLOCK:
        checkBlock((BlockTree) tree);
        break;
      default:
        break;
    }
  }

