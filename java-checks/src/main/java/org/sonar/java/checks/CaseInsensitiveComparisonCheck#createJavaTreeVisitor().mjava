  @Override
  public JavaTreeVisitor createJavaTreeVisitor() {
    return new BaseTreeVisitor() {
      @Override
      public void visitMethodInvocation(MethodInvocationTree tree) {
        if (tree.methodSelect().is(Tree.Kind.MEMBER_SELECT)) {
          MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) tree.methodSelect();
          if ("equals".equals(memberSelect.identifier().name())) {
            if (isToUpperCaseOrToLowerCase(memberSelect.expression()) || (tree.arguments().size() == 1 && isToUpperCaseOrToLowerCase(tree.arguments().get(0)))) {
              getContext().createLineViolation(
                CaseInsensitiveComparisonCheck.this,
                "Replace these toUpperCase()/toLowerCase() and equals() calls with a single equalsIgnoreCase() call.",
                ((JavaTree) tree).getLine()
              );
            }
          }
        }

        super.visitMethodInvocation(tree);
      }

      private boolean isToUpperCaseOrToLowerCase(ExpressionTree expression) {
        if (expression.is(Tree.Kind.METHOD_INVOCATION)) {
          MethodInvocationTree methodInvocation = (MethodInvocationTree) expression;
          if (methodInvocation.methodSelect().is(Tree.Kind.MEMBER_SELECT)) {
            MemberSelectExpressionTree memberSelect = (MemberSelectExpressionTree) methodInvocation.methodSelect();
            String name = memberSelect.identifier().name();
            return "toUpperCase".equals(name) || "toLowerCase".equals(name);
          }
        }
        return false;
      }

    };
  }

