  @Override
  public void visitNode(Tree tree) {
    if (!hasSemantic()) {
      return;
    }

    ForEachStatement actualStatement = (ForEachStatement) tree;
    Type variableType = actualStatement.variable().type().symbolType();
    Type collectionItemType = getCollectionItemType(actualStatement.expression());

    if (collectionItemType != null && !isMostPreciseType(variableType, collectionItemType)) {
      // Second pass: check if the variable is down-cast in the statement block
      DownCastVisitor downCastVisitor = new DownCastVisitor(actualStatement.variable().symbol());
      actualStatement.statement().accept(downCastVisitor);

      if (downCastVisitor.hasDownCastOfLoopVariable) {
        List<JavaFileScannerContext.Location> locations = Collections.singletonList(
          new JavaFileScannerContext.Location(String.format(SECONDARY_MESSAGE, collectionItemType.name()), actualStatement.expression()));
        reportIssue(actualStatement.variable().type(), String.format(PRIMARY_MESSAGE, variableType.name()),
          locations, 0);
      }
    }
  }

