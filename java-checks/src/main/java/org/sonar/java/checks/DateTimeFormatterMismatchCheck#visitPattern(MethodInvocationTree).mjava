  /**
   * We currently only check formatters initialized with a String literal or the value of a final variable.
   */
  private void visitPattern(MethodInvocationTree invocation) {
    Arguments arguments = invocation.arguments();
    ExpressionTree argument = arguments.get(0);
    if (argument.is(Tree.Kind.STRING_LITERAL)) {
      String pattern = ((LiteralTree) argument).value();
      if (isInfringingPattern(pattern)) {
        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);
      }
    } else if (argument.is(Tree.Kind.IDENTIFIER)) {
      IdentifierTree identifier = (IdentifierTree) argument;
      Symbol symbol = identifier.symbol();
      if (!symbol.isFinal()) {
        return;
      }
      Tree declaration = symbol.declaration();
      Optional<String> pattern = getStringLiteralValue(declaration);
      if (pattern.isPresent() && isInfringingPattern(pattern.get())) {
        reportIssue(invocation, CHANGE_YEAR_FORMAT_WEEK_BASED_MESSAGE);
      }
    }
  }

