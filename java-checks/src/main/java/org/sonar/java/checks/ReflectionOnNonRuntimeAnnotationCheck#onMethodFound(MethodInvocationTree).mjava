  @Override
  protected void onMethodFound(MethodInvocationTree mit) {
    ExpressionTree expressionTree = mit.arguments().get(0);
    //For now ignore everything that is not a .class expression
    if (expressionTree.is(Tree.Kind.MEMBER_SELECT)) {
      Type symbolType = ((AbstractTypedTree) ((MemberSelectExpressionTree) expressionTree).expression()).getSymbolType();
      if (isNotRuntimeAnnotation(symbolType)) {
        addIssue(mit, "\"@" + symbolType.getSymbol().getName() + "\" is not available at runtime and cannot be seen with reflection.");
      }
    }
  }

