  @Override
  public void visitNode(Tree tree) {
    if (!hasSemantic()) {
      return;
    }
    ClassTree classTree = (ClassTree) tree;
    List<MethodWithUsedVariables> methods = classTree.members().stream()
      .filter(member -> member.is(Tree.Kind.METHOD))
      .map(MethodTree.class::cast)
      .filter(methodTree -> isDuplicateCandidate(methodTree, classTree))
      .map(MethodWithUsedVariables::new)
      .collect(Collectors.toList());
    if (methods.size() <= 1) {
      return;
    }
    Set<MethodTree> reported = new HashSet<>();
    for (int i = 0; i < methods.size(); i++) {
      MethodWithUsedVariables methodWithVariables = methods.get(i);
      MethodTree method = methodWithVariables.method;
      SyntaxToken methodIdentifier = method.simpleName().identifierToken();
      List<StatementTree> methodBody = method.block().body();
      methods.stream()
        .skip(i + 1L)
        // avoid reporting multiple times
        .filter(otherMethodWithVariables -> !reported.contains(otherMethodWithVariables.method))
        // skip overloads
        .filter(otherMethodWithVariables -> !methodIdentifier.text().equals(otherMethodWithVariables.method.simpleName().name()))
        // only consider method syntactically equivalent
        .filter(otherMethodWithVariables -> SyntacticEquivalence.areEquivalent(methodBody, otherMethodWithVariables.method.block().body()))
        // only consider method having same types for their variables
        .filter(methodWithVariables::isUsingSameVariablesWithSameTypes)
        .forEach(otherMethodWithVariables -> {
          MethodTree otherMethod = otherMethodWithVariables.method;
          reportIssue(
            otherMethod.simpleName(),
            String.format(ISSUE_MSG, methodIdentifier.text(), methodIdentifier.line()),
            Collections.singletonList(new JavaFileScannerContext.Location("original implementation", methodIdentifier)),
            null);
          reported.add(otherMethod);
        });
    }
  }

