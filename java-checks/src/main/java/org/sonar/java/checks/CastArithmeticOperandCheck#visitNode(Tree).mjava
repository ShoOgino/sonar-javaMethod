  @Override
  public void visitNode(Tree tree) {
    if (hasSemantic()) {
      Type varType;
      ExpressionTree expr;
      switch (tree.kind()) {
        case ASSIGNMENT:
          AssignmentExpressionTree aet = (AssignmentExpressionTree) tree;
          varType = aet.symbolType();
          expr = aet.expression();
          checkExpression(varType, expr);
          break;
        case VARIABLE:
          VariableTree variableTree = (VariableTree) tree;
          varType = variableTree.type().symbolType();
          expr = variableTree.initializer();
          checkExpression(varType, expr);
          break;
        case METHOD_INVOCATION:
          checkMethodInvocationArgument((MethodInvocationTree) tree);
          break;
        case METHOD:
          checkMethodTree((MethodTreeImpl) tree);
          break;
        case DIVIDE:
          BinaryExpressionTree binaryExpr = (BinaryExpressionTree) tree;
          if (isIntOrLong(binaryExpr.symbolType())) {
            checkIntegerDivisionInsideFloatingPointExpression(binaryExpr);
          }
          break;
        default:
          throw new IllegalArgumentException("Tree " + tree.kind() + " not handled.");
      }
    }
  }

