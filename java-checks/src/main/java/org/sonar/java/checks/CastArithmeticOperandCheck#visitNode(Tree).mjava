  @Override
  public void visitNode(Tree tree) {
    if (hasSemantic()) {
      Type varType;
      ExpressionTree expr;
      if (tree.is(Tree.Kind.ASSIGNMENT)) {
        AssignmentExpressionTree aet = (AssignmentExpressionTree) tree;
        varType = ((AbstractTypedTree) aet.variable()).getSymbolType();
        expr = aet.expression();
        checkExpression(varType, expr);
      } else if (tree.is(Tree.Kind.VARIABLE)) {
        VariableTree variableTree = (VariableTree) tree;
        varType = ((AbstractTypedTree) variableTree.type()).getSymbolType();
        expr = variableTree.initializer();
        checkExpression(varType, expr);
      } else {
        MethodInvocationTreeImpl mit = (MethodInvocationTreeImpl) tree;
        Symbol symbol = mit.getSymbol();
        if (symbol.isKind(Symbol.MTH)) {
          List<Type> parametersTypes = ((Symbol.MethodSymbol) symbol).getParametersTypes();
          if (mit.arguments().size() == parametersTypes.size()) {
            int i = 0;
            for (Type argType : parametersTypes) {
              checkExpression(argType, mit.arguments().get(i));
              i++;
            }
          }
        }
      }
    }
  }

