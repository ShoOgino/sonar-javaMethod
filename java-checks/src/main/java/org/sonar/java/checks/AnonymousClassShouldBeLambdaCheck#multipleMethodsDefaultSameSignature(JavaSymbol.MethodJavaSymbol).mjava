  private static boolean multipleMethodsDefaultSameSignature(JavaSymbol.MethodJavaSymbol methodSymbol) {
    JavaSymbol.TypeJavaSymbol typeJavaSymbol = methodSymbol.overriddenSymbol().enclosingClass();
    Set<JavaSymbol.MethodJavaSymbol> methods = new HashSet<>();
    methods.addAll(
      methodSymbol.overriddenSymbol().enclosingClass().memberSymbols().stream().filter(Symbol::isMethodSymbol).map(x -> ((JavaSymbol.MethodJavaSymbol) x))
        .collect(Collectors.toList()));
    List<TypeJavaSymbol> list = typeJavaSymbol.superTypes().stream().filter(type -> !type.name().equals("Object"))
      .map(ClassJavaType::getSymbol).collect(Collectors.toList());
    for (JavaSymbol.TypeJavaSymbol t : list) {
      methods.addAll(t.memberSymbols().stream().filter(Symbol::isMethodSymbol).map(x -> ((JavaSymbol.MethodJavaSymbol) x))
        .filter(method -> !method.name().equals(methodSymbol.name()))
        .collect(Collectors.toList()));
    }
    return checkForDefaultMethodsWithSameSignature(methodSymbol, methods);
  }

