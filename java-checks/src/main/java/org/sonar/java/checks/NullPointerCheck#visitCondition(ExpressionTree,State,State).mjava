  private void visitCondition(ExpressionTree tree, State trueState, @Nullable State falseState) {
    if (tree.is(Tree.Kind.EQUAL_TO, Tree.Kind.NOT_EQUAL_TO)) {
      BinaryExpressionTree binaryTree = (BinaryExpressionTree) tree;
      VariableSymbol identifierSymbol;
      // currently only ident == null, ident != null, null == ident and null != ident are covered.
      // constraints nested in logical and/or operators are not covered.
      if (binaryTree.leftOperand().is(Tree.Kind.NULL_LITERAL) && binaryTree.rightOperand().is(Tree.Kind.IDENTIFIER)) {
        identifierSymbol = (VariableSymbol) semanticModel.getReference((IdentifierTreeImpl) binaryTree.rightOperand());
      } else if (binaryTree.leftOperand().is(Tree.Kind.IDENTIFIER) && binaryTree.rightOperand().is(Tree.Kind.NULL_LITERAL)) {
        identifierSymbol = (VariableSymbol) semanticModel.getReference((IdentifierTreeImpl) binaryTree.leftOperand());
      } else {
        super.visitBinaryExpression(binaryTree);
        return;
      }
      if (binaryTree.is(Tree.Kind.EQUAL_TO)) {
        trueState.setVariableValue(identifierSymbol, AbstractValue.NULL);
        if (falseState != null) {
          falseState.setVariableValue(identifierSymbol, AbstractValue.NOTNULL);
        }
      } else {
        Preconditions.checkState(binaryTree.is(Tree.Kind.NOT_EQUAL_TO));
        trueState.setVariableValue(identifierSymbol, AbstractValue.NOTNULL);
        if (falseState != null) {
          falseState.setVariableValue(identifierSymbol, AbstractValue.NULL);
        }
      }
    }
    scan(tree);
  }

