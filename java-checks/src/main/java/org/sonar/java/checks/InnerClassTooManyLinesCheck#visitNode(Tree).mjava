  @Override
  public void visitNode(Tree tree) {
    ClassTree node = (ClassTree) tree;
    Symbol.TypeSymbol symbol = node.symbol();
    Symbol owner = symbol.owner();
    Type ownerType = owner.type();
    if (ownerType != null && ownerType.isClass() && owner.owner().isPackageSymbol()) {
      // raise only one issue for the first level of nesting when multiple nesting
      int lines = new LinesOfCodeVisitor().linesOfCode(node);
      if (lines > max) {
        reportIssue(ExpressionsHelper.reportOnClassTree(node), "Reduce this class from " + lines +
          " lines to the maximum allowed " + max + " or externalize it in a public class.");
      }
    }
  }

