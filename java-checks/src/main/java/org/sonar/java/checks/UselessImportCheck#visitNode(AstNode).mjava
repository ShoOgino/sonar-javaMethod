  @Override
  public void visitNode(AstNode node) {
    if (node.is(JavaGrammar.PACKAGE_DECLARATION)) {
      currentPackage = mergeIdentifiers(node.getFirstChild(JavaTreeMaker.QUALIFIED_EXPRESSION_KINDS));
    } else if (node.is(JavaGrammar.IMPORT_DECLARATION)) {
      if (!isStaticImport(node)) {
        String reference = mergeIdentifiers(node.getFirstChild(JavaTreeMaker.QUALIFIED_EXPRESSION_KINDS));

        if ("java.lang".equals(reference)) {
          getContext().createLineViolation(this, "Remove this unnecessary import: java.lang classes are always implicitly imported.", node);
        } else if (isImportFromSamePackage(reference)) {
          getContext().createLineViolation(this, "Remove this unnecessary import: same package classes are always implicitly imported.", node);
        } else if (!isImportOnDemand(node)) {
          if (isJavaLangImport(reference)) {
            getContext().createLineViolation(this, "Remove this unnecessary import: java.lang classes are always implicitly imported.", node);
          } else if (isDuplicatedImport(reference)) {
            getContext().createLineViolation(this, "Remove this duplicated import.", node);
          } else {
            lineByImportReference.put(reference, node.getTokenLine());
            pendingImports.add(reference);
          }
        }
      }
    } else if (!node.getParent().is(JavaGrammar.IMPORT_DECLARATION, Kind.MEMBER_SELECT)) {
      pendingReferences.addAll(getReferences(node));
    }
  }

