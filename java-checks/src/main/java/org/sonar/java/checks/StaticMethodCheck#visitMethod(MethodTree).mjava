  @Override
  public void visitMethod(MethodTree tree) {
    if (isExcluded(tree)) {
      return;
    }
    Symbol.MethodSymbol symbol = tree.symbol();
    if (outerClasses.size() > 1 && !outerClasses.peek().isStatic()) {
      return;
    }
    atLeastOneReference.push(Boolean.FALSE);
    scan(tree.block());
    Boolean oneReference = atLeastOneReference.pop();
    if (symbol.isPrivate() && !symbol.isStatic() && !oneReference) {
      context.addIssue(tree, this, "Make \"" + symbol.name() + "\" a \"static\" method.");
    }
  }

