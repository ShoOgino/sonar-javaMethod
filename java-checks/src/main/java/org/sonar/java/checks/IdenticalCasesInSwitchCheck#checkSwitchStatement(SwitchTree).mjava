  protected Map<CaseGroupTree, Set<CaseGroupTree>> checkSwitchStatement(SwitchTree node) {
    Map<CaseGroupTree, Set<CaseGroupTree>> identicalBranches = new HashMap<>();
    int index = 0;
    List<CaseGroupTree> cases = node.cases();
    Set<CaseGroupTree> duplicates = new HashSet<>();
    for (CaseGroupTree caseGroupTree : cases) {
      index++;
      if (duplicates.contains(caseGroupTree)) {
        continue;
      }
      for (int i = index; i < cases.size(); i++) {
        CaseGroupTree caseI = cases.get(i);
        if (SyntacticEquivalence.areEquivalent(caseGroupTree.body(), caseI.body())) {
          duplicates.add(caseI);
          identicalBranches.computeIfAbsent(caseGroupTree, k -> new HashSet<>()).add(caseI);
        }
      }
    }
    return identicalBranches;
  }

