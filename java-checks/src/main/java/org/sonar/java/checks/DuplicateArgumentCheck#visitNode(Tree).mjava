  @Override
  public void visitNode(Tree tree) {
    MethodInvocationTree mit = (MethodInvocationTree) tree;
    Arguments arguments = mit.arguments();
    int arity = arguments.size();
    if (arity <= 1) {
      return;
    }
    Set<ExpressionTree> reported = new HashSet<>();
    for (int i = 0; i < arity; i++) {
      ExpressionTree arg = ExpressionUtils.skipParentheses(arguments.get(i));
      if (isLiteral(arg) || arg.is(Tree.Kind.IDENTIFIER) || arg.is(Tree.Kind.NEW_CLASS)) {
        continue;
      }
      for (int j = i + 1; j < arity; j++) {
        ExpressionTree otherArg = ExpressionUtils.skipParentheses(arguments.get(j));
        if (!reported.contains(otherArg) && SyntacticEquivalence.areEquivalent(arg, otherArg)) {
          reportIssue(
            otherArg,
            String.format("Verify that this is the intended value; it is the same as the %s argument.", argumentNumber(i + 1)),
            Collections.singletonList(new JavaFileScannerContext.Location("", arg)),
            null);
          reported.add(otherArg);
        }
      }
    }
  }

