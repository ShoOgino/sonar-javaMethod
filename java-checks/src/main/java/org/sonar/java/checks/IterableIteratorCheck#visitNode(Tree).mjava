  @Override
  public void visitNode(Tree tree) {
    if (!hasSemantic()) {
      return;
    }
    ReturnThis returnThis = new ReturnThis();
    ClassTree classTree = (ClassTree) tree;
    Type classType = classTree.symbol().type();
    if(!(classType.isSubtypeOf("java.util.Iterator") && classType.isSubtypeOf("java.lang.Iterable"))) {
      return;
    }
    classTree.members().stream()
      .filter(m -> m.is(Tree.Kind.METHOD))
      .filter(m -> ITERATOR.matches(((MethodTree) m)))
      .forEach(t -> t.accept(returnThis));
    if (!returnThis.issueLocations.isEmpty()) {
      reportIssue(returnThis.issueLocations.get(0), "Refactor this code so that the Iterator supports multiple traversal",
        returnThis.issueLocations.stream().skip(1)
          .map(t -> new JavaFileScannerContext.Location("", t)).collect(Collectors.toList()),
        null);
    }
  }

