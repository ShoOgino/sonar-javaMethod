  @Override
  public void visitNode(Tree tree) {
    ClassTree classTree = (ClassTree) tree;
    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {
      return;
    }

    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);

    abstractKeyword.ifPresent(keyword -> {
      JavaFileScannerContext.Location keywordLocation = new JavaFileScannerContext.Location("This class is \"abstract\".", keyword);
      List<JavaFileScannerContext.Location> secondaryLocations = Collections.singletonList(keywordLocation);
      classTree.members().stream()
        .filter(PublicConstructorInAbstractClassCheck::isConstructor)
        .map(MethodTree.class::cast)
        .map(PublicConstructorInAbstractClassCheck::isPublic)
        .filter(Optional::isPresent)
        .map(Optional::get)
        .forEach(modifier -> reportIssue(modifier, "Change the visibility of this constructor to \"protected\".",
          secondaryLocations, null));
    });
  }

