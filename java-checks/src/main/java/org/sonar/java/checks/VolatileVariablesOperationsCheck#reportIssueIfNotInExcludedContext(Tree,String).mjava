  private void reportIssueIfNotInExcludedContext(Tree tree, String recommendedType) {
    Tree current = tree.parent();
    boolean foundClass = false;
    while (!foundClass) {
      switch (current.kind()) {
        case LAMBDA_EXPRESSION:
        case SYNCHRONIZED_STATEMENT:
        case COMPILATION_UNIT:
          return;
        case METHOD:
          if (ModifiersUtils.hasModifier(((MethodTree) current).modifiers(), Modifier.SYNCHRONIZED)) {
            return;
          }
          break;
        case ENUM:
        case CLASS:
          if (((ClassTree) current).simpleName() == null) {
            return;
          }
          // we got to a non anonymous class, we can safely raise an issue
          foundClass = true;
          break;
      }
      current = current.parent();
    }
    reportIssue(tree, String.format("Use an \"%s\" for this field; its operations are atomic.", recommendedType));
  }

