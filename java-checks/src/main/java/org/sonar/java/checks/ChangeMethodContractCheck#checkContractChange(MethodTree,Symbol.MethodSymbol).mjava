  private void checkContractChange(MethodTree methodTree, Symbol.MethodSymbol overridee) {
    if (MethodTreeUtils.isEqualsMethod(methodTree)) {
      NullableAnnotationUtils.nonNullAnnotation(methodTree.parameters().get(0).modifiers())
        .ifPresent(annotation -> reportIssue(annotation, "Equals method should accept null parameters and return false."));
      return;
    }
    for (int i = 0; i < methodTree.parameters().size(); i++) {
      VariableTree parameter = methodTree.parameters().get(i);
      checkParameter(parameter, JUtils.parameterAnnotations(overridee, i));
    }
    if (NullableAnnotationUtils.isAnnotatedNonNull(overridee)) {
      NullableAnnotationUtils.nullableAnnotation(methodTree.modifiers())
        .ifPresent(annotation -> reportIssue(annotation, "Remove this \""+ annotation.symbolType().name() +"\" annotation to honor the overridden method's contract."));
    }
  }

