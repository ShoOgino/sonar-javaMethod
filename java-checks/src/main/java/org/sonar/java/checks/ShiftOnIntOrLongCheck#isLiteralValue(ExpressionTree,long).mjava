  private boolean isLiteralValue(ExpressionTree tree, long value) {
    if (tree.is(Kind.INT_LITERAL, Kind.LONG_LITERAL)) {
      String expressionValue = LiteralUtils.trimLongSuffix(((LiteralTree) tree).value());
      try {
        return Long.decode(expressionValue) == value;
      } catch (NumberFormatException e) {
        // Long.decode() may fail in case of very large long number written in hexadecimal. In such situation, the long we provide
        // is necessarily not equals.
        // Note that Long.MAX_VALUE = "0x7FFF_FFFF_FFFF_FFFFL", but it is possible to write larger numbers in hexadecimal
        // to be used as mask in bitwise operation. For instance:
        // 0x8000_0000_0000_0000L (MAX_VALUE + 1),
        // 0xFFFF_FFFF_FFFF_FFFFL (only ones),
        // 0xFFFF_FFFF_FFFF_FFFEL (only ones except least significant bit), ...
      }
    }
    return false;
  }

