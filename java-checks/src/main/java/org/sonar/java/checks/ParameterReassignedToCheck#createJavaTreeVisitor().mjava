  @Override
  public JavaTreeVisitor createJavaTreeVisitor() {
    return new BaseTreeVisitor() {

      private final Set<String> variables = Sets.newHashSet();

      @Override
      public void visitCompilationUnit(CompilationUnitTree tree) {
        variables.clear();
        super.visitCompilationUnit(tree);
      }

      @Override
      public void visitMethod(MethodTree tree) {
        for (VariableTree parameterTree : tree.parameters()) {
          variables.add(parameterTree.simpleName());
        }
        super.visitMethod(tree);
        for (VariableTree parameterTree : tree.parameters()) {
          variables.remove(parameterTree.simpleName());
        }
      }

      @Override
      public void visitCatch(CatchTree tree) {
        variables.add(tree.parameter().simpleName());
        super.visitCatch(tree);
        variables.remove(tree.parameter().simpleName());
      }

      @Override
      public void visitAssignmentExpression(AssignmentExpressionTree tree) {
        if (tree.variable().is(Tree.Kind.IDENTIFIER)) {
          IdentifierTree identifier = (IdentifierTree) tree.variable();
          if (variables.contains(identifier.name())) {
            getContext().createLineViolation(
              ParameterReassignedToCheck.this,
              "Introduce a new variable instead of reusing the parameter \"" + identifier.name() + "\".",
              ((JavaTree) identifier).getLine());
          }
        }
      }

    };
  }

