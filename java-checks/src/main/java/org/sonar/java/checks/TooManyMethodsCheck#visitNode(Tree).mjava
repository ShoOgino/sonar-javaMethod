  @Override
  public void visitNode(Tree tree) {
    List<Tree> count = new ArrayList<>();
    ClassTree classTree = (ClassTree) tree;
    for (Tree member : classTree.members()) {
      if (member.is(Tree.Kind.METHOD, Tree.Kind.CONSTRUCTOR) && (countNonPublic || ((MethodTree) member).symbol().isPublic())) {
        count.add(member);
      }
    }
    if (count.size() > maximumMethodThreshold) {
      List<JavaFileScannerContext.Location> secondary = new ArrayList<>();
      for (Tree element : count) {
        secondary.add(new JavaFileScannerContext.Location("Method + 1", element));
      }
      reportIssue(
        classTree.simpleName(),
        String.format("\"%s\" \"%s\" has %d%s methods, which is greater than the %d authorized. Split it into smaller classes.",
          classTree.declarationKeyword().text(), classTree.simpleName(), count.size(), countNonPublic ? "" : " public", maximumMethodThreshold),
        secondary,
        null);
    }
  }

