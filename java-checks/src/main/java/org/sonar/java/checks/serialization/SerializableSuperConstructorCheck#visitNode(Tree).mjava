  @Override
  public void visitNode(Tree tree) {
    ClassTree classTree = (ClassTree) tree;
    if (classTree.simpleName() == null) {
      // do not cover anonymous classes
      return;
    }
    Symbol.TypeSymbol classSymbol = classTree.symbol();
    Type superclass = classSymbol.superClass();
    if (isSerializable(classSymbol.type()) && isNotSerializableMissingNoArgConstructor(superclass) && !implementsSerializableMethods(classSymbol)) {
      reportIssue(classTree.superClass(), "Add a no-arg constructor to \"" + superclass.name() + "\".");
    }
  }

