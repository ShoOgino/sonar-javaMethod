  @Override
  public void visitNode(Tree tree) {
    ClassTree classTree = (ClassTree) tree;
    Symbol.TypeSymbol typeSymbol = classTree.symbol();
    if (typeSymbol.isAbstract()) {
      Collection<Symbol> symbols = typeSymbol.memberSymbols();
      int abstractMethod = countAbstractMethods(symbols);
      if (isExtendingObject(classTree) && abstractMethod == symbols.size() - 2) {
        // emtpy abstract class or only abstract method
        context.addIssue(tree, this, "Convert this \"" + typeSymbol + "\" class to an interface");
      }
      if (symbols.size() > 2 && abstractMethod == 0 && !isPartialImplementation(classTree)) {
        // Not empty abstract class with no abstract method
        context.addIssue(tree, this, "Convert this \"" + typeSymbol + "\" class to a concrete class with a private constructor");
      }
    }
  }

