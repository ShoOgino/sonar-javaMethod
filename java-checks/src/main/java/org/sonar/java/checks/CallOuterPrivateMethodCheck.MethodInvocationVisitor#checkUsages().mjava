    void checkUsages() {
      
      usagesByInnerClass.forEach((symbol, innerClassUsages) -> innerClassUsages.forEach((methodUsed, count) -> {
        boolean matchArity = unknownInvocations.getOrDefault(methodUsed.name(), new HashSet<>())
          .stream()
          .anyMatch(mit -> hasSameArity((Symbol.MethodSymbol) methodUsed, mit));

        // if an unknown method has same name and same arity, do not report, likely a FP.
        if (!matchArity && methodUsed.usages().size() == count) {
          reportIssueOnMethod((MethodTree) methodUsed.declaration(), symbol);
        }
      }));
    }

