    private List<List<Type>> computeChains(Symbol m, Type type) {
      List<List<Type>> result = new ArrayList<>();
      Symbol.TypeSymbol typeSymbol = type.symbol();
      Type superClass = typeSymbol.superClass();
      if (superClass != null) {
        computeChainsForSuperType(result, m, type, superClass);
      }
      for (Type i : typeSymbol.interfaces()) {
        computeChainsForSuperType(result, m, type, i);
      }

      boolean definesSymbol = definesSymbol(m, typeSymbol);
      boolean isSpecialization = !((JavaType) startType).isParameterized() && ((JavaType) type).isParameterized();
      if (definesSymbol && !isSpecialization && result.isEmpty()) {
        result.add(Lists.newArrayList(type));
      }
      return result;
    }

