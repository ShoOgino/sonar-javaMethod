  @Override
  public void visitNode(Tree tree) {
    String identifier;
    ExpressionTree shift;

    if (tree.is(Kind.LEFT_SHIFT, Kind.RIGHT_SHIFT)) {
      BinaryExpressionTree binaryExpressionTree = (BinaryExpressionTree) tree;
      identifier = getIdentifierName(binaryExpressionTree.leftOperand());
      shift = binaryExpressionTree.rightOperand();
    } else {
      AssignmentExpressionTree assignmentExpressionTree = (AssignmentExpressionTree) tree;
      identifier = getIdentifierName(assignmentExpressionTree.variable());
      shift = assignmentExpressionTree.expression();
    }

    int sign = shift.is(Kind.UNARY_MINUS) ? -1 : 1;
    if (shift.is(Kind.UNARY_MINUS, Kind.UNARY_PLUS)) {
      shift = ((UnaryExpressionTree) shift).expression();
    }

    if (shift.is(Kind.INT_LITERAL, Kind.LONG_LITERAL)) {
      int base = getBase(tree);
      long numberBits = sign * Long.decode(((LiteralTree) shift).value());
      long reducedNumberBits = numberBits % base;
      String message = getMessage(numberBits, reducedNumberBits, base, identifier);
      if (message != null) {
        addIssue(tree, message);
      }
    }
  }

