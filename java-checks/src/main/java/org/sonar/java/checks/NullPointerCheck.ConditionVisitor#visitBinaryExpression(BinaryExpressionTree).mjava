    @Override
    public void visitBinaryExpression(BinaryExpressionTree tree) {
      VariableSymbol identifierSymbol;
      // currently only ident == null, ident != null, null == ident and null != ident are covered.
      // logical and/or operators are not supported.
      if (tree.leftOperand().is(Tree.Kind.NULL_LITERAL) && tree.rightOperand().is(Tree.Kind.IDENTIFIER)) {
        identifierSymbol = (VariableSymbol) semanticModel.getReference((IdentifierTreeImpl) tree.rightOperand());
      } else if (tree.leftOperand().is(Tree.Kind.IDENTIFIER) && tree.rightOperand().is(Tree.Kind.NULL_LITERAL)) {
        identifierSymbol = (VariableSymbol) semanticModel.getReference((IdentifierTreeImpl) tree.leftOperand());
      } else {
        return;
      }
      if (tree.is(Tree.Kind.EQUAL_TO)) {
        trueState.setVariableValue(identifierSymbol, AbstractValue.NULL);
        if (falseState != null) {
          falseState.setVariableValue(identifierSymbol, AbstractValue.NOTNULL);
        }
      } else {
        Preconditions.checkState(tree.is(Tree.Kind.NOT_EQUAL_TO));
        trueState.setVariableValue(identifierSymbol, AbstractValue.NOTNULL);
        if (falseState != null) {
          falseState.setVariableValue(identifierSymbol, AbstractValue.NULL);
        }
      }
    }

