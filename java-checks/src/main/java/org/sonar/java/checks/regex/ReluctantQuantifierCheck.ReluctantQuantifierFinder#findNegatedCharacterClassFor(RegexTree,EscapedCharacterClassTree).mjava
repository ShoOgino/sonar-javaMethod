    private Optional<String> findNegatedCharacterClassFor(RegexTree tree, @Nullable EscapedCharacterClassTree base) {
      if (tree instanceof CharacterClassElementTree && hasNoIntersection(((CharacterClassElementTree) tree), base)) {
        return Optional.empty();
      }
      String result;
      switch (tree.kind()) {
        case CHARACTER:
          result = "[^" + tree.getText() + negateEscapedCharacter(base) + "]";
          break;
        case ESCAPED_CHARACTER_CLASS:
          EscapedCharacterClassTree escapedClass = (EscapedCharacterClassTree) tree;
          result = escapedCharacterFollowedByEscapedCharacter(escapedClass, negateEscapedCharacter(base));
          break;
        case CHARACTER_CLASS:
          CharacterClassTree characterClass = (CharacterClassTree) tree;
          String body = characterClass.getContents().getText();
          if (characterClass.isNegated()) {
            result = "[" + body + escapedCharacterToString(base) + "]";
          } else {
            result = "[^" + body + negateEscapedCharacter(base) + "]";
          }
          break;
        case NON_CAPTURING_GROUP:
          RegexTree element = ((NonCapturingGroupTree)tree).getElement();
          return element == null ? Optional.empty() : findNegatedCharacterClassFor(element, base);
        default:
          return Optional.empty();
      }
      return Optional.of(result);
    }

