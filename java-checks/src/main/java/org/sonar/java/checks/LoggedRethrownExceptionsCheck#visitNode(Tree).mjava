  @Override
  public void visitNode(Tree tree) {
    if (!hasSemantic()) {
      return;
    }
    CatchTree catchTree = (CatchTree) tree;
    boolean isLogging = false;
    List<Location> secondaryLocations = new ArrayList<>();
    for (StatementTree statementTree : catchTree.block().body()) {
      IdentifierTree exceptionIdentifier = catchTree.parameter().simpleName();
      if (isLogging && statementTree.is(Tree.Kind.THROW_STATEMENT) &&
        isExceptionUsed(exceptionIdentifier, ((ThrowStatementTree) statementTree).expression())) {

        secondaryLocations.add(new Location("", ((ThrowStatementTree) statementTree).expression()));
        reportIssue(catchTree.parameter(), "Either log this exception and handle it, or rethrow it with some contextual information.", secondaryLocations, 0);
        return;
      } else if (isLoggingMethod(statementTree, exceptionIdentifier)) {
        secondaryLocations.add(new Location("", statementTree));
        isLogging = true;
      }
    }
  }

