  private static Optional<String> matchFunctionalInterface(Type type, boolean usedAsMethodReference) {
    if (type.isUnknown() || !type.isParameterized()) {
      return Optional.empty();
    }
    switch (type.fullyQualifiedName()) {
      case "java.util.function.Function":
        return handleFunctionInterface(type, usedAsMethodReference);
      case "java.util.function.BiFunction":
        return handleBiFunctionInterface(type);
      case "java.util.function.BiConsumer":
        return handleBiConsumerInterface(type, usedAsMethodReference);
      case "java.util.function.Supplier":
        return handleSupplier(type, usedAsMethodReference);
      case "java.util.function.Consumer":
      case "java.util.function.Predicate":
      case "java.util.function.UnaryOperator":
      case "java.util.function.BinaryOperator":
        return handleSingleParameterFunctions(type, usedAsMethodReference);
      default:
        return Optional.empty();
    }
  }

