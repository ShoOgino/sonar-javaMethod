  private void checkSetupTearDownSignature(MethodTree methodTree, int jUnitVersion) {
    Symbol.MethodSymbol symbol = methodTree.symbol();
    if (Boolean.TRUE.equals(methodTree.isOverriding())) {
      // Annotation can be in a parent.
      return;
    }

    SymbolMetadata metadata = symbol.metadata();
    Optional<String> junit4Annotation = JUNIT4_ANNOTATIONS.stream().filter(metadata::isAnnotatedWith).findFirst();
    boolean isAnnotatedWithJUnit4 = junit4Annotation.isPresent();
    boolean isAnnotatedWithJUnit5 = JUNIT5_ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith);

    if (jUnitVersion == 5 && isAnnotatedWithJUnit4 && !isAnnotatedWithJUnit5) {
      String jUnit4Annotation = junit4Annotation.get();
      reportIssue(methodTree.simpleName(), String.format("Annotate this method with JUnit5 '@%s' instead of JUnit4 '@%s'.",
        JUNIT4_TO_JUNIT5.get(jUnit4Annotation),
        jUnit4Annotation.substring(jUnit4Annotation.lastIndexOf('.') + 1)));
    } else if (!isAnnotatedWithJUnit4 && !isAnnotatedWithJUnit5) {
      reportIssue(methodTree.simpleName(), String.format("Annotate this method with JUnit%d '@%s' or rename it to avoid confusion.",
        jUnitVersion,
        expectedAnnotation(symbol, jUnitVersion)));
    }
  }

