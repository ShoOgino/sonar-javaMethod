  private static boolean isSerializableAndValueBased(Type type) {
    // we check first the ParametrizedTypeJavaType, in order to filter out the non-serializable
    // generic value-based class Optional<T>
    JavaType javaType = (JavaType) type;
    if (javaType.isParameterized()) {
      ParametrizedTypeJavaType parameterizedType = (ParametrizedTypeJavaType) javaType;
      return isSubtypeOfCollectionApi(parameterizedType) &&
        parameterizedType.typeParameters().stream()
          .anyMatch(t -> isSerializableAndValueBased(parameterizedType.substitution(t)));
    }
    return ValueBasedUtils.isValueBased(javaType);
  }

