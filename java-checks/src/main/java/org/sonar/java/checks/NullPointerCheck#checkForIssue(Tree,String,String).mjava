  /**
   * raises an issue if the passed tree can be null.
   *
   * @param tree tree that must be checked
   * @param nullableMessage message to generate when the tree is an identifier or a method invocation
   * @param nullMessage message to generate when the tree is the null literal
   */
  private void checkForIssue(Tree tree, String nullableMessage, String nullMessage) {
    if (tree.is(Tree.Kind.IDENTIFIER)) {
      Symbol symbol = ((IdentifierTree) tree).symbol();
      if (checkNullity(tree) == AbstractValue.NULL) {
        // prevents reporting issue multiple times
        currentState.setVariableValue((VariableSymbol) symbol, AbstractValue.UNKNOWN);
        context.addIssue(tree, this, String.format(nullableMessage, symbol.name()));
      }
    } else if (tree.is(Tree.Kind.METHOD_INVOCATION)) {
      Symbol symbol = ((MethodInvocationTree) tree).symbol();
      if (checkNullity(symbol) == AbstractValue.NULL) {
        context.addIssue(tree, this, String.format(nullableMessage, symbol.name()));
      }
    } else if (tree.is(Tree.Kind.NULL_LITERAL)) {
      context.addIssue(tree, this, nullMessage);
    }
  }

