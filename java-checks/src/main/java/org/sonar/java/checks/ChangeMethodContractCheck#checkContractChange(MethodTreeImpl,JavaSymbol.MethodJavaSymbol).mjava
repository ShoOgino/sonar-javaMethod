  private void checkContractChange(MethodTreeImpl methodTree, JavaSymbol.MethodJavaSymbol overridee) {
    if (methodTree.isEqualsMethod() && methodTree.parameters().get(0).symbol().metadata().isAnnotatedWith("javax.annotation.Nonnull")) {
      reportIssue(methodTree.parameters().get(0), "Equals method should accept null parameters and return false.");
      return;
    }
    for (int i = 0; i < methodTree.parameters().size(); i++) {
      Symbol paramSymbol = methodTree.parameters().get(i).symbol();
      Symbol overrideeParamSymbol = overridee.getParameters().scopeSymbols().get(i);
      if (nonNullVsNull(paramSymbol, overrideeParamSymbol) || nonNullVsNull(overrideeParamSymbol, paramSymbol)) {
        reportIssue(methodTree.parameters().get(i), "The \"" + paramSymbol.name()
            + "\" parameter nullability is different in the superclass method, and that should not be changed.");
      }
    }
    if (nonNullVsNull(methodTree.symbol(), overridee) || nonNullVsNull(overridee, methodTree.symbol())) {
      reportIssue(methodTree.returnType(), "The return value nullability of this method is different in the superclass, and that should not be changed.");
    }
  }

