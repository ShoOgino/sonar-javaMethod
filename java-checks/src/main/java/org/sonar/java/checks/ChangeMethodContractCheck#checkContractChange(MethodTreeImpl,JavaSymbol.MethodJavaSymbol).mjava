  private void checkContractChange(MethodTreeImpl methodTree, JavaSymbol.MethodJavaSymbol overridee) {
    if (methodTree.isEqualsMethod() && methodTree.parameters().get(0).symbol().metadata().isAnnotatedWith("javax.annotation.Nonnull")) {
      reportIssue(methodTree.parameters().get(0), "Equals method should accept null parameters and return false.");
      return;
    }
    for (int i = 0; i < methodTree.parameters().size(); i++) {
      Symbol paramSymbol = methodTree.parameters().get(i).symbol();
      Symbol overrideeParamSymbol = overridee.getParameters().scopeSymbols().get(i);
      if (nonNullVsNull(paramSymbol, overrideeParamSymbol)) {
        Tree reportTree = methodTree.parameters().get(i);
        for (AnnotationTree annotationTree : methodTree.parameters().get(i).modifiers().annotations()) {
          if(annotationTree.symbolType().is("javax.annotation.Nonnull")) {
            reportTree = annotationTree;
          }
        }
        reportIssue(reportTree, "Remove this \"Nonnull\" annotation to honor the overridden method's contract.");
      }
    }
    if (nonNullVsNull(overridee, methodTree.symbol())) {
      for (AnnotationTree annotationTree : methodTree.modifiers().annotations()) {
        if(annotationTree.symbolType().is("javax.annotation.Nullable") || annotationTree.symbolType().is("javax.annotation.CheckForNull")) {
          reportIssue(annotationTree, "Remove this \""+ annotationTree.symbolType().name() +"\" annotation to honor the overridden method's contract.");
        }
      }
    }
  }

