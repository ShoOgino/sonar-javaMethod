  @Override
  public void visitBinaryExpression(BinaryExpressionTree tree) {
    super.visitBinaryExpression(tree);
    if (tree.is(Tree.Kind.EQUAL_TO, Tree.Kind.NOT_EQUAL_TO)) {
      ExpressionTree leftExpression = tree.leftOperand();
      ExpressionTree rightExpression = tree.rightOperand();
      Type leftOpType = leftExpression.symbolType();
      Type rightOpType = rightExpression.symbolType();
      if (!isExcluded(leftOpType, rightOpType) && hasObjectOperand(leftOpType, rightOpType)
        && neitherIsThis(leftExpression, rightExpression)
        && bothImplementsEqualsMethod(leftOpType, rightOpType)
        && neitherIsPublicStaticFinal(leftExpression, rightExpression)) {
        context.reportIssue(this, tree.operatorToken(), "Use the \"equals\" method if value comparison was intended.");
      }
    }
  }

