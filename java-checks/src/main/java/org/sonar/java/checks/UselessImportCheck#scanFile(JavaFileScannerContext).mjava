  @Override
  public void scanFile(JavaFileScannerContext context) {
    this.context = context;
    CompilationUnitTree cut = context.getTree();
    ExpressionTree packageName = cut.packageDeclaration() != null ? cut.packageDeclaration().packageName() : null;

    pendingReferences.clear();
    lineByImportReference.clear();
    pendingImports.clear();

    currentPackage = concatenate(packageName);
    for (ImportClauseTree importClauseTree : cut.imports()) {
      ImportTree importTree = null;

      if (importClauseTree.is(Tree.Kind.IMPORT)) {
        importTree = (ImportTree) importClauseTree;
      }

      if (importTree != null && !importTree.isStatic()) {
        String importName = concatenate((ExpressionTree) importTree.qualifiedIdentifier());
        if ("java.lang.*".equals(importName)) {
          context.addIssue(importTree, this, "Remove this unnecessary import: java.lang classes are always implicitly imported.");
        } else if (isImportFromSamePackage(importName)) {
          context.addIssue(importTree, this, "Remove this unnecessary import: same package classes are always implicitly imported.");
        } else if (!isImportOnDemand(importName)) {
          if (isJavaLangImport(importName)) {
            context.addIssue(importTree, this, "Remove this unnecessary import: java.lang classes are always implicitly imported.");
          } else if (isDuplicatedImport(importName)) {
            context.addIssue(importTree, this, "Remove this duplicated import.");
          } else {
            lineByImportReference.put(importName, FirstSyntaxTokenFinder.firstSyntaxToken(importTree).line());
            pendingImports.add(importName);
          }
        }
      }
    }
    //check references
    scan(cut);
    //check references from comments.
    new CommentVisitor().checkImportsFromComments(cut, pendingImports);
    leaveFile();
  }

