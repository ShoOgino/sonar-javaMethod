    @Override
    public void visitCharacterClassUnion(CharacterClassUnionTree tree) {
      Set<RegexSyntaxElement> duplicates = new LinkedHashSet<>();
      SimplifiedRegexCharacterClass characterClass = new SimplifiedRegexCharacterClass();
      for (CharacterClassElementTree element : tree.getCharacterClasses()) {
        List<RegexSyntaxElement> intersections = new SimplifiedRegexCharacterClass(element).findIntersections(characterClass);

        if (!intersections.isEmpty()) {
          for (RegexSyntaxElement intersection : intersections) {
            if (!duplicates.contains(intersection)) {
              // The element the current element is intersecting with should be included as well.
              duplicates.add(intersection);
            }
          }
          duplicates.add(element);
        }
        characterClass.add(element);
      }
      if (!duplicates.isEmpty()) {
        List<RegexIssueLocation> secondaries = duplicates.stream()
          .skip(1)
          .map(duplicate -> new RegexIssueLocation(duplicate, "Additional duplicate"))
          .collect(Collectors.toList());
        reportIssue(duplicates.iterator().next(), MESSAGE, null, secondaries);
      }
      super.visitCharacterClassUnion(tree);
    }

