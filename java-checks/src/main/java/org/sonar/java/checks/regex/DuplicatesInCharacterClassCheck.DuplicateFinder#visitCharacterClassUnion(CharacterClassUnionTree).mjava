    @Override
    public void visitCharacterClassUnion(CharacterClassUnionTree tree) {
      List<RegexTree> duplicates = new ArrayList<>();
      TreeMap<Integer, Boolean> inCharacterClass = new TreeMap<>();
      for (RegexTree element : tree.getCharacterClasses()) {
        if (element.is(RegexTree.Kind.PLAIN_CHARACTER, RegexTree.Kind.UNICODE_CODE_POINT)) {
          int ch = ((CharacterTree) element).codePointOrUnit();
          processRange(duplicates, inCharacterClass, ch, ch, element);
        } else if (element.is(RegexTree.Kind.CHARACTER_RANGE)) {
          CharacterRangeTree range = (CharacterRangeTree) element;
          int lower = range.getLowerBound().codePointOrUnit();
          int upper = range.getUpperBound().codePointOrUnit();
          processRange(duplicates, inCharacterClass, lower, upper, range);
        }
      }
      if (!duplicates.isEmpty()) {
        List<RegexIssueLocation> secondaries = duplicates.stream()
          .skip(1)
          .map(duplicate -> new RegexIssueLocation(duplicate, "Additional duplicate"))
          .collect(Collectors.toList());
        reportIssue(duplicates.get(0), MESSAGE, null, secondaries);
      }
      super.visitCharacterClassUnion(tree);
    }

