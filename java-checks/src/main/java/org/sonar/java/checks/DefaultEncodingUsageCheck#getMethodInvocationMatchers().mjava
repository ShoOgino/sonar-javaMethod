  @Override
  protected MethodMatchers getMethodInvocationMatchers() {
    ArrayList<MethodMatchers> matchers = new ArrayList<>(Arrays.asList(
      MethodMatchers.create().ofTypes(JAVA_LANG_STRING).names("getBytes")
        .addWithoutParametersMatcher()
        .addParametersMatcher(INT, INT, BYTE_ARRAY, INT)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_LANG_STRING).constructor()
        .addParametersMatcher(BYTE_ARRAY)
        .addParametersMatcher(BYTE_ARRAY, INT, INT)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_IO_BYTEARRAYOUTPUTSTREAM).names(TO_STRING)
        .addWithoutParametersMatcher()
        .build(),
      MethodMatchers.create().ofTypes(JAVA_IO_FILEREADER).constructor()
        .addParametersMatcher(JAVA_IO_FILE)
        .addParametersMatcher(JAVA_IO_FILEDESCRIPTOR)
        .addParametersMatcher(JAVA_LANG_STRING)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_IO_FILEWRITER).constructor()
        .addParametersMatcher(JAVA_IO_FILE)
        .addParametersMatcher(JAVA_IO_FILEDESCRIPTOR)
        .addParametersMatcher(JAVA_IO_FILE, BOOLEAN)
        .addParametersMatcher(JAVA_LANG_STRING)
        .addParametersMatcher(JAVA_LANG_STRING, BOOLEAN)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_IO_INPUTSTREAMREADER).constructor()
        .addParametersMatcher(JAVA_IO_INPUTSTREAM)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_IO_OUTPUTSTREAMWRITER).constructor()
        .addParametersMatcher(JAVA_IO_OUTPUTSTREAM)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_IO_PRINTSTREAM).constructor()
        .addParametersMatcher(JAVA_IO_FILE)
        .addParametersMatcher(JAVA_IO_OUTPUTSTREAM)
        .addParametersMatcher(JAVA_IO_OUTPUTSTREAM, BOOLEAN)
        .addParametersMatcher(JAVA_LANG_STRING)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_IO_PRINTWRITER).constructor()
        .addParametersMatcher(JAVA_IO_FILE)
        .addParametersMatcher(JAVA_IO_OUTPUTSTREAM)
        .addParametersMatcher(JAVA_IO_OUTPUTSTREAM, BOOLEAN)
        .addParametersMatcher(JAVA_LANG_STRING)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_UTIL_FORMATTER).constructor()
        .addParametersMatcher(JAVA_LANG_STRING)
        .addParametersMatcher(JAVA_IO_FILE)
        .addParametersMatcher(JAVA_IO_OUTPUTSTREAM)
        .build(),
      MethodMatchers.create().ofTypes(JAVA_UTIL_SCANNER).constructor()
        .addParametersMatcher(JAVA_IO_FILE)
        .addParametersMatcher(JAVA_NIO_FILE_PATH)
        .addParametersMatcher(JAVA_IO_INPUTSTREAM)
        .build()
    ));
    matchers.addAll(COMMONS_IO);
    matchers.addAll(COMMONS_IO_WITH_CHARSET);
    matchers.add(FILEUTILS_WRITE_WITH_CHARSET);
    return MethodMatchers.or(matchers);
  }

