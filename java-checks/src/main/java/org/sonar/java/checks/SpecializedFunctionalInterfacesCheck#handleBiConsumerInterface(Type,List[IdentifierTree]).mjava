  private static Optional<String> handleBiConsumerInterface(Type parametrizedType, List<IdentifierTree> usages) {
    if (isReferenced(usages) || usesMethods(usages, Collections.singletonList(AND_THEN))) {
      return Optional.empty();
    }

    ParameterTypeNameAndTreeType firstArgument = new ParameterTypeNameAndTreeType(parametrizedType, 0);
    ParameterTypeNameAndTreeType secondArgument = new ParameterTypeNameAndTreeType(parametrizedType, 1);
    if (secondArgument.paramTypeName != null && !JUtils.isPrimitiveWrapper(firstArgument.paramType)) {
      return Optional.of(String.format("Obj%sConsumer<%s>", secondArgument.paramTypeName, firstArgument.paramType));
    }
    return Optional.empty();
  }

