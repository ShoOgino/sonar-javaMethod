  @Override
  public void visitClass(ClassTree tree) {
    boolean generatesEquals = usesAnnotation(tree, GENERATE_EQUALS);

    excludeLinesIfTrue(generatesEquals || usesAnnotation(tree, GENERATE_UNUSED_FIELD_RELATED_METHODS), tree, UnusedPrivateFieldCheck.class, PrivateFieldUsedLocallyCheck.class);
    excludeLinesIfTrue(usesAnnotation(tree, GENERATE_CONSTRUCTOR), tree, AtLeastOneConstructorCheck.class, SpringComponentWithNonAutowiredMembersCheck.class);
    excludeLinesIfTrue(generatesEquals, tree, EqualsNotOverriddenInSubclassCheck.class, EqualsNotOverridenWithCompareToCheck.class);
    excludeLinesIfTrue(generatesPrivateConstructor(tree), tree, UtilityClassWithPublicConstructorCheck.class);
    excludeLinesIfTrue(usesAnnotation(tree, UTILITY_CLASS), tree, BadFieldNameCheck.class, ConstantsShouldBeStaticFinalCheck.class);

    if (generatesPrivateFields(tree)) {
      tree.members().stream()
        .filter(t -> t.is(Tree.Kind.VARIABLE))
        .map(VariableTree.class::cast)
        .filter(v -> !generatesPackagePrivateAccess(v))
        .forEach(v -> excludeLines(v, FieldModifierCheck.class));
    }

    if (generatesFinalFields(tree)) {
      tree.members().stream()
        .filter(t -> t.is(Tree.Kind.VARIABLE))
        .map(VariableTree.class::cast)
        .filter(v -> !generatesNonFinal(v))
        .forEach(v -> excludeLines(v, ExceptionsShouldBeImmutableCheck.class));
    }

    super.visitClass(tree);
  }

