  @Test
  public void field_access_on_this() {
    Expression.Variable x = variableWithId("x");
    Expression.Variable aux0 = variableWithId("%0");
    Expression.Variable aux1 = variableWithId("%1");
    Expression.Variable aux2 = variableWithId("%2");
    Expression.Variable aux3 = variableWithId("%3");
    Expression.Variable aux4 = variableWithId("%4");
    UCFG expectedUCFG = UCFGBuilder.createUCFGForMethod("A#method()Ljava/lang/String;")
      .addBasicBlock(newBasicBlock("1")
        .assignTo(aux0,
          call("__id").withArgs(new Expression.FieldAccess(variableWithId("field"))),
          new LocationInFile(FILE_KEY, 5,15,5,25))
        .assignTo(x, call("__id").withArgs(aux0), new LocationInFile(FILE_KEY, 5,4,5,26))
        .assignTo(aux1,
          call("__id").withArgs(new Expression.FieldAccess(variableWithId("field"))),
          new LocationInFile(FILE_KEY, 6,11,6,16))
        .assignTo(aux2,
          call("__id").withArgs(new Expression.FieldAccess(new Expression.ClassName("A"), variableWithId("FIELD"))),
          new LocationInFile(FILE_KEY, 6,19,6,24))
        .assignTo(aux3, call("__concat").withArgs(aux1, aux2), new LocationInFile(FILE_KEY, 6,11,6,24))
        .assignTo(aux4, call("__concat").withArgs(aux3, x), new LocationInFile(FILE_KEY, 6,11,6,28))
        .ret(aux4, new LocationInFile(FILE_KEY, 6,4,6,29)))
      .build();
    assertCodeToUCfg("class A {\n" +
        "  String field;\n" +
        "  static String FIELD;\n" +
        "  String method() {\n" +
        "    String x = this.field;\n" +
        "    return field + FIELD + x;\n" +
        "  }\n" +
        "}\n", expectedUCFG);
  }

