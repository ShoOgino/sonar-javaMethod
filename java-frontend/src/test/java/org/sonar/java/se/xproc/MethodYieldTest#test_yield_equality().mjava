  @Test
  public void test_yield_equality() {
    MethodBehavior methodBehavior = mockMethodBehavior(1, false);
    MethodYield yield = newMethodYield(methodBehavior);
    MethodYield otherYield;

    assertThat(yield).isNotEqualTo(null);
    assertThat(yield).isNotEqualTo(new Object());

    // same instance
    assertThat(yield).isEqualTo(yield);

    // method behavior not taken into account
    MethodYield myYield = newMethodYield(null);
    assertThat(yield).isEqualTo(myYield);

    // node not taken into account
    otherYield = newMethodYield(mockNode(), methodBehavior);
    assertThat(yield).isEqualTo(otherYield);

    // same arity and constraints on parameters but exceptional path
    otherYield = new ExceptionalYield(methodBehavior);
    assertThat(yield).isNotEqualTo(otherYield);

    // same arity and constraints on parameters but happy path path
    otherYield = new HappyPathYield(methodBehavior);
    assertThat(yield).isNotEqualTo(otherYield);

    PMap<Class<? extends Constraint>, Constraint> nullConstraint = PCollections.<Class<? extends Constraint>, Constraint>emptyMap().put(ObjectConstraint.class, ObjectConstraint.NULL);
    MethodYield yield1 = newMethodYield(methodBehavior);
    yield1.parametersConstraints.add(nullConstraint);
    yield1.parametersConstraints.add(PCollections.emptyMap());
    yield1.parametersConstraints.add(nullConstraint);
    MethodYield yield2 = newMethodYield(methodBehavior);
    yield2.parametersConstraints.add(nullConstraint);
    yield2.parametersConstraints.add(nullConstraint);
    yield2.parametersConstraints.add(PCollections.emptyMap());

    assertThat(yield1).isNotEqualTo(yield2);
  }

