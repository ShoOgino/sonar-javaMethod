  @Test
  void serialization_of_white_list() throws Exception {
    BehaviorCache behaviorCache = new BehaviorCache(SETestUtils.CLASSLOADER, false);
    SymbolicExecutionVisitor sev = new SymbolicExecutionVisitor(Collections.singletonList(new NullDereferenceCheck()), behaviorCache);

    List<InputFile> inputFiles = Arrays.asList(
      "src/test/files/se/JavaLangMathMethods.java",
      "src/test/files/se/CommonsLang3StringUtilsMethods.java",
      "src/test/files/se/CommonsLang2StringUtilsMethods.java",
      "src/test/files/se/GuavaPreconditionsMethods.java",
      "src/test/files/se/ObjectsMethodsMethodBehaviors.java",
      "src/test/files/se/GuavaCommonStrings.java",
      "src/test/files/se/GuavaVerifyMethods.java",
      "src/test/files/se/CollectionUtilsIsEmpty.java",
      "src/test/files/se/CommonsLangValidate.java",
      "src/test/files/se/Log4jAssert.java",
      "src/test/files/se/SpringAssert.java",
      "src/test/files/se/EclipseAssert.java")
      .stream()
      .map(File::new)
      .map(TestUtils::inputFile)
      .collect(Collectors.toList());

    Sema sema = null;
    for (InputFile inputFile : inputFiles) {
      CompilationUnitTreeImpl cut = (CompilationUnitTreeImpl) JParserTestUtils.parse("test", inputFile.contents(), SETestUtils.CLASS_PATH);
      JavaFileScannerContext context = new DefaultJavaFileScannerContext(cut, inputFile, cut.sema, null, new JavaVersionImpl(8), true);
      sev.scanFile(context);
      sema = cut.sema;
    }

    assertThat(behaviorCache.behaviors).hasSize(1);
    assertThat(behaviorCache.bytecodeBehaviors.keySet()).hasSize(80);

    File serializedMethodBehaviorsFolder = new File("src/main/resources/methodBehaviors");
    assertThat(serializedMethodBehaviorsFolder)
      .exists()
      .isDirectory();

    File[] serializedMethodBehaviors = serializedMethodBehaviorsFolder.listFiles(f -> f.getName().endsWith(".json"));
    assertThat(serializedMethodBehaviors).hasSize(9);

    List<MethodBehavior> deserializedMethodBehaviors = new ArrayList<>();
    Type ListOfMethodBehaviorType = new TypeToken<List<MethodBehavior>>() {}.getType();

    Gson gson = MethodBehaviorJsonAdapter.gson(sema);
    for (File serialized : serializedMethodBehaviors) {
      try (Reader reader = new FileReader(serialized)) {
        List<MethodBehavior> deserialized = gson.fromJson(reader, ListOfMethodBehaviorType);
        deserializedMethodBehaviors.addAll(deserialized);
      }
    }

    assertThat(deserializedMethodBehaviors.size())
      .isEqualTo(behaviorCache.behaviors.size() + behaviorCache.bytecodeBehaviors.size())
      .isEqualTo(81);
    assertThat(deserializedMethodBehaviors)
      .containsAll(behaviorCache.behaviors.values())
      .containsAll(behaviorCache.bytecodeBehaviors.values());
  }

