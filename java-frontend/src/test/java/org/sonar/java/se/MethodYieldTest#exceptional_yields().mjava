  @Test
  public void exceptional_yields() {
    SymbolicExecutionVisitor sev = createSymbolicExecutionVisitor("src/test/files/se/ExceptionalYields.java");

    List<MethodYield> yields = getMethodBehavior(sev, "myMethod").getValue().yields();
    assertThat(yields).hasSize(3);

    List<MethodYield> exceptionalYields = yields.stream().filter(y -> y.exception).collect(Collectors.toList());
    assertThat(exceptionalYields).hasSize(2);

    // implicit exception
    Optional<MethodYield> implicitException = exceptionalYields.stream().filter(y -> y.exceptionType == null).findFirst();
    assertThat(implicitException.isPresent()).isTrue();
    MethodYield implicitExceptionYield = implicitException.get();
    assertThat(implicitExceptionYield.resultIndex).isEqualTo(-1);
    assertThat(implicitExceptionYield.resultConstraint).isNull();
    assertThat(implicitExceptionYield.parametersConstraints[0]).isEqualTo(BooleanConstraint.FALSE);

    // explicit exception
    Optional<MethodYield> explicitException = exceptionalYields.stream().filter(y -> y.exceptionType != null).findFirst();
    assertThat(explicitException.isPresent()).isTrue();
    MethodYield explicitExceptionYield = explicitException.get();
    assertThat(explicitExceptionYield.resultIndex).isEqualTo(-1);
    assertThat(explicitExceptionYield.resultConstraint).isNull();
    assertThat(explicitExceptionYield.parametersConstraints[0]).isEqualTo(BooleanConstraint.TRUE);
    assertThat(explicitExceptionYield.exceptionType).isEqualTo("org.foo.MyException1");
  }

