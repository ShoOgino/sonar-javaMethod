  public static String toString(Tree syntaxNode) {
    switch (syntaxNode.kind()) {
      case ARGUMENTS:
        return argumentsString((Arguments) syntaxNode);
      case VARIABLE:
        return variableString((VariableTree) syntaxNode);
      case IDENTIFIER:
        return identifierString((IdentifierTree) syntaxNode);
      case METHOD_INVOCATION:
        return methodInvocationString((MethodInvocationTree) syntaxNode);
      case MEMBER_SELECT:
        return memberSelectString((MemberSelectExpressionTree) syntaxNode);
      case EQUAL_TO:
      case NOT_EQUAL_TO:
      case CONDITIONAL_AND:
      case CONDITIONAL_OR:
      case LESS_THAN:
      case LESS_THAN_OR_EQUAL_TO:
      case GREATER_THAN:
      case GREATER_THAN_OR_EQUAL_TO:
      case AND:
      case OR:
      case XOR:
      case PLUS:
      case MINUS:
      case MULTIPLY:
      case DIVIDE:
      case REMAINDER:
      case LEFT_SHIFT:
      case RIGHT_SHIFT:
      case UNSIGNED_RIGHT_SHIFT:
        return binaryExpressionString((BinaryExpressionTree) syntaxNode);
      case ASSIGNMENT:
      case PLUS_ASSIGNMENT:
      case MINUS_ASSIGNMENT:
      case MULTIPLY_ASSIGNMENT:
      case DIVIDE_ASSIGNMENT:
      case REMAINDER_ASSIGNMENT:
      case AND_ASSIGNMENT:
      case LEFT_SHIFT_ASSIGNMENT:
      case RIGHT_SHIFT_ASSIGNMENT:
      case UNSIGNED_RIGHT_SHIFT_ASSIGNMENT:
        return assignmentString((AssignmentExpressionTree) syntaxNode);
      case NULL_LITERAL:
        return "null";
      case STRING_LITERAL:
      case CHAR_LITERAL:
      case BOOLEAN_LITERAL:
      case INT_LITERAL:
      case LONG_LITERAL:
      case FLOAT_LITERAL:
      case DOUBLE_LITERAL:
        return literalString((LiteralTree) syntaxNode);
      case IF_STATEMENT:
        return ifStatementString((IfStatementTree) syntaxNode);
      case FOR_EACH_STATEMENT:
        return forEachStatementString((ForEachStatement) syntaxNode);
      case FOR_STATEMENT:
        return forStatementString((ForStatementTree) syntaxNode);
      case NEW_CLASS:
        return newInstanceString((NewClassTree) syntaxNode);
      case LIST:
        return listString((ListTree<?>) syntaxNode);
      case INSTANCE_OF:
        return instanceOfString((InstanceOfTree) syntaxNode);
      case RETURN_STATEMENT:
        return returnString((ReturnStatementTree) syntaxNode);
      case CONDITIONAL_EXPRESSION:
        return conditionalExpressionString((ConditionalExpressionTree) syntaxNode);
      case EMPTY_STATEMENT:
      case TRY_STATEMENT:
      case DO_STATEMENT:
        return "";
      case SYNCHRONIZED_STATEMENT:
        return synchronizedStatementString((SynchronizedStatementTree) syntaxNode);
      case PREFIX_DECREMENT:
      case PREFIX_INCREMENT:
      case LOGICAL_COMPLEMENT:
      case BITWISE_COMPLEMENT:
      case UNARY_MINUS:
      case UNARY_PLUS:
        return prefixExpressionString((UnaryExpressionTree) syntaxNode);
      case POSTFIX_DECREMENT:
      case POSTFIX_INCREMENT:
        return postfixExpressionString((UnaryExpressionTree) syntaxNode);
      case TYPE_CAST:
        return typeCastString((TypeCastTree) syntaxNode);
      case PARENTHESIZED_EXPRESSION:
        return parenthesizedTreeString((ParenthesizedTree) syntaxNode);
      case WHILE_STATEMENT:
        return whileStatementString((WhileStatementTree) syntaxNode);
      case SWITCH_STATEMENT:
        return switchStatementString((SwitchStatementTree) syntaxNode);
      case BREAK_STATEMENT:
        return "break";
      case CONTINUE_STATEMENT:
        return "continue";
      case ARRAY_ACCESS_EXPRESSION:
        return arrayAccessString((ArrayAccessExpressionTree) syntaxNode);
      case THROW_STATEMENT:
        return throwStatementString((ThrowStatementTree) syntaxNode);
      case EXPRESSION_STATEMENT:
        return expressionStatementString((ExpressionStatementTree) syntaxNode);
      case METHOD:
        return methodString((MethodTree) syntaxNode);
      case BLOCK:
        return blockString((BlockTree) syntaxNode);
      case NEW_ARRAY:
        return "new []";
      default:
        return syntaxNode.toString();
    }
  }

