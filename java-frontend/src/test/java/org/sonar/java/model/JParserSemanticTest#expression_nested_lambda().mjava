  @Test
  void expression_nested_lambda() {
    String source = "class A {\n" +
      "  void m() {\n" +
      "    java.util.function.Function<Integer, java.util.function.Supplier<Integer>> v =\n" +
      "      p1 -> {\n" +
      "        return () -> 42;\n" +
      "      };\n" +
      "  }\n" +
      "}";

    JavaTree.CompilationUnitTreeImpl cu = test(source);

    ClassTreeImpl c = (ClassTreeImpl) cu.types().get(0);
    MethodTreeImpl m = (MethodTreeImpl) c.members().get(0);
    VariableTreeImpl v = (VariableTreeImpl) m.block().body().get(0);
    LambdaExpressionTreeImpl l1 = (LambdaExpressionTreeImpl) v.initializer();

    BlockTreeImpl body = (BlockTreeImpl) l1.body();
    ReturnStatementTreeImpl r = (ReturnStatementTreeImpl) body.body().get(0);
    LambdaExpressionTreeImpl l2 = (LambdaExpressionTreeImpl) r.expression();

    assertThat(l2.typeBinding).isNotNull();
    assertThat(cu.sema.type(l2.typeBinding).is("java.util.function.Supplier")).isTrue();
  }

