    @Test
    void with_anotations_and_initializers() {
      NewArrayTree tree = (NewArrayTree) expressionOfReturnStatement("class T { int[][] m() { return new int[] @Bar [] {{}, {}}; } }");
      assertThat(tree).is(Tree.Kind.NEW_ARRAY);
      assertThat(tree.type()).is(Tree.Kind.PRIMITIVE_TYPE);
      assertThat(tree.dimensions()).hasSize(2);
      assertThat(tree.initializers()).hasSize(2);
      assertThat(tree.newKeyword()).is("new");
      assertThat(tree).hasChildrenSize(7);

      ArrayDimensionTree dim1 = tree.dimensions().get(0);
      assertThat(dim1)
        .is(Tree.Kind.ARRAY_DIMENSION)
        .hasChildrenSize(2);
      assertThat(dim1.annotations()).isEmpty();
      assertThat(dim1.openBracketToken()).is("[");
      assertThat(dim1.expression()).isNull();
      assertThat(dim1.closeBracketToken()).is("]");

      ArrayDimensionTree dim2 = tree.dimensions().get(1);
      assertThat(dim2)
        .is(Tree.Kind.ARRAY_DIMENSION)
        .hasChildrenSize(3);
      assertThat(dim2.annotations()).hasSize(1);
      assertThat(dim2.openBracketToken()).is("[");
      assertThat(dim2.expression()).isNull();
      assertThat(dim2.closeBracketToken()).is("]");
    }

