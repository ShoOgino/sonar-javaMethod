  @Test
  public void securing_byte() {
    CompilationUnitTree tree = JParserTestUtils.parse(
      "class A {\n" +
        "  static {\n" +
        "    int i1 = 12;\n" +
        "    int i2 = 12 & 0xFF;\n" +
        "    int i3 = 0xff & 12;\n" +
        "    int i4 = 12 & 12;\n" +
        "  }\n" +
        "}");

    StaticInitializerTree staticInitializer = (StaticInitializerTree) ((ClassTree) tree.types().get(0)).members().get(0);
    List<ExpressionTree> expressions = staticInitializer.body().stream()
      .map(VariableTree.class::cast)
      .map(VariableTree::initializer)
      .collect(Collectors.toList());

    assertThat(ExpressionUtils.isSecuringByte(expressions.get(0))).isFalse();
    assertThat(ExpressionUtils.isSecuringByte(expressions.get(1))).isTrue();
    assertThat(ExpressionUtils.isSecuringByte(expressions.get(2))).isTrue();
    assertThat(ExpressionUtils.isSecuringByte(expressions.get(3))).isFalse();
  }

