    @Test
    void with_anotations_and_dimensions() {
      NewArrayTree tree = (NewArrayTree) expressionOfReturnStatement("class T { int[][] m() { return new int[2] @Bar [3]; } }");
      assertThat(tree)
        .is(Tree.Kind.NEW_ARRAY)
        .hasChildrenSize(5);
      assertThat(tree.type()).is(Tree.Kind.PRIMITIVE_TYPE);
      assertThat(tree.dimensions()).hasSize(2);
      assertThat(tree.initializers()).isEmpty();
      assertThat(tree.newKeyword()).is("new");

      ArrayDimensionTree dim1 = tree.dimensions().get(0);
      assertThat(dim1)
        .is(Tree.Kind.ARRAY_DIMENSION)
        .hasChildrenSize(3);
      assertThat(dim1.annotations()).isEmpty();
      assertThat(dim1.openBracketToken()).is("[");
      assertThat(dim1.expression()).is(Tree.Kind.INT_LITERAL);
      assertThat(dim1.closeBracketToken()).is("]");

      ArrayDimensionTree dim2 = tree.dimensions().get(1);
      assertThat(dim2)
        .is(Tree.Kind.ARRAY_DIMENSION)
        .hasChildrenSize(4);
      assertThat(dim2.annotations()).hasSize(1);
      assertThat(dim2.openBracketToken()).is("[");
      assertThat(dim2.expression()).is(Tree.Kind.INT_LITERAL);
      assertThat(dim2.closeBracketToken()).is("]");
    }

