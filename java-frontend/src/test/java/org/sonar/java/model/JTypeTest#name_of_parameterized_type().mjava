  @Test
  void name_of_parameterized_type() {
    JavaTree.CompilationUnitTreeImpl cu = test("interface I { java.util.List<String> m(); }");
    ClassTreeImpl c = (ClassTreeImpl) cu.types().get(0);
    MethodTreeImpl m = (MethodTreeImpl) c.members().get(0);
    AbstractTypedTree e = Objects.requireNonNull((AbstractTypedTree) m.returnType());
    JType parameterizedType = cu.sema.type(Objects.requireNonNull(e.typeBinding));

    assertThat(parameterizedType)
      .hasSameNameAs(e.symbolType())
      .hasSameNameAs(cu.sema.typeSymbol(e.typeBinding).type())
      .is("java.util.List")
      .hasName("List");
  }

