    @Test
    void switch_statement_and_expression() {
      SwitchStatementTree tree = (SwitchStatementTree) firstMethodFirstStatement("class T { void m(int e) { switch (e) { case 1: case 2, 3: ; default: ; } } }");
      assertThat(tree).is(Tree.Kind.SWITCH_STATEMENT);
      assertThat(tree.switchKeyword()).is("switch");
      assertThat(tree.openBraceToken()).is("{");
      assertThat(tree.closeBraceToken()).is("}");
      assertThat(tree.openParenToken()).is("(");
      assertThat(tree.expression()).is(Tree.Kind.IDENTIFIER);
      assertThat(tree.closeParenToken()).is(")");
      assertThat(tree.cases()).hasSize(2);

      SwitchExpressionTree switchExpression = tree.asSwitchExpression();
      assertThat(switchExpression)
        .is(Tree.Kind.SWITCH_EXPRESSION)
        .hasChildrenSize(8);
      assertThat(tree.switchKeyword()).isEqualTo(switchExpression.switchKeyword());
      assertThat(tree.openBraceToken()).isEqualTo(switchExpression.openBraceToken());
      assertThat(tree.closeBraceToken()).isEqualTo(switchExpression.closeBraceToken());
      assertThat(tree.openParenToken()).isEqualTo(switchExpression.openParenToken());
      assertThat(tree.expression()).isEqualTo(switchExpression.expression());
      assertThat(tree.closeParenToken()).isEqualTo(switchExpression.closeParenToken());
      assertThat(tree.cases()).isEqualTo(switchExpression.cases());
    }

