  @Test
  void null_type() {
    JavaTree.CompilationUnitTreeImpl cu = test("class C { Object m(int p, int[] a) { return null; } }");
    ClassTreeImpl c = (ClassTreeImpl) cu.types().get(0);
    MethodTreeImpl m = (MethodTreeImpl) c.members().get(0);
    ReturnStatementTreeImpl s = (ReturnStatementTreeImpl) Objects.requireNonNull(m.block()).body().get(0);

    AbstractTypedTree e = Objects.requireNonNull((AbstractTypedTree) s.expression());
    AbstractTypedTree primitive = (AbstractTypedTree) m.parameters().get(0).type();
    AbstractTypedTree array = (AbstractTypedTree) m.parameters().get(1).type();

    JType nullType = cu.sema.type(Objects.requireNonNull(e.typeBinding));
    JType classType = cu.sema.type(Objects.requireNonNull(c.typeBinding));
    JType primitiveType = cu.sema.type(Objects.requireNonNull(primitive.typeBinding));
    JType arrayType = cu.sema.type(Objects.requireNonNull(array.typeBinding));

    assertThat(nullType)
      .hasSameNameAs(e.symbolType())
      .hasName("<nulltype>")
      .is(e.symbolType().fullyQualifiedName())
      .is("<nulltype>")
      .isSubtypeOf(classType)
      .isSubtypeOf(arrayType)
      .isNotSubtypeOf(primitiveType);
  }

