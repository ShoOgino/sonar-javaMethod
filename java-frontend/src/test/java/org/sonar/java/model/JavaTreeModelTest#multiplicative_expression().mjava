  /**
   * 15.17. Multiplicative Operators
   */
  @Test
  void multiplicative_expression() {
    String code = "class T { int m() { return 1 * 2 / 3 % 4; } }";
    BinaryExpressionTree parent = (BinaryExpressionTree) expressionOfReturnStatement(code);
    assertThat(parent)
      .is(Tree.Kind.REMAINDER)
      .hasChildrenSize(3);
    assertThat(parent.leftOperand()).is(Tree.Kind.DIVIDE);
    assertThat(parent.operatorToken()).is("%");
    assertThat(parent.rightOperand()).is(Tree.Kind.INT_LITERAL);

    BinaryExpressionTree leftChild = (BinaryExpressionTree) parent.leftOperand();
    assertThat(leftChild)
      .is(Tree.Kind.DIVIDE)
      .hasChildrenSize(3);
    assertThat(leftChild.leftOperand()).is(Tree.Kind.MULTIPLY);
    assertThat(leftChild.operatorToken()).is("/");
    assertThat(leftChild.rightOperand()).is(Tree.Kind.INT_LITERAL);

    BinaryExpressionTree secondLeftChild = (BinaryExpressionTree) leftChild.leftOperand();
    assertThat(secondLeftChild)
      .is(Tree.Kind.MULTIPLY)
      .hasChildrenSize(3);
    assertThat(secondLeftChild.leftOperand()).is(Tree.Kind.INT_LITERAL);
    assertThat(secondLeftChild.operatorToken()).is("*");
    assertThat(secondLeftChild.rightOperand()).is(Tree.Kind.INT_LITERAL);
  }

