  /**
   * 14.11. The switch Statement
   */
  @Test
  void switch_statement_and_expression() {
    SwitchStatementTree tree = (SwitchStatementTree) firstMethodFirstStatement("class T { void m(int e) { switch (e) { case 1: case 2, 3: ; default: ; } } }");
    assertThat(tree.is(Tree.Kind.SWITCH_STATEMENT)).isTrue();
    assertThat(tree.switchKeyword().text()).isEqualTo("switch");
    assertThat(tree.openBraceToken().text()).isEqualTo("{");
    assertThat(tree.closeBraceToken().text()).isEqualTo("}");
    assertThat(tree.openParenToken().text()).isEqualTo("(");
    assertThat(tree.expression()).isNotNull();
    assertThat(tree.closeParenToken().text()).isEqualTo(")");
    assertThat(tree.cases()).hasSize(2);

    SwitchExpressionTree switchExpression = tree.asSwitchExpression();
    assertThat(switchExpression.is(Tree.Kind.SWITCH_EXPRESSION)).isTrue();
    assertThat(tree.switchKeyword()).isEqualTo(switchExpression.switchKeyword());
    assertThat(tree.openBraceToken()).isEqualTo(switchExpression.openBraceToken());
    assertThat(tree.closeBraceToken()).isEqualTo(switchExpression.closeBraceToken());
    assertThat(tree.openParenToken()).isEqualTo(switchExpression.openParenToken());
    assertThat(tree.expression()).isEqualTo(switchExpression.expression());
    assertThat(tree.closeParenToken()).isEqualTo(switchExpression.closeParenToken());
    assertThat(tree.cases()).isEqualTo(switchExpression.cases());
    assertThatChildrenIteratorHasSize(switchExpression, 8);

    CaseGroupTree c = tree.cases().get(0);
    assertThat(c.is(Tree.Kind.CASE_GROUP)).isTrue();
    assertThat(c.labels()).hasSize(2);
    CaseLabelTree caseLabelTree = c.labels().get(0);
    assertThat(caseLabelTree.isFallThrough()).isTrue();
    assertThat(caseLabelTree.caseOrDefaultKeyword().text()).isEqualTo("case");
    assertThat(caseLabelTree.expression()).isNotNull();
    assertThat(caseLabelTree.expressions()).hasSize(1);
    assertThat(((LiteralTree)caseLabelTree.expression()).value()).isEqualTo("1");
    assertThat(((LiteralTree)caseLabelTree.expressions().get(0)).value()).isEqualTo("1");
    assertThat(caseLabelTree.colonToken().text()).isEqualTo(":");
    assertThat(caseLabelTree.colonOrArrowToken().text()).isEqualTo(":");
    assertThatChildrenIteratorHasSize(caseLabelTree, 3);

    caseLabelTree = c.labels().get(1);
    assertThat(caseLabelTree.isFallThrough()).isTrue();
    assertThat(caseLabelTree.caseOrDefaultKeyword().text()).isEqualTo("case");
    assertThat(caseLabelTree.expression()).isNotNull();
    assertThat(caseLabelTree.expressions()).hasSize(2);
    assertThat(((LiteralTree)caseLabelTree.expression()).value()).isEqualTo("2");
    assertThat(((LiteralTree)caseLabelTree.expressions().get(0)).value()).isEqualTo("2");
    assertThat(((LiteralTree)caseLabelTree.expressions().get(1)).value()).isEqualTo("3");
    assertThat(caseLabelTree.colonToken().text()).isEqualTo(":");
    assertThat(caseLabelTree.colonOrArrowToken().text()).isEqualTo(":");
    assertThatChildrenIteratorHasSize(caseLabelTree, 4);
    assertThat(c.body()).hasSize(1);

    c = tree.cases().get(1);
    assertThat(c.is(Tree.Kind.CASE_GROUP)).isTrue();
    assertThat(c.labels()).hasSize(1);
    caseLabelTree = c.labels().get(0);
    assertThat(caseLabelTree.isFallThrough()).isTrue();
    assertThat(caseLabelTree.caseOrDefaultKeyword().text()).isEqualTo("default");
    assertThat(caseLabelTree.expression()).isNull();
    assertThat(caseLabelTree.colonOrArrowToken().text()).isEqualTo(":");
    assertThatChildrenIteratorHasSize(caseLabelTree, 2);
    assertThat(c.body()).hasSize(1);

    // FIXME ECJ broken for switch expression?
    // ReturnStatementTree rst = (ReturnStatementTree) firstMethodFirstStatement("class T {\n" +
    // " int m(int e) {\n" +
    // " return switch (e) {\n" +
    // " case 1 -> 0;\n" +
    // " case 2, 3 -> 1;\n" +
    // " default -> 42;\n" +
    // " };\n" +
    // " }\n" +
    // "}");
    // switchExpression = (SwitchExpressionTree) rst.expression();
    // assertThat(switchExpression.cases()).hasSize(3);
    // c = switchExpression.cases().get(1);
    // assertThat(c.labels()).hasSize(2);
    // caseLabelTree = c.labels().get(1);
    // assertThat(caseLabelTree.isFallThrough()).isFalse();
    // assertThat(caseLabelTree.caseOrDefaultKeyword().text()).isEqualTo("case");
    // assertThat(caseLabelTree.expression()).isNotNull();
    // assertThat(caseLabelTree.colonOrArrowToken().text()).isEqualTo("->");
    // assertThat(c.body()).hasSize(1);

    tree = (SwitchStatementTree) firstMethodFirstStatement("class T { void m() { switch (e) { default: } } }");
    assertThat(tree.cases()).hasSize(1);
    assertThat(tree.cases().get(0).body()).isEmpty();
    assertThatChildrenIteratorHasSize(tree, 1);
  }

