    @Test
    void switch_expression() {
      ReturnStatementTree rst = (ReturnStatementTree) firstMethodFirstStatement("class T {\n" +
      "  int m(int e) {\n" +
      "    return switch (e) {\n" +
      "      case 1 -> 0;\n" +
      "      case 2, 3 -> 1;\n" +
      "      default -> 42;\n" +
      "    };\n" +
      "  }\n" +
      "}");
      SwitchExpressionTree switchExpression = (SwitchExpressionTree) rst.expression();
      assertThat(switchExpression.cases()).hasSize(3);
      CaseGroupTree c = switchExpression.cases().get(1);
      assertThat(c.labels()).hasSize(1); // "case 2, 3" should have labels size == 2, ECJ does not count number of labels correctly
      CaseLabelTree caseLabelTree = c.labels().get(0);
      assertThat(caseLabelTree.isFallThrough()).isFalse();
      assertThat(caseLabelTree.caseOrDefaultKeyword()).is("case");
      assertThat(caseLabelTree.expression()).is(Tree.Kind.INT_LITERAL);
      assertThat(caseLabelTree.colonOrArrowToken()).is("->");
      assertThat(c.body()).hasSize(1);
      assertThat(switchExpression).isNotInstanceOf(SwitchStatementTree.class);
      assertThat(switchExpression.symbolType().name()).isEqualTo("int");
    }

