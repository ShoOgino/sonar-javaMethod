  @Test
  void lambda_expressions() {
    String code = "class T { public void meth() {"
      + "  IntStream.range(1,12)"
      + "    .map(x -> x*x)"
      + "    .map((int a) -> { return a*a; });"
      + "  }"
      + "}";
    ExpressionTree expressionTree = ((ExpressionStatementTree) firstMethodFirstStatement(code)).expression();

    // parsing not broken by lambda
    assertThat(expressionTree).is(Tree.Kind.METHOD_INVOCATION);

    MethodInvocationTree mit = (MethodInvocationTree) expressionTree;
    LambdaExpressionTree aa = (LambdaExpressionTree) mit.arguments().get(0);
    assertThat(aa.openParenToken()).is("(");
    assertThat(aa.parameters()).hasSize(1);
    assertThat(aa.parameters().get(0)).is(Tree.Kind.VARIABLE);
    assertThat(aa.closeParenToken()).is(")");
    assertThat(aa.arrowToken()).is("->");
    assertThat(aa.body()).is(Tree.Kind.BLOCK);

    LambdaExpressionTree xx = (LambdaExpressionTree) ((MethodInvocationTree) ((MemberSelectExpressionTree) mit.methodSelect()).expression()).arguments().get(0);
    assertThat(xx.openParenToken()).isNull();
    assertThat(xx.parameters()).hasSize(1);
    assertThat(xx.parameters().get(0)).is(Tree.Kind.VARIABLE);
    assertThat(xx.closeParenToken()).isNull();
    assertThat(xx.arrowToken()).is("->");
    assertThat(xx.body()).is(Tree.Kind.MULTIPLY);
  }

