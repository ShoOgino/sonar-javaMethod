  /**
   * 15.12. Method Invocation Expressions
   */
  @Test
  void method_invocation_expression() {
    // TODO test NonWildTypeArguments
    {
      MethodInvocationTree tree = (MethodInvocationTree) expressionOfFirstStatement("class T { void m() { identifier(true, false); } }");
      assertThat(tree.is(Tree.Kind.METHOD_INVOCATION)).isTrue();
      assertThat(((IdentifierTree) tree.methodSelect()).name()).isEqualTo("identifier");
      assertThat(tree.arguments().openParenToken()).isNotNull();
      assertThat(tree.arguments()).hasSize(2);
      assertThat(tree.arguments().separators()).hasSize(1);
      assertThat(tree.arguments().closeParenToken()).isNotNull();
      assertThatChildrenIteratorHasSize(tree, 2);
    }
    {
      MethodInvocationTree tree = (MethodInvocationTree) expressionOfFirstStatement("class T { void m() { this.<T>identifier(true, false); } }");
      assertThat(tree.is(Tree.Kind.METHOD_INVOCATION)).isTrue();
      MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
      assertThat(memberSelectExpression.identifier().name()).isEqualTo("identifier");
      assertThat(tree.arguments()).hasSize(2);
      assertThatChildrenIteratorHasSize(tree, 3);
    }
    {
      MethodInvocationTree tree = (MethodInvocationTree) expressionOfFirstStatement("class T { T() { super.identifier(true, false); } }");
      assertThat(tree.is(Tree.Kind.METHOD_INVOCATION)).isTrue();
      MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
      assertThatChildrenIteratorHasSize(memberSelectExpression, 3);
      assertThat(memberSelectExpression.identifier().name()).isEqualTo("identifier");
      assertThat(memberSelectExpression.operatorToken()).isNotNull();
      assertThat(((IdentifierTree) memberSelectExpression.expression()).name()).isEqualTo("super");
      assertThat(tree.arguments()).hasSize(2);
      assertThatChildrenIteratorHasSize(tree, 2);
    }
    {
      MethodInvocationTree tree = (MethodInvocationTree) expressionOfFirstStatement("class T { T() { TypeName.super.identifier(true, false); } }");
      assertThat(tree.is(Tree.Kind.METHOD_INVOCATION)).isTrue();
      MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
      assertThat(memberSelectExpression.identifier().name()).isEqualTo("identifier");
      assertThat(memberSelectExpression.operatorToken()).isNotNull();
      memberSelectExpression = (MemberSelectExpressionTree) memberSelectExpression.expression();
      assertThatChildrenIteratorHasSize(memberSelectExpression, 3);
      assertThat(memberSelectExpression.identifier().name()).isEqualTo("super");
      assertThat(memberSelectExpression.operatorToken()).isNotNull();
      assertThat(((IdentifierTree) memberSelectExpression.expression()).name()).isEqualTo("TypeName");
      assertThat(tree.arguments()).hasSize(2);
      assertThatChildrenIteratorHasSize(tree, 2);
    }
    {
      MethodInvocationTree tree = (MethodInvocationTree) expressionOfFirstStatement("class T { T() { TypeName.identifier(true, false); } }");
      assertThat(tree.is(Tree.Kind.METHOD_INVOCATION)).isTrue();
      MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
      assertThatChildrenIteratorHasSize(memberSelectExpression, 3);
      assertThat(memberSelectExpression.identifier().name()).isEqualTo("identifier");
      assertThat(memberSelectExpression.operatorToken()).isNotNull();
      assertThat(((IdentifierTree) memberSelectExpression.expression()).name()).isEqualTo("TypeName");
      assertThat(tree.arguments()).hasSize(2);
      assertThatChildrenIteratorHasSize(tree, 2);
    }
    {
      MethodInvocationTree tree = (MethodInvocationTree) expressionOfFirstStatement("class T { T() { TypeName.<T>identifier(true, false); } }");
      assertThat(tree.is(Tree.Kind.METHOD_INVOCATION)).isTrue();
      MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
      assertThatChildrenIteratorHasSize(memberSelectExpression, 3);
      assertThat(memberSelectExpression.identifier().name()).isEqualTo("identifier");
      assertThat(memberSelectExpression.operatorToken()).isNotNull();
      assertThat(((IdentifierTree) memberSelectExpression.expression()).name()).isEqualTo("TypeName");
      assertThat(tree.arguments()).hasSize(2);
      assertThatChildrenIteratorHasSize(tree, 3);
    }
    {
      MethodInvocationTree tree = (MethodInvocationTree) expressionOfFirstStatement("class T { T() { primary().<T>identifier(true, false); } }");
      assertThat(tree.is(Tree.Kind.METHOD_INVOCATION)).isTrue();
      MemberSelectExpressionTree memberSelectExpression = (MemberSelectExpressionTree) tree.methodSelect();
      assertThatChildrenIteratorHasSize(memberSelectExpression, 3);
      assertThat(memberSelectExpression.identifier().name()).isEqualTo("identifier");
      assertThat(memberSelectExpression.expression()).isInstanceOf(MethodInvocationTree.class);
      assertThat(memberSelectExpression.operatorToken()).isNotNull();
      assertThat(tree.arguments()).hasSize(2);
      assertThatChildrenIteratorHasSize(tree, 3);
    }
  }

