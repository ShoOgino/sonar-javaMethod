  /**
   * @see org.eclipse.jdt.core.dom.SuperMethodReference
   */
  @Test
  void expression_super_method_reference() {
    JavaTree.CompilationUnitTreeImpl cu = test("class C extends S { java.util.function.Supplier m() { return super::m; } } class S { Object m() { } }");
    ClassTreeImpl superClass = (ClassTreeImpl) cu.types().get(1);
    MethodTreeImpl superClassMethod = (MethodTreeImpl) superClass.members().get(0);
    ClassTreeImpl c = (ClassTreeImpl) cu.types().get(0);
    MethodTreeImpl method = (MethodTreeImpl) c.members().get(0);
    ReturnStatementTreeImpl s = (ReturnStatementTreeImpl) method.block().body().get(0);
    MethodReferenceTreeImpl creationReference = Objects.requireNonNull((MethodReferenceTreeImpl) s.expression());

    KeywordSuper keywordSuper = (KeywordSuper) creationReference.expression();
    assertThat(keywordSuper.symbolType().symbol().declaration())
      .isSameAs(superClass.symbol().declaration());
    assertThat(keywordSuper.symbol())
      .isSameAs(cu.sema.typeSymbol(c.typeBinding).superSymbol);

    IdentifierTreeImpl identifier = (IdentifierTreeImpl) creationReference.method();
    assertThat(identifier.binding)
      .isNotNull()
      .isSameAs(Objects.requireNonNull((MethodTreeImpl) creationReference.method().symbol().declaration()).methodBinding)
      .isSameAs(superClassMethod.methodBinding);
    assertThat(cu.sema.usages.get(superClassMethod.methodBinding))
      .containsExactlyElementsOf(superClassMethod.symbol().usages())
      .containsOnly(identifier);
  }

