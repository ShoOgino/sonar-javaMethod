  /**
   * @see org.eclipse.jdt.core.dom.SuperFieldAccess
   */
  @Test
  void expression_super_field_access_qualified() {
    JavaTree.CompilationUnitTreeImpl cu = test("class T extends S { class C { Object m() { return T.super.f; } } } class S { int f; }");
    ClassTreeImpl t = (ClassTreeImpl) cu.types().get(0);
    ClassTreeImpl superClass = (ClassTreeImpl) cu.types().get(1);
    VariableTreeImpl superField = (VariableTreeImpl) superClass.members().get(0);
    ClassTreeImpl c = (ClassTreeImpl) t.members().get(0);
    MethodTreeImpl m = (MethodTreeImpl) c.members().get(0);
    ReturnStatementTree s = (ReturnStatementTree) Objects.requireNonNull(m.block()).body().get(0);
    MemberSelectExpressionTreeImpl expression = Objects.requireNonNull((MemberSelectExpressionTreeImpl) s.expression());

    MemberSelectExpressionTreeImpl qualifiedSuper = (MemberSelectExpressionTreeImpl) expression.expression();
    assertThat(qualifiedSuper.typeBinding)
      .isSameAs(Objects.requireNonNull((ClassTreeImpl) qualifiedSuper.symbolType().symbol().declaration()).typeBinding)
      .isSameAs(superClass.typeBinding);

    KeywordSuper keywordSuper = (KeywordSuper) qualifiedSuper.identifier();
    assertThat(keywordSuper.symbolType().symbol().declaration())
      .isSameAs(Objects.requireNonNull((ClassTreeImpl) keywordSuper.symbolType().symbol().declaration()))
      .isSameAs(superClass);
    assertThat(keywordSuper.symbol())
      .isSameAs(cu.sema.typeSymbol(t.typeBinding).superSymbol);

    IdentifierTreeImpl identifier = (IdentifierTreeImpl) expression.identifier();
    assertThat(identifier.binding)
      .isNotNull()
      .isSameAs(Objects.requireNonNull((VariableTreeImpl) identifier.symbol().declaration()).variableBinding)
      .isSameAs(superField.variableBinding);
    assertThat(cu.sema.usages.get(identifier.binding))
      .containsExactlyElementsOf(identifier.symbol().usages())
      .containsOnly(identifier);
  }

