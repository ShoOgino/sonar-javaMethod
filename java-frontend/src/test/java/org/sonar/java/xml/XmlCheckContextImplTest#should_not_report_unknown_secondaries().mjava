  @Test
  public void should_not_report_unknown_secondaries() throws Exception {
    // manual parsing
    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(context.getFile());
    Node node = firstNode(context, "//test2");
    int nodeLine = XmlCheckUtils.nodeLine(node);

    // uses document with recorded lines
    Node child = Iterables.get(context.evaluate(context.compile("//test2/item"), doc), 0);

    doAnswer(new Answer<Void>() {
      @Override
      public Void answer(InvocationOnMock invocation) throws Throwable {
        AnalyzerMessage analyzerMessage = (AnalyzerMessage) invocation.getArguments()[0];
        reportedMessage = "onNode:" + analyzerMessage.getMessage() + "(" + analyzerMessage.getLine() + ")";
        for (AnalyzerMessage secondary : analyzerMessage.flows.stream().map(l -> l.get(0)).collect(Collectors.toList())) {
          reportedMessage += ";onChild:" + secondary.getMessage() + "(" + secondary.getLine() + ")";
        }
        return null;
      }
    }).when(sonarComponents).reportIssue(any(AnalyzerMessage.class));

    context.reportIssue(CHECK, node, "message1", Lists.newArrayList(new XmlCheckContext.XmlDocumentLocation("message2", child)));

    assertThat(reportedMessage).isEqualTo("onNode:message1(" + nodeLine + ")");
  }

