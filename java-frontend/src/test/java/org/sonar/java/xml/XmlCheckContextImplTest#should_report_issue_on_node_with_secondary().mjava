  @Test
  public void should_report_issue_on_node_with_secondary() throws Exception {
    Node node = firstNode(context, "//test2");
    int nodeLine = XmlCheckUtils.nodeLine(node);
    Node childNode = node.getFirstChild();
    int childNodeLine = XmlCheckUtils.nodeLine(childNode);

    doAnswer(new Answer<Void>() {
      @Override
      public Void answer(InvocationOnMock invocation) throws Throwable {
        AnalyzerMessage analyzerMessage = (AnalyzerMessage) invocation.getArguments()[0];
        reportedMessage = "onNode:" + analyzerMessage.getMessage() + "(" + analyzerMessage.getLine() + ")";
        for (AnalyzerMessage secondary : analyzerMessage.flows.stream().map(l -> l.get(0)).collect(Collectors.toList())) {
          reportedMessage += ";onChild:" + secondary.getMessage() + "(" + secondary.getLine() + ")";
        }
        return null;
      }
    }).when(sonarComponents).reportIssue(any(AnalyzerMessage.class));

    context.reportIssue(CHECK, node, "message1", Lists.newArrayList(new XmlCheckContext.XmlDocumentLocation("message2", childNode)));

    String expectedMessage = "onNode:message1(" + nodeLine + ");onChild:message2(" + childNodeLine + ")";
    assertThat(reportedMessage).isEqualTo(expectedMessage);
  }

