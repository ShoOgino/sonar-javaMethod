  @Test
  public void sonarcloud_feedback_metric_should_not_exceed_roughly_200ko() {
    File file = new File("src/test/files/ParseError.java");
    SensorContextTester sensorContext = SensorContextTester.create(file.getParentFile().getAbsoluteFile());
    when(server.getPublicRootUrl()).thenReturn("https://sonarcloud.io");
    SonarComponents sonarComponents = new SonarComponents(null, null, null, null, null, server);
    sonarComponents.setSensorContext(sensorContext);

    AnalysisError analysisError;
    try {
      throw new IllegalStateException("This is the message of this exception");
    } catch (IllegalStateException iae) {
      analysisError = new AnalysisError(iae, "/abcde/abcde/abcde/abcde/abcde/abcde/abcde/abcde/abcde/abcde/abcde/abcde/abcde/some_very/long/path/FileInError.java");
    }

    for (int i = 0; i < 200_000; i++) {
      sonarComponents.addAnalysisError(analysisError);
    }

    sonarComponents.saveAnalysisErrors();

    String feedback = sensorContext.<String>measure("projectKey", "sonarjava_feedback").value();
    Collection<AnalysisError> analysisErrorsDeserialized = new Gson().fromJson(feedback, new TypeToken<Collection<AnalysisError>>(){}.getType());
    assertThat(analysisErrorsDeserialized.size()).isBetween(35, 45);
  }

