  @Test
  public void switch_expression_with_fallthrough() {
    final CFG cfg = buildCFG("int fun(int foo) throws Exception {\n" +
      "    int a = switch (foo) {\n" +
      "      case 1:\n" +
      "        fun(bar);\n" +
      "      case 2:\n" +
      "      case 3:\n" +
      "      case 4:\n" +
      "        yield fun(bar1) + fun(bar2);\n" +
      "      case 5:\n" +
      "        throw new Exception(\"boom\");\n" +
      "      case 6:\n" +
      "        yield foo;\n" +
      "      default:\n" +
      "        yield fun(def);\n" +
      "    };\n" +
      "    return a;\n" +
      "  }");
    final CFGChecker cfgChecker = checker(
      block(
        element(INT_LITERAL, "1"),
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "bar"),
        element(METHOD_INVOCATION)).hasCaseGroup().successors(6),
      block(
        element(INT_LITERAL, "2"),
        element(INT_LITERAL, "3"),
        element(INT_LITERAL, "4"),
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "bar1"),
        element(METHOD_INVOCATION),
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "bar2"),
        element(METHOD_INVOCATION),
        element(PLUS)).hasCaseGroup().terminator(BREAK_STATEMENT).successors(1),
      block(
        element(INT_LITERAL, "5"),
        element(STRING_LITERAL, "boom"),
        element(NEW_CLASS)).hasCaseGroup().terminator(THROW_STATEMENT).successors(0),
      block(
        element(INT_LITERAL, "6"),
        element(IDENTIFIER, "foo")).hasCaseGroup().successors(1),
      block(
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "def"),
        element(METHOD_INVOCATION)).hasCaseGroup().successors(1),
      block(
        element(IDENTIFIER, "foo")).terminator(SWITCH_EXPRESSION).successors(3, 4, 5, 6, 7),
      block(
        element(SWITCH_EXPRESSION),
        element(VARIABLE, "a"),
        element(IDENTIFIER, "a")).terminator(RETURN_STATEMENT).successors(0));
    cfgChecker.check(cfg);
  }

