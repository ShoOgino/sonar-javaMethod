  /**
   * Introduced with Java 12
   */
  @Test
  void switch_statement_without_fallthrough() {
    final CFG cfg = buildCFG("void fun(int foo) throws Exception {\n" +
      "    int a;\n" +
      "    switch (foo) {\n" +
      "      case 1     -> {\n" +
      "        fun(bar1);\n" +
      "        fun(bar2);\n" +
      "      }\n" +
      "      case 2,3,4 -> fun(qix);\n" +
      "      case 5     -> fun(gul);\n" +
      "      case 6     -> throw new Exception(\"boom\");\n" +
      "      default    -> fun(def);\n" +
      "    }\n" +
      "    Integer.toString(foo);\n" +
      "  }");
    final CFGChecker cfgChecker = checker(
      block(
        element(INT_LITERAL, "1"),
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "bar1"),
        element(METHOD_INVOCATION),
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "bar2"),
        element(METHOD_INVOCATION)).hasCaseGroup().successors(1),
      block(
        element(INT_LITERAL, "2"),
        element(INT_LITERAL, "3"),
        element(INT_LITERAL, "4"),
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "qix"),
        element(METHOD_INVOCATION)).hasCaseGroup().successors(1),
      block(
        element(INT_LITERAL, "5"),
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "gul"),
        element(METHOD_INVOCATION)).hasCaseGroup().successors(1),
      block(
        element(INT_LITERAL, "6"),
        element(STRING_LITERAL, "boom"),
        element(NEW_CLASS)).hasCaseGroup().terminator(THROW_STATEMENT).successors(0),
      block(
        element(IDENTIFIER, "fun"),
        element(IDENTIFIER, "def"),
        element(METHOD_INVOCATION)).hasCaseGroup().successors(1),
      block(
        element(VARIABLE, "a"),
        element(IDENTIFIER, "foo")).terminator(SWITCH_STATEMENT).successors(3, 4, 5, 6, 7),
      block(
        element(IDENTIFIER, "Integer"),
        element(IDENTIFIER, "foo"),
        element(METHOD_INVOCATION)).successors(0));
    cfgChecker.check(cfg);
  }

