    public void check(final Tree element) {
      assertThat(element.kind()).as("Element kind").isEqualTo(kind);
      switch (element.kind()) {
        case VARIABLE:
          assertThat(((VariableTree) element).simpleName().name()).as("Variable name").isEqualTo(name);
          break;
        case IDENTIFIER:
          assertThat(((IdentifierTree) element).identifierToken().text()).as("Identifier").isEqualTo(name);
          break;
        case INT_LITERAL:
          assertThat(((LiteralTree) element).token().text()).as("Integer").isEqualTo(name);
          break;
        case CHAR_LITERAL:
          assertThat(((LiteralTree) element).token().text()).as("Character").isEqualTo(name);
          break;
        case STRING_LITERAL:
          String value = LiteralUtils.trimQuotes(((LiteralTree) element).token().text());
          assertThat(value).as("String").isEqualTo(name);
          break;
        case BOOLEAN_LITERAL:
          assertThat(((LiteralTree) element).token().text()).as("Boolean").isEqualTo(name);
          break;
        case METHOD_INVOCATION:
          if (name != null) {
            MethodInvocationTree method = (MethodInvocationTree) element;
            MemberSelectExpressionTree select = (MemberSelectExpressionTree) method.methodSelect();
            assertThat(select.identifier().toString()).as("Method").isEqualTo(name);
          }
          break;
        default:
          // No need to test any associated symbol for the other cases
          break;
      }
    }

