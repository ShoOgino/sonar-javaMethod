  @Test
  public void constructor_chaining() {
    Expression.Variable collection = variableWithId("collection");
    Expression.Variable s = variableWithId("s");
    Expression.Variable aux0 = variableWithId("%0");
    Expression.Variable aux1 = variableWithId("%1");
    UCFG firstConstructor = UCFGBuilder.createUCFGForMethod("A#<init>(Ljava/util/Collection;)V")
        .addStartingBlock(newBasicBlock("1")
            .assignTo(aux0, call("java.util.ArrayList#<init>(Ljava/util/Collection;)V")
                .withArgs(Expression.THIS, collection), new LocationInFile(FILE_KEY, 3,2,3,19))
            .jumpTo(UCFGBuilder.createLabel("0")))
        .addBasicBlock(newBasicBlock("0")
            .ret(constant("implicit return"), new LocationInFile(FILE_KEY, 4,0,4,1)))
        .build();
    UCFG secondConstructor = UCFGBuilder.createUCFGForMethod("A#<init>(Ljava/lang/String;)V")
        .addStartingBlock(newBasicBlock("1")
            .assignTo(aux0, call("java.util.Arrays#asList([Ljava/lang/Object;)Ljava/util/List;")
                .withArgs(new Expression.ClassName("java.util.Arrays"), s), new LocationInFile(FILE_KEY, 6,7,6,33))
            .assignTo(aux1, call("A#<init>(Ljava/util/Collection;)V")
                .withArgs(Expression.THIS, aux0), new LocationInFile(FILE_KEY, 6,2,6,34))
            .jumpTo(UCFGBuilder.createLabel("0")))
        .addBasicBlock(newBasicBlock("0")
            .ret(constant("implicit return"), new LocationInFile(FILE_KEY, 7,0,7,1)))
        .build();
    assertCodeToUCfg("class A extends java.util.ArrayList<String> {\n" +
        "public A(java.util.Collection<String> collection) {\n" +
        "  super(collection);\n" +
        "}\n" +
        "public A(String s) {\n" +
        "  this(java.util.Arrays.asList(s));\n" +
        "}\n" +
        "}", firstConstructor, secondConstructor);
  }

