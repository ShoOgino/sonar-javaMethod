  @Test
  public void test_copy() throws Exception {
    MethodMatcher vanilla = MethodMatcher.create().typeDefinition("Test").name("f").withoutParameter();
    MethodMatcher copyInt = vanilla.copy().addParameter("int");
    MethodMatcher copyString = vanilla.copy().addParameter("java.lang.String");
    Map<MethodMatcher, List<Integer>> matches = new HashMap<>();
    matches.put(vanilla, new ArrayList<>());
    matches.put(copyInt, new ArrayList<>());
    matches.put(copyString, new ArrayList<>());
    JavaCheckVerifier.verifyNoIssue("src/test/files/matcher/Copy.java", new IssuableSubscriptionVisitor() {
      @Override
      public List<Tree.Kind> nodesToVisit() {
        return Collections.singletonList(Tree.Kind.METHOD);
      }

      @Override
      public void visitNode(Tree tree) {
        MethodTree methodTree = (MethodTree) tree;
        matches.forEach((matcher, list) -> {
          if (matcher.matches(methodTree)) {
            list.add(methodTree.firstToken().line());
          }
        });
      }
    });
    assertThat(matches.get(vanilla)).containsExactly(3);
    assertThat(matches.get(copyInt)).containsExactly(5);
    assertThat(matches.get(copyString)).containsExactly(7);
  }

