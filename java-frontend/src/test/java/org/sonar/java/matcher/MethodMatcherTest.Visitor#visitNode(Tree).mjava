    @Override
    public void visitNode(Tree tree) {
      super.visitNode(tree);
      for (Map.Entry<MethodMatcher, List<Integer>> entry : matches.entrySet()) {
        boolean match = false;
        MethodMatcher matcher = entry.getKey();
        if (tree.is(Tree.Kind.METHOD_INVOCATION)) {
          MethodInvocationTree mit = (MethodInvocationTree) tree;
          Symbol symbol = mit.symbol();
          if ("foo".equals(symbol.name())) {
            // only 'foo' is tested with symbol
            match = matcher.matches(symbol);
          } else {
            match = matcher.matches(mit);
          }
        } else if (tree.is(Tree.Kind.METHOD)) {
          MethodTree methodTree = (MethodTree) tree;
          Symbol.MethodSymbol symbol = methodTree.symbol();
          if ("foo".equals(symbol.name())) {
            // only 'foo' is tested with symbol
            match = matcher.matches(symbol);
          } else {
            match = matcher.matches(methodTree);
          }
        } else if (tree.is(Tree.Kind.NEW_CLASS)) {
          match = matcher.matches((NewClassTree) tree);
        }
        if (match) {
          entry.getValue().add(((JavaTree) tree).getLine());
        }
      }
    }

