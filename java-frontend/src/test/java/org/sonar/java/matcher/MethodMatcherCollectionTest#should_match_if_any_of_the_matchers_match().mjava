  @Test
  public void should_match_if_any_of_the_matchers_match() {
    MethodMatcher matcher1 = mock(MethodMatcher.class);
    when(matcher1.matches(any(MethodInvocationTree.class))).thenReturn(false);
    MethodMatcher matcher2 = mock(MethodMatcher.class);
    when(matcher2.matches(any(MethodInvocationTree.class))).thenReturn(true);
    assertThat(MethodMatcherCollection.create(matcher1, matcher2).anyMatch(mock(MethodInvocationTree.class))).isTrue();
    assertThat(MethodMatcherCollection.create(matcher1).anyMatch(mock(MethodInvocationTree.class))).isFalse();

    matcher1 = mock(MethodMatcher.class);
    when(matcher1.matches(any(MethodTree.class))).thenReturn(false);
    matcher2 = mock(MethodMatcher.class);
    when(matcher2.matches(any(MethodTree.class))).thenReturn(true);
    assertThat(MethodMatcherCollection.create(matcher1, matcher2).anyMatch(mock(MethodTree.class))).isTrue();
    assertThat(MethodMatcherCollection.create(matcher1).anyMatch(mock(MethodTree.class))).isFalse();

    matcher1 = mock(MethodMatcher.class);
    when(matcher1.matches(any(NewClassTree.class))).thenReturn(false);
    matcher2 = mock(MethodMatcher.class);
    when(matcher2.matches(any(NewClassTree.class))).thenReturn(true);
    assertThat(MethodMatcherCollection.create(matcher1, matcher2).anyMatch(mock(NewClassTree.class))).isTrue();
    assertThat(MethodMatcherCollection.create(matcher1).anyMatch(mock(NewClassTree.class))).isFalse();

    matcher1 = mock(MethodMatcher.class);
    when(matcher1.matches(any(MethodReferenceTree.class))).thenReturn(false);
    matcher2 = mock(MethodMatcher.class);
    when(matcher2.matches(any(MethodReferenceTree.class))).thenReturn(true);
    assertThat(MethodMatcherCollection.create(matcher1, matcher2).anyMatch(mock(MethodReferenceTree.class))).isTrue();
    assertThat(MethodMatcherCollection.create(matcher1).anyMatch(mock(MethodReferenceTree.class))).isFalse();
  }

