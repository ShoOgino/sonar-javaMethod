  @Test
  public void test_addFlow() throws Exception {
    TestInputFileBuilder tifb = new TestInputFileBuilder("module", "relPath");
    tifb.setModuleBaseDir(new java.io.File("").toPath());
    tifb.setLines(3);
    tifb.setOriginalLineOffsets(new int[]{0, 10, 15});
    tifb.setLastValidOffset(25);
    DefaultInputFile file = tifb.build();
    RuleKey ruleKey = RuleKey.of("squid", "ruleKey");
    SensorContext sensorContext = mock(SensorContext.class);
    SensorStorage storage = mock(SensorStorage.class);
    DefaultIssue newIssueEmptyFlow = new DefaultIssue(storage);
    DefaultIssue newIssueWithFlow = new DefaultIssue(storage);
    Mockito.when(sensorContext.newIssue()).thenReturn(newIssueEmptyFlow, newIssueWithFlow);

    JavaIssue javaIssue = JavaIssue.create(sensorContext, ruleKey, null);
    javaIssue.setPrimaryLocation(file, "main message", 1, 2, 1, 6);
    javaIssue.addFlow(file, new ArrayList<>());
    javaIssue.save();
    Mockito.verify(storage, Mockito.times(1)).store(newIssueEmptyFlow);
    assertThat(newIssueEmptyFlow.flows()).isEmpty();


    javaIssue = JavaIssue.create(sensorContext, ruleKey, null);
    javaIssue.setPrimaryLocation(file, "main message", 1, 2, 1, 6);
    List<List<AnalyzerMessage>> flows = new ArrayList<>();
    flows.add(
      Lists.newArrayList(
        new AnalyzerMessage(null, file.file(), new AnalyzerMessage.TextSpan(2,2,2,4), "flow message 1", 0)));
    flows.add(
      Lists.newArrayList(
        new AnalyzerMessage(null, file.file(), new AnalyzerMessage.TextSpan(3,1,3,5), "flow message 2", 0)));
    javaIssue.addFlow(file, flows);
    javaIssue.save();
    Mockito.verify(storage, Mockito.times(1)).store(newIssueWithFlow);
    assertThat(newIssueWithFlow.flows()).hasSize(2);
  }

