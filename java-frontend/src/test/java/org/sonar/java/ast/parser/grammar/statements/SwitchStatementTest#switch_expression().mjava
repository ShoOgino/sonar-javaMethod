  @Test
  public void switch_expression() {
    assertThat(JavaLexer.STATEMENT)
      // with traditional control flow
      .matches("" +
        "r = switch (i) {" +
        "  case 1: break 10;" +
        "  case 2: break 20;" +
        "  default: break 0;" +
        "};")
      // with simplified control flow
      .matches("" +
        "r = switch (i) {" +
        "  case 1 -> 10;" +
        "  case 2 -> 20;" +
        "  default -> 0;" +
        "};")
      // with simplified control flow but still using break to return values
      .matches("" +
        "r = switch (i) {" +
        "  case 1 -> { break 10; }" +
        "  case 2 -> { print('A'); break 20; }" +
        "  default -> { break 20; }" +
        "};")
      // Our parser is more tolerant than java 12, we wrongly accept break without block
      .matches("r = switch (i) { case 1 -> break 10; default -> break 20; };")
      // a statement starting with switch is not considered as switch expression without parentheses
      .notMatches("switch (i) { default -> \"\"; }.length();")
      .matches("(switch (i) { default -> \"\"; }).length();");
  }

