  @Test
  public void switch_statement_with_simplified_control_flow() {
    assertThat(JavaLexer.SWITCH_STATEMENT)
      .matches("" +
        "switch (i) {" +
        "  case 1 -> print('A');" +
        "  case 2 -> { if (r == 0) print('A'); else print('B'); }" +
        "  default -> {}" +
        "}")
      .matches("" +
        "switch (i) {" +
        "  case ENUM1 -> print('A');" +
        "  case ENUM2 -> { if (r == 0) print('A'); else print('B'); }" +
        "  default -> {}" +
        "}")
      // cast expression should not be confuse with lambda
      .matches("switch (i) { case (char)C -> print('C'); default -> print('D'); }")
      // Limitation: we confuse the "case with arrow" and "lambda at the end of conditional expression" in the following valid java code:
      .notMatches("switch (i) { case true ? 1 : C -> print('C'); default -> print('B'); }")
      // Our parser is more tolerant than java 12, we wrongly accept:
      // empty statement
      .matches("switch (i) { case 1 -> ; }")
      // several statements
      .matches("switch (i) { case 1 -> i++; j++; }")
      // break
      .matches("switch (i) { case 1 -> break; default -> break; }")
      // not a block, expression or throw
      .matches("switch (i) { case 1 -> if (r == 0) print('A'); else print('B'); }");
  }

