  @Test
  public void sonar_symbol_table() throws Exception {
    File file = new File("src/test/files/highlighter/SonarSymTable.java");
    lines = Files.readLines(file, Charsets.UTF_8);
    JavaAstScanner.scanSingleFileForTests(file, new VisitorsBridge(ImmutableList.of(), sonarComponents.getJavaClasspath(), sonarComponents));

    // import List
    verify(symboltableBuilder).newSymbol(offset(1, 18), offset(1, 22));
    verify(symboltableBuilder).newReference(any(Symbol.class), eq(offset(5, 3)));
    verify(symboltableBuilder).newReference(any(Symbol.class), eq(offset(9, 11)));
    // Example class declaration
    verify(symboltableBuilder).newSymbol(offset(4, 7), offset(4, 14));
    verify(symboltableBuilder).newSymbol(offset(4, 15), offset(4, 16));
    // list field
    verify(symboltableBuilder).newSymbol(offset(5, 16), offset(5, 20));
    verify(symboltableBuilder).newReference(any(Symbol.class), eq(offset(10, 10)));
    // Example empty constructor
    verify(symboltableBuilder).newSymbol(offset(6, 3), offset(6, 10));
    // Do not reference constructor of class using this() and super() as long as SONAR-5894 is not fixed
    //verify(symboltableBuilder).newReference(any(Symbol.class), eq(offset(7, 5)));
    // Example list constructor
    verify(symboltableBuilder).newSymbol(offset(9, 3), offset(9, 10));
    // list local var
    verify(symboltableBuilder).newSymbol(offset(9, 24), offset(9, 28));
    verify(symboltableBuilder).newReference(any(Symbol.class), eq(offset(10, 17)));
    // method
    verify(symboltableBuilder).newSymbol(offset(12, 7), offset(12, 13));
    //label
    verify(symboltableBuilder).newSymbol(offset(13, 5), offset(13, 10));
    //Enum
    verify(symboltableBuilder).newSymbol(offset(16, 8), offset(16, 26));
    verify(symboltableBuilder).newSymbol(offset(17, 5), offset(17, 12));
    // Do not reference constructor of enum as it can leads to failure in analysis as long as SONAR-5894 is not fixed
    //verify(symboltableBuilder).newReference(any(Symbol.class), eq(offset(14, 5)));
    verify(symboltableBuilder).newSymbol(offset(18, 5), offset(18, 23));
    verify(symboltableBuilder).newSymbol(offset(21, 4), offset(21, 5));
    verify(symboltableBuilder).newReference(any(Symbol.class), eq(offset(21, 20)));
    verify(symboltableBuilder).newSymbol(offset(21, 12), offset(21, 19));
    verify(symboltableBuilder).newSymbol(offset(21, 22), offset(21, 23));
    verify(symboltableBuilder).build();
    verifyNoMoreInteractions(symboltableBuilder);
  }

