  @Test
  void active_flags() {
    String regex = "(?m:^)(?i:a)(?s:.)(?u:(\\\\d\\\\X))(?d:$)(?U:\\\\x{F6})(?x:[b](?=\\\\p{Lu})|\\\\1)";
    assertThat(allStates(assertSuccessfulParseResult(regex)).stream()
      .map(AutomatonStateTest::printClassAndFlags)
      .collect(Collectors.joining("\n")))
        .isEqualTo("" +
          "StartState\n" +
          "SequenceTree\n" +
          "NonCapturingGroupTree<flags: m:3>\n" +
          "BoundaryTree<flags: m:3>\n" +
          "NonCapturingGroupTree<flags: i:9>\n" +
          "PlainCharacterTree 'a' <flags: i:9>\n" +
          "NonCapturingGroupTree<flags: s:15>\n" +
          "DotTree<flags: s:15>\n" +
          "NonCapturingGroupTree<flags: u:21>\n" +
          "CapturingGroupTree<flags: u:21>\n" +
          "SequenceTree<flags: u:21>\n" +
          "EscapedCharacterClassTree<flags: u:21>\n" +
          "MiscEscapeSequenceTree<flags: u:21>\n" +
          "EndOfCapturingGroupState<flags: u:21>\n" +
          "NonCapturingGroupTree<flags: d:34>\n" +
          "BoundaryTree<flags: d:34>\n" +
          "NonCapturingGroupTree<flags: U:40>\n" +
          "UnicodeCodePointTree<flags: U:40>\n" +
          "NonCapturingGroupTree<flags: x:52>\n" +
          "DisjunctionTree<flags: x:52>\n" +
          "SequenceTree<flags: x:52>\n" +
          "CharacterClassTree<flags: x:52>\n" +
          "LookAroundTree<flags: x:52>\n" +
          "EscapedCharacterClassTree<flags: x:52>\n" +
          "EndOfLookaroundState<flags: x:52>\n" +
          "FinalState\n" +
          "BackReferenceTree<flags: x:52>");
  }

