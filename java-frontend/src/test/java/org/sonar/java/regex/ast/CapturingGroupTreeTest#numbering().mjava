  @Test
  void numbering() {
    RegexTree tree = assertSuccessfulParse("((A)(?:N)(B(?<groupC>C)))");
    assertKind(RegexTree.Kind.CAPTURING_GROUP, tree);
    CapturingGroupTree abc = ((CapturingGroupTree) tree);
    assertThat(abc.getGroupNumber()).isEqualTo(1);
    assertThat(abc.getName()).isEmpty();

    RegexTree abcElement = abc.getElement();
    assertKind(RegexTree.Kind.SEQUENCE, abcElement);
    List<RegexTree> abcItems = ((SequenceTree) abcElement).getItems();
    assertThat(abcItems).hasSize(3);
    assertThat(abcItems.stream().map(RegexTree::kind)).containsExactly(RegexTree.Kind.CAPTURING_GROUP, RegexTree.Kind.NON_CAPTURING_GROUP, RegexTree.Kind.CAPTURING_GROUP);

    CapturingGroupTree a = ((CapturingGroupTree) abcItems.get(0));
    CapturingGroupTree bc = ((CapturingGroupTree) abcItems.get(2));

    assertThat(a.getGroupNumber()).isEqualTo(2);
    assertThat(a.getName()).isEmpty();

    assertThat(bc.getGroupNumber()).isEqualTo(3);
    assertThat(bc.getName()).isEmpty();

    RegexTree bcElement = bc.getElement();
    assertKind(RegexTree.Kind.SEQUENCE, bcElement);
    List<RegexTree> bcItems = ((SequenceTree) bcElement).getItems();
    assertThat(bcItems).hasSize(2);

    assertKind(RegexTree.Kind.PLAIN_CHARACTER, bcItems.get(0));
    assertKind(RegexTree.Kind.CAPTURING_GROUP, bcItems.get(1));

    CapturingGroupTree c = ((CapturingGroupTree) bcItems.get(1));
    assertThat(c.getGroupNumber()).isEqualTo(4);
    assertThat(c.getName()).hasValue("groupC");

    testAutomaton(abc, abcItems, a, bc, bcItems, c);
  }

