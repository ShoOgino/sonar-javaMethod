  static void testAutomaton(RepetitionTree repetition, boolean reluctant) {
    RegexTree x = repetition.getElement();
    EndOfRepetitionState endOfRep = assertType(EndOfRepetitionState.class, repetition.continuation());
    assertEquals(repetition.activeFlags(), endOfRep.activeFlags());
    FinalState finalState = assertType(FinalState.class, endOfRep.continuation());
    assertSingleEdge(endOfRep, finalState, AutomatonState.TransitionType.EPSILON);
    assertEquals(AutomatonState.TransitionType.EPSILON, repetition.incomingTransitionType());
    assertSingleEdge(repetition, x, AutomatonState.TransitionType.CHARACTER);
    BranchState branch = assertType(BranchState.class, x.continuation());
    assertSingleEdge(x, branch, AutomatonState.TransitionType.EPSILON);
    assertSame(endOfRep, branch.continuation());
    if (reluctant) {
      assertListElements(branch.successors(),
        assertEdge(endOfRep, AutomatonState.TransitionType.EPSILON),
        assertEdge(repetition, AutomatonState.TransitionType.EPSILON)
      );
    } else {
      assertListElements(branch.successors(),
        assertEdge(repetition, AutomatonState.TransitionType.EPSILON),
        assertEdge(endOfRep, AutomatonState.TransitionType.EPSILON)
      );
    }
  }

