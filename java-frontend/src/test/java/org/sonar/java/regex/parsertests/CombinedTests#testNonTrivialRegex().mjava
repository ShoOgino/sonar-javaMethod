  @Test
  void testNonTrivialRegex() {
    RegexTree regex = assertSuccessfulParse("(ab|b)*(||)");
    assertLocation(0, 11, regex);
    SequenceTree sequence = assertType(SequenceTree.class, regex);
    List<RegexTree> items = sequence.getItems();
    assertEquals(2, items.size(), "The sequence should have two elements.");

    RepetitionTree firstPart = assertType(RepetitionTree.class, items.get(0));
    assertLocation(0, 7, firstPart);
    assertLocation(0, 6, firstPart.getElement());
    assertLocation(6, 7, firstPart.getQuantifier());
    SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, firstPart.getQuantifier());
    assertEquals(SimpleQuantifier.Kind.STAR, quantifier.getKind(), "Quantifier should be a star.");
    assertEquals(Quantifier.Modifier.GREEDY, quantifier.getModifier(), "Quantifier should be greedy.");
    GroupTree repeatedGroup = assertType(GroupTree.class, firstPart.getElement());
    DisjunctionTree repeatedDisjunction = assertType(DisjunctionTree.class, repeatedGroup.getElement());
    List<RegexTree> repeatedAlternatives = repeatedDisjunction.getAlternatives();
    assertEquals(2, repeatedAlternatives.size(), "First disjunction should have two alternatives.");
    assertPlainString("ab", repeatedAlternatives.get(0));
    assertPlainCharacter('b', repeatedAlternatives.get(1));

    GroupTree secondPart = assertType(GroupTree.class, items.get(1));
    assertLocation(7, 11, secondPart);
    DisjunctionTree disjunction = assertType(DisjunctionTree.class, secondPart.getElement());
    List<RegexTree> alternatives = disjunction.getAlternatives();
    assertEquals(3, alternatives.size(), "Second disjunction should have three alternatives");
    for (RegexTree alternative : alternatives) {
      SequenceTree empty = assertType(SequenceTree.class, alternative);
      assertEquals(0, empty.getItems().size(), "Second disjunction should contain only empty sequences.");
    }
  }

