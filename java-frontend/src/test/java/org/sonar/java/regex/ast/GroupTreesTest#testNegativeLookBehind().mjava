  @Test
  void testNegativeLookBehind() {
    RegexTree regex = assertSuccessfulParse("(?<!x)");
    LookAroundTree lookAround = assertType(LookAroundTree.class, regex);
    assertKind(RegexTree.Kind.LOOK_AROUND, lookAround);
    assertEquals(LookAroundTree.Polarity.NEGATIVE, lookAround.getPolarity());
    assertEquals(LookAroundTree.Direction.BEHIND, lookAround.getDirection());
    assertNotNull(lookAround.getElement());
    RegexTree x = lookAround.getElement();
    assertCharacter('x', x);

    FinalState finalState = assertType(FinalState.class, regex.continuation());
    assertEquals(AutomatonState.TransitionType.EPSILON, lookAround.incomingTransitionType());
    assertListSize(2, lookAround.successors());
    StartOfLookBehindState start = assertType(StartOfLookBehindState.class, lookAround.successors().get(0));
    assertListElements(lookAround.successors(),
      assertEdge(start, AutomatonState.TransitionType.LOOKAROUND_BACKTRACKING),
      assertEdge(finalState, AutomatonState.TransitionType.EPSILON)
    );
    assertListSize(1, start.successors());
    NegationState negationState = assertType(NegationState.class, start.successors().get(0));
    assertSingleEdge(start, negationState, AutomatonState.TransitionType.NEGATION);
    assertSingleEdge(negationState, x, AutomatonState.TransitionType.CHARACTER);
    EndOfLookaroundState endOfLookaroundState = assertType(EndOfLookaroundState.class, x.continuation());
    assertSingleEdge(x, endOfLookaroundState, AutomatonState.TransitionType.EPSILON);
    assertSingleEdge(endOfLookaroundState, finalState, AutomatonState.TransitionType.EPSILON);

  }

