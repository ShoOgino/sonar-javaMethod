  @Test
  void testNonTrivialRegexInFreeSpacingMode() {
    RegexTree regex = assertSuccessfulParse("(ab | b ) #this is a comment\\n*\\\\#(||)#this is another comment", true);
    assertLocation(0, 62, regex);
    assertKind(RegexTree.Kind.SEQUENCE, regex);
    assertFalse(regex.is(RegexTree.Kind.DISJUNCTION), "`is` should return false when kinds don't match");
    SequenceTree sequence = assertType(SequenceTree.class, regex);
    List<RegexTree> items = sequence.getItems();
    assertEquals(3, items.size(), "The sequence should have three elements.");

    assertKind(RegexTree.Kind.REPETITION, items.get(0));
    RepetitionTree firstPart = assertType(RepetitionTree.class, items.get(0));
    assertLocation(0, 31, firstPart);
    assertLocation(0, 30, firstPart.getElement());
    assertLocation(30, 31, firstPart.getQuantifier());
    SimpleQuantifier quantifier = assertType(SimpleQuantifier.class, firstPart.getQuantifier());
    assertEquals(SimpleQuantifier.Kind.STAR, quantifier.getKind(), "Quantifier should be a star.");
    assertEquals(Quantifier.Modifier.GREEDY, quantifier.getModifier(), "Quantifier should be greedy.");
    assertKind(RegexTree.Kind.CAPTURING_GROUP, firstPart.getElement());
    CapturingGroupTree repeatedGroup = assertType(CapturingGroupTree.class, firstPart.getElement());
    assertKind(RegexTree.Kind.DISJUNCTION, repeatedGroup.getElement());
    DisjunctionTree repeatedDisjunction = assertType(DisjunctionTree.class, repeatedGroup.getElement());
    List<RegexTree> repeatedAlternatives = repeatedDisjunction.getAlternatives();
    assertEquals(2, repeatedAlternatives.size(), "First disjunction should have two alternatives.");
    assertPlainString("ab", repeatedAlternatives.get(0));
    assertPlainCharacter('b', repeatedAlternatives.get(1));

    assertKind(RegexTree.Kind.PLAIN_CHARACTER, items.get(1));
    assertLocation(31, 34, items.get(1));
    assertPlainCharacter('#', items.get(1));

    assertKind(RegexTree.Kind.CAPTURING_GROUP, items.get(2));
    CapturingGroupTree thirdPart = assertType(CapturingGroupTree.class, items.get(2));
    assertLocation(34, 62, thirdPart);
    assertKind(RegexTree.Kind.DISJUNCTION, thirdPart.getElement());
    DisjunctionTree disjunction = assertType(DisjunctionTree.class, thirdPart.getElement());
    List<RegexTree> alternatives = disjunction.getAlternatives();
    assertEquals(3, alternatives.size(), "Second disjunction should have three alternatives");
    for (RegexTree alternative : alternatives) {
      assertKind(RegexTree.Kind.SEQUENCE, alternative);
      SequenceTree empty = assertType(SequenceTree.class, alternative);
      assertEquals(0, empty.getItems().size(), "Second disjunction should contain only empty sequences.");
    }
  }

