  @Test
  void backReferences() {
    assertBackReference(escapeJava("\\k<group1>"), "group1");
    assertBackReference(escapeJava("\\k<ALPHA>"), "ALPHA");
    assertBackReference(escapeJava("\\k<0invalid>"), "0invalid");

    assertBackReference(escapeJava("\\1"), 1);
    assertBackReference(escapeJava("(1)\\1"), 1);
    assertBackReference(escapeJava("(1)\\7"), 7);
    assertBackReference(escapeJava("(1)\\11"), 1);
    assertBackReference(escapeJava("(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)\\11"), 1);
    assertBackReference(escapeJava("(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)\\11"), 11);
    assertBackReference(escapeJava("(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)\\11"), 11);
    assertBackReference(escapeJava("(((((5)(6)(7)(8)(9)(a)\\11)?)+)*)"), 1);
    assertBackReference(escapeJava("(((((5)(6)(7)(8)(9)(a)(b)\\11)?)+)*)"), 11);

    RegexTree regex = assertSuccessfulParse(escapeJava("\\42."));
    assertThat(regex.is(RegexTree.Kind.SEQUENCE)).isTrue();
    SequenceTree seq = (SequenceTree) regex;
    assertThat(seq.getItems()).hasSize(3);
    assertThat(seq.getItems().get(0)).isInstanceOf(BackReferenceTree.class);
    assertThat(seq.getItems().get(1)).isInstanceOf(PlainCharacterTree.class);
    assertThat(seq.getItems().get(2)).isInstanceOf(DotTree.class);

    RegexTree regex2 = assertSuccessfulParse(escapeJava("\\42a"));
    assertThat(regex2.is(RegexTree.Kind.SEQUENCE)).isTrue();
    SequenceTree seq2 = (SequenceTree) regex2;
    assertThat(seq2.getItems()).hasSize(3);
    assertThat(seq2.getItems().get(0)).isInstanceOf(BackReferenceTree.class);
    assertThat(seq2.getItems().get(1)).isInstanceOf(PlainCharacterTree.class);
    assertThat(seq2.getItems().get(2)).isInstanceOf(PlainCharacterTree.class);
  }

