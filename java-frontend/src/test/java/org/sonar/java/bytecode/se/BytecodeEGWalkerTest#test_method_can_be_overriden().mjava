  @Test
  public void test_method_can_be_overriden() {
    MethodBehavior nativeMethod = getMethodBehavior("nativeMethod");
    assertThat(nativeMethod.isStaticMethod()).isTrue();
    assertThat(nativeMethod.isComplete()).isTrue();
    assertThat(nativeMethod.isOverrideableOrNative()).isTrue();

    MethodBehavior abstractMethod = getMethodBehavior("abstractMethod");
    assertThat(abstractMethod.isStaticMethod()).isFalse();
    assertThat(abstractMethod.isComplete()).isTrue();
    assertThat(abstractMethod.isOverrideableOrNative()).isTrue();

    MethodBehavior finalMethod = getMethodBehavior("finalMethod");
    assertThat(finalMethod.isStaticMethod()).isFalse();
    assertThat(finalMethod.isComplete()).isTrue();
    assertThat(finalMethod.isOverrideableOrNative()).isFalse();

    MethodBehavior staticMethod = getMethodBehavior("staticMethod");
    assertThat(staticMethod.isStaticMethod()).isTrue();
    assertThat(staticMethod.isComplete()).isTrue();
    assertThat(staticMethod.isOverrideableOrNative()).isFalse();

    MethodBehavior privateMethod = getMethodBehavior("privateMethod");
    assertThat(privateMethod.isStaticMethod()).isFalse();
    assertThat(privateMethod.isComplete()).isTrue();
    assertThat(privateMethod.isOverrideableOrNative()).isFalse();

    MethodBehavior publicMethodInFinalClass = getMethodBehavior("FinalInnerClass", finalInnerClass -> ((MethodTree) finalInnerClass.members().get(0)).symbol());
    assertThat(publicMethodInFinalClass.isStaticMethod()).isFalse();
    assertThat(publicMethodInFinalClass.isComplete()).isTrue();
    assertThat(publicMethodInFinalClass.isOverrideableOrNative()).isFalse();
  }

