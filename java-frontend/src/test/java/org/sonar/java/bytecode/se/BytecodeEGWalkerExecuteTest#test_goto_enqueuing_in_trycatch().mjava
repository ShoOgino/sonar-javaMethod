  @Test
  public void test_goto_enqueuing_in_trycatch() throws Exception {
    initializeWalker();

    Instructions mv = new Instructions();
    /*
     void test_goto(int i) {
       try {
          switch (i) {
            case 0:
              i = 1; // GOTO within try-catch
              break;
            case 1:
              i = 2;
              break;
          }
          i = 3;
        } catch (Exception e) {
          i = 4;
       }
     }
    */
    Label l0 = new Label();
    Label l1 = new Label();
    Label l2 = new Label();
    mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
    mv.visitLabel(l0);
    mv.visitVarInsn(ILOAD, 1);
    Label l3 = new Label();
    Label l4 = new Label();
    Label l5 = new Label();
    mv.visitLookupSwitchInsn(l5, new int[] {0, 1}, new Label[] {l3, l4});
    mv.visitLabel(l3);
    mv.visitInsn(ICONST_1);
    mv.visitVarInsn(ISTORE, 1);
    mv.visitJumpInsn(GOTO, l5); // tested GOTO instruction
    mv.visitLabel(l4);
    mv.visitInsn(ICONST_2);
    mv.visitVarInsn(ISTORE, 1);
    mv.visitLabel(l5);
    mv.visitInsn(ICONST_3);
    mv.visitVarInsn(ISTORE, 1);
    mv.visitLabel(l1);
    Label l6 = new Label();
    mv.visitJumpInsn(GOTO, l6);
    mv.visitLabel(l2);
    mv.visitVarInsn(ASTORE, 2);
    mv.visitInsn(ICONST_4);
    mv.visitVarInsn(ISTORE, 1);
    mv.visitLabel(l6);
    mv.visitInsn(RETURN);
    BytecodeCFGBuilder.BytecodeCFG cfg = mv.cfg();

    BytecodeCFGBuilder.Block gotoBlock = cfg.blocks().get(4);
    assertThat(gotoBlock.terminator().opcode).isEqualTo(GOTO);
    walker.programState = ProgramState.EMPTY_STATE;
    walker.handleBlockExit(new ProgramPoint(gotoBlock));

    assertThat(walker.workList).hasSize(1);
  }

