  @Test
  public void zeroness_check_shifts() {
    int[] opCodes = {Opcodes.ISHL, Opcodes.LSHL, Opcodes.ISHR, Opcodes.LSHR, Opcodes.IUSHR, Opcodes.LUSHR};

    for (int shiftOpCode : opCodes) {
      Instruction instruction = new Instruction(shiftOpCode);
      ProgramState ps = execute(instruction, zeroZeroPs);
      SymbolicValue peekValue = ps.peekValue();
      assertThat(peekValue).isEqualTo(sv2);
      ConstraintsByDomain constraints = ps.getConstraints(peekValue);
      assertThat(constraints.get(ZeroConstraint.class)).isEqualTo(ZeroConstraint.ZERO);
      assertThat(constraints.get(BooleanConstraint.class)).isEqualTo(BooleanConstraint.FALSE);

      ps = execute(instruction, zeroNonZeroPs);
      peekValue = ps.peekValue();
      assertThat(peekValue).isNotIn(sv1, sv2);
      constraints = ps.getConstraints(peekValue);
      assertThat(constraints.get(ZeroConstraint.class)).isEqualTo(ZeroConstraint.NON_ZERO);
      assertThat(constraints.get(BooleanConstraint.class)).isNull();

      ps = execute(instruction, nonZeroZeroPs);
      peekValue = ps.peekValue();
      assertThat(peekValue).isEqualTo(sv2);
      constraints = ps.getConstraints(peekValue);
      assertThat(constraints.get(ZeroConstraint.class)).isEqualTo(ZeroConstraint.ZERO);
      assertThat(constraints.get(BooleanConstraint.class)).isEqualTo(BooleanConstraint.FALSE);

      ps = execute(instruction, nonZeroNonZeroPs);
      peekValue = ps.peekValue();
      assertThat(peekValue).isNotIn(sv1, sv2);
      constraints = ps.getConstraints(peekValue);
      assertThat(constraints.get(ZeroConstraint.class)).isEqualTo(ZeroConstraint.NON_ZERO);
      assertThat(constraints.get(BooleanConstraint.class)).isNull();
    }
  }

