  @Test
  public void zeroness_check_div_rem() {
    int[] opCodes = {
      Opcodes.DDIV, Opcodes.FDIV, Opcodes.IDIV, Opcodes.LDIV,
      Opcodes.DREM, Opcodes.FREM, Opcodes.IREM, Opcodes.LREM
    };

    Set<Integer> remOpcodes = ImmutableSet.of(Opcodes.DREM, Opcodes.FREM, Opcodes.IREM, Opcodes.LREM);

    for (int divOpCode : opCodes) {
      Instruction instruction = new Instruction(divOpCode);
      ProgramState ps = execute(instruction, zeroZeroPs);
      assertThat(ps).isNull();

      ps = execute(instruction, zeroNonZeroPs);
      assertThat(ps).isNull();

      ps = execute(instruction, nonZeroZeroPs);
      SymbolicValue result = ps.peekValue();
      assertThat(result).isEqualTo(sv2);
      ConstraintsByDomain constraints = ps.getConstraints(result);
      assertThat(constraints.get(ZeroConstraint.class)).isEqualTo(ZeroConstraint.ZERO);
      assertThat(constraints.get(BooleanConstraint.class)).isEqualTo(BooleanConstraint.FALSE);

      ps = execute(instruction, nonZeroNonZeroPs);
      result = ps.peekValue();
      assertThat(result).isNotIn(sv1, sv2);
      constraints = ps.getConstraints(result);
      if (remOpcodes.contains(divOpCode)) {
        assertThat(constraints.get(ZeroConstraint.class)).isNull();
      } else {
        assertThat(constraints.get(ZeroConstraint.class)).isEqualTo(ZeroConstraint.NON_ZERO);
      }
      assertThat(constraints.get(BooleanConstraint.class)).isNull();

      ps = execute(instruction, noConstraints);
      result = ps.peekValue();
      assertThat(result).isNotIn(sv1, sv2);
      constraints = ps.getConstraints(result);
      assertThat(constraints.get(ZeroConstraint.class)).isNull();
      assertThat(constraints.get(BooleanConstraint.class)).isNull();
    }
  }

