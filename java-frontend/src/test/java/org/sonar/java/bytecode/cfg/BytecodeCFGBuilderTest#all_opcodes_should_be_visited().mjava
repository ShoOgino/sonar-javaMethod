  @Test
  public void all_opcodes_should_be_visited() throws Exception {
    Instructions bb = new Instructions();
    NO_OPERAND_INSN.forEach(bb::visitInsn);
    INT_INSN.forEach(i -> bb.visitIntInsn(i, 0));
    VAR_INSN.forEach(i -> bb.visitVarInsn(i, 0));
    TYPE_ISNSN.forEach(i -> bb.visitTypeInsn(i, "java/lang/Object"));
    FIELD_ISNSN.forEach(i -> bb.visitFieldInsn(i, "java/lang/Object", "foo", "D(D)"));
    METHOD_ISNS.forEach(i -> bb.visitMethodInsn(i, "java/lang/Object", "foo", "()V", i == INVOKEINTERFACE));
    Label l0 = new Label();
    bb.visitLabel(l0);
    JUMP_ISNS.forEach(i -> bb.visitJumpInsn(i, l0));

    bb.visitLdcInsn("a");
    bb.visitIincInsn(0, 1);
    Handle handle = new Handle(H_INVOKESTATIC, "", "", "()V", false);
    bb.visitInvokeDynamicInsn("sleep", "()V", handle);
    bb.visitLookupSwitchInsn(new Label(), new int[] {}, new Label[] {});
    bb.visitMultiANewArrayInsn("B", 1);

    Label dflt = new Label();
    Label case0 = new Label();
    bb.visitTableSwitchInsn(0, 1, dflt, case0);
    bb.visitLabel(dflt);
    bb.visitInsn(NOP);
    bb.visitLabel(l0);
    bb.visitInsn(NOP);


    BytecodeCFGBuilder.BytecodeCFG cfg = bb.cfg();
    Multiset<String> cfgOpcodes = cfgOpcodes(cfg);
    List<String> collect = Instructions.ASM_OPCODES.stream().map(op -> Printer.OPCODES[op]).collect(Collectors.toList());
    assertThat(cfgOpcodes).containsAll(collect);
  }

