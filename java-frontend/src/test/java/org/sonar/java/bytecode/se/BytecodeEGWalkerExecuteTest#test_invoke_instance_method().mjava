  @Test
  public void test_invoke_instance_method() throws Exception {
    int[] opcodes = new int[] {Opcodes.INVOKESPECIAL, Opcodes.INVOKEVIRTUAL, Opcodes.INVOKEINTERFACE};
    for (int opcode : opcodes) {
      SymbolicValue thisSv = new SymbolicValue();
      ProgramState stateWithThis = ProgramState.EMPTY_STATE.stackValue(thisSv);
      ProgramState programState = execute(invokeMethod(opcode, "methodWithoutArgument", "()V"), stateWithThis);
      assertEmptyStack(programState);
      assertThat(programState.getConstraints(thisSv).get(ObjectConstraint.class)).isEqualTo(ObjectConstraint.NOT_NULL);

      programState = execute(invokeMethod(opcode, "booleanMethod", "()Z"), stateWithThis);
      assertStack(programState, new Constraint[] {null});
      assertThat(isDoubleOrLong(programState, programState.peekValue())).isFalse();

      SymbolicValue arg = new SymbolicValue();
      programState = execute(invokeMethod(opcode, "intMethodWithIntArgument", "(I)I"), stateWithThis.stackValue(arg));
      assertStack(programState, new Constraint[] {null});
      assertThat(programState.peekValue()).isNotEqualTo(arg);

      programState = execute(invokeMethod(opcode, "methodWithIntIntArgument", "(II)V"), stateWithThis.stackValue(arg).stackValue(arg));
      assertEmptyStack(programState);
      assertThatThrownBy(() -> execute(invokeMethod(opcode, "methodWithIntIntArgument", "(II)V"), stateWithThis))
        .isInstanceOf(IllegalStateException.class);

      programState = execute(invokeMethod(opcode, "returningLong", "()J"), stateWithThis);
      assertThat(isDoubleOrLong(programState, programState.peekValue())).isTrue();
      programState = execute(invokeMethod(opcode, "returningDouble", "()D"), stateWithThis);
      assertThat(isDoubleOrLong(programState, programState.peekValue())).isTrue();
    }
  }

