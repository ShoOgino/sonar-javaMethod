  @Test
  public void test_method_is_complete() {
    MethodBehavior nativeMethod = getMethodBehavior("nativeMethod");
    assertThat(nativeMethod.isComplete()).isFalse();

    MethodBehavior abstractMethod = getMethodBehavior("abstractMethod");
    assertThat(abstractMethod.isComplete()).isFalse();

    MethodBehavior finalMethod = getMethodBehavior("finalMethod");
    assertThat(finalMethod.isStaticMethod()).isFalse();
    assertThat(finalMethod.isComplete()).isTrue();

    MethodBehavior staticMethod = getMethodBehavior("staticMethod");
    assertThat(staticMethod.isStaticMethod()).isTrue();
    assertThat(staticMethod.isComplete()).isTrue();

    MethodBehavior privateMethod = getMethodBehavior("privateMethod");
    assertThat(privateMethod.isStaticMethod()).isFalse();
    assertThat(privateMethod.isComplete()).isTrue();

    MethodBehavior publicMethodInFinalClass = getMethodBehavior("FinalInnerClass", finalInnerClass -> ((MethodTree) finalInnerClass.members().get(0)).symbol());
    assertThat(publicMethodInFinalClass.isStaticMethod()).isFalse();
    assertThat(publicMethodInFinalClass.isComplete()).isTrue();
  }

