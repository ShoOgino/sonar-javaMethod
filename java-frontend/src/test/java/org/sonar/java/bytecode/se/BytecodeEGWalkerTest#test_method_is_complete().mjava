  @Test
  public void test_method_is_complete() {
    String desc = "(Ljava/lang/String;)Z";
    MethodBehavior nativeMethod = getMethodBehavior("nativeMethod" + desc);
    assertThat(nativeMethod.isComplete()).isFalse();

    MethodBehavior abstractMethod = getMethodBehavior("abstractMethod" + desc);
    assertThat(abstractMethod.isComplete()).isFalse();

    MethodBehavior finalMethod = getMethodBehavior("finalMethod" + desc);
    assertThat(finalMethod.isComplete()).isFalse();

    MethodBehavior staticMethod = getMethodBehavior("staticMethod" + desc);
    assertThat(staticMethod.isComplete()).isTrue();

    MethodBehavior privateMethod = getMethodBehavior("privateMethod" + desc);
    assertThat(privateMethod.isComplete()).isFalse();

    MethodBehavior publicMethodInFinalClass = getMethodBehavior(FinalBytecodeTestClass.class, "publicMethod" + desc);
    assertThat(publicMethodInFinalClass.isComplete()).isFalse();
  }

