  private static void visitLine(String[] words, MethodVisitor mv, Map<Integer, Label> labelIndexes) {
    // labels :
    String initWord = words[0];
    if(initWord.matches("L\\d+")) {
      mv.visitLabel(labelIndexes.computeIfAbsent(Integer.parseInt(initWord.substring(1)), k -> new Label()));
    }

    int opcode = Arrays.asList(Printer.OPCODES).indexOf(initWord);
    if(opcode == -1) {
      return;
    }
    if(NO_OPERAND_INSN.contains(opcode)) {
      mv.visitInsn(opcode);
    } else if (INT_INSN.contains(opcode)) {
      mv.visitIntInsn(opcode, Integer.parseInt(words[1]));
    } else if (VAR_INSN.contains(opcode)) {
      mv.visitVarInsn(opcode, Integer.parseInt(words[1]));
    } else if (TYPE_INSN.contains(opcode)) {
      mv.visitTypeInsn(opcode, words[1]);
    } else if (FIELD_INSN.contains(opcode)) {
      mv.visitFieldInsn(opcode, words[1], words[2], words[3]);
    } else if (METHOD_INSN.contains(opcode)) {
      // FIXME: interface flag is hardcoded.
      mv.visitMethodInsn(opcode,  words[1], words[2], words[3], false);
    } else if (JUMP_INSN.contains(opcode)) {
      mv.visitJumpInsn(opcode, labelIndexes.computeIfAbsent(Integer.parseInt(words[1].substring(1)), k -> new Label()));
    } else if(opcode == IINC) {
      mv.visitIincInsn(Integer.parseInt(words[1]), Integer.parseInt(words[2]));
    }

  }

