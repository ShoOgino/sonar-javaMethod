  private static Stream<Arguments> data() {
    ImmutableList.Builder<Object[]> testData = ImmutableList.builder();

    // Instructions without operand
    testData.addAll(
      Instructions.NO_OPERAND_INSN.stream()
        .map(opcode -> new Object[] {new TestInput(opcode), new Instruction(opcode)})
        .collect(Collectors.toList()));

    // Instructions with int operand
    testData.add(new Object[] {intOp(BIPUSH, 1), inst(BIPUSH, 1)});
    testData.add(new Object[] {intOp(SIPUSH, 1), inst(SIPUSH, 1)});
    testData.add(new Object[] {intOp(NEWARRAY, 1), inst(NEWARRAY, 1)});

    // LOAD STORE
    testData.add(new Object[] {intOp(ILOAD, 42), inst(ILOAD, 42)});
    testData.add(new Object[] {intOp(LLOAD, 42), inst(LLOAD, 42)});
    testData.add(new Object[] {intOp(FLOAD, 42), inst(FLOAD, 42)});
    testData.add(new Object[] {intOp(DLOAD, 42), inst(DLOAD, 42)});
    testData.add(new Object[] {intOp(ALOAD, 42), inst(ALOAD, 42)});
    testData.add(new Object[] {intOp(ISTORE, 42),inst(ISTORE, 42)});
    testData.add(new Object[] {intOp(LSTORE, 42),inst(LSTORE, 42)});
    testData.add(new Object[] {intOp(FSTORE, 42),inst(FSTORE, 42)});
    testData.add(new Object[] {intOp(DSTORE, 42),inst(DSTORE, 42)});
    testData.add(new Object[] {intOp(ASTORE, 42),inst(ASTORE, 42)});
    testData.add(new Object[] {intOp(RET, 42), inst(RET, 42)});

    // Instructions with type argument
    testData.add(new Object[] {new TestInput(NEW, JAVA_LANG_OBJECT), inst(NEW, JAVA_LANG_OBJECT)});
    testData.add(new Object[] {new TestInput(ANEWARRAY, JAVA_LANG_OBJECT), inst(ANEWARRAY, JAVA_LANG_OBJECT)});
    testData.add(new Object[] {new TestInput(CHECKCAST, JAVA_LANG_OBJECT), inst(CHECKCAST, JAVA_LANG_OBJECT)});
    testData.add(new Object[] {new TestInput(INSTANCEOF, JAVA_LANG_OBJECT), inst(INSTANCEOF, JAVA_LANG_OBJECT)});

    // Instructions with field argument
    testData.add(new Object[] {new TestInput(GETSTATIC, JAVA_LANG_OBJECT, "field", ""), inst(GETSTATIC, JAVA_LANG_OBJECT, "field", "")});
    testData.add(new Object[] {new TestInput(PUTSTATIC, JAVA_LANG_OBJECT, "field", ""), inst(PUTSTATIC, JAVA_LANG_OBJECT, "field", "")});
    testData.add(new Object[] {new TestInput(GETFIELD, JAVA_LANG_OBJECT, "field", ""), inst(GETFIELD, JAVA_LANG_OBJECT, "field", "")});
    testData.add(new Object[] {new TestInput(PUTFIELD, JAVA_LANG_OBJECT, "field", ""), inst(PUTFIELD, JAVA_LANG_OBJECT, "field", "")});

    // Instructions with method argument
    testData.add(new Object[] {new TestInput(INVOKESPECIAL, JAVA_LANG_OBJECT, "hashCode", "()I", false), inst(INVOKESPECIAL, JAVA_LANG_OBJECT, "hashCode", "()I", false)});
    testData.add(new Object[] {new TestInput(INVOKESTATIC, JAVA_LANG_OBJECT, "hashCode", "()I", false), inst(INVOKESTATIC, JAVA_LANG_OBJECT, "hashCode", "()I", false)});
    testData.add(new Object[] {new TestInput(INVOKEVIRTUAL, JAVA_LANG_OBJECT, "hashCode", "()I", false), inst(INVOKEVIRTUAL, JAVA_LANG_OBJECT, "hashCode", "()I", false)});
    testData.add(new Object[] {new TestInput(INVOKEINTERFACE, JAVA_LANG_OBJECT, "hashCode", "()I", false), inst(INVOKEINTERFACE, JAVA_LANG_OBJECT, "hashCode", "()I", false)});

    // Jump instructions
    testData.add(new Object[] {new TestInput(IFEQ), null});
    testData.add(new Object[] {new TestInput(IFNE), null});
    testData.add(new Object[] {new TestInput(IFLT), null});
    testData.add(new Object[] {new TestInput(IFGE), null});
    testData.add(new Object[] {new TestInput(IFGT), null});
    testData.add(new Object[] {new TestInput(IFLE), null});
    testData.add(new Object[] {new TestInput(IF_ICMPEQ), null});
    testData.add(new Object[] {new TestInput(IF_ICMPNE), null});
    testData.add(new Object[] {new TestInput(IF_ICMPLT), null});
    testData.add(new Object[] {new TestInput(IF_ICMPGE), null});
    testData.add(new Object[] {new TestInput(IF_ICMPGT), null});
    testData.add(new Object[] {new TestInput(IF_ICMPLE), null});
    testData.add(new Object[] {new TestInput(IF_ACMPEQ), null});
    testData.add(new Object[] {new TestInput(IF_ACMPNE), null});
    testData.add(new Object[] {new TestInput(GOTO), null});
    testData.add(new Object[] {new TestInput(IFNULL), null});
    testData.add(new Object[] {new TestInput(IFNONNULL), null});

    // The rest
    testData.add(new Object[] {new TestInput(LDC), new Instruction.LdcInsn("a")});
    testData.add(new Object[] {new TestInput(IINC, 2), inst(IINC, 2)});
    testData.add(new Object[] {new TestInput(INVOKEDYNAMIC), new Instruction.InvokeDynamicInsn("()Ljava/util/function/Supplier;")});
    testData.add(new Object[] {new TestInput(TABLESWITCH), null});
    testData.add(new Object[] {new TestInput(LOOKUPSWITCH), null});
    testData.add(new Object[] {new TestInput(MULTIANEWARRAY), new Instruction.MultiANewArrayInsn("B", 2)});

    return testData.build()
      .stream()
      .map(data -> Arguments.of(data[0], data[1]));
  }

