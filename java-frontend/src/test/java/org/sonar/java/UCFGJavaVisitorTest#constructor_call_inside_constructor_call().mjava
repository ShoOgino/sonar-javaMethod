  @Test
  public void constructor_call_inside_constructor_call() {
    Expression.Variable arg = variableWithId("arg");
    Expression.Variable instance = variableWithId("instance");
    Expression.Variable aux0 = variableWithId("%0");
    Expression.Variable aux1 = variableWithId("%1");
    Expression.Variable aux2 = variableWithId("%2");
    Expression.Variable aux3 = variableWithId("%3");

    UCFG expectedUCFG = UCFGBuilder.createUCFGForMethod("A#method(Ljava/lang/String;)Ljava/lang/Integer;").addMethodParam(arg)
        .addStartingBlock(newBasicBlock("1")
            .newObject(aux0, "java.lang.Integer", new LocationInFile(FILE_KEY, 3, 39, 3, 46))
            .assignTo(aux1, call("java.lang.Integer#<init>(Ljava/lang/String;)V").withArgs(aux0, arg), new LocationInFile(FILE_KEY, 3,35,3,51))
            .newObject(aux2, "java.lang.Integer", new LocationInFile(FILE_KEY, 3, 27, 3, 34))
            .assignTo(aux3, call("java.lang.Integer#<init>(I)V").withArgs(aux2, aux0), new LocationInFile(FILE_KEY, 3,23,3,52))
            .assignTo(instance, call("__id").withArgs(aux2), new LocationInFile(FILE_KEY, 3,4,3,53))
            .ret(instance, new LocationInFile(FILE_KEY, 4,4,4,20)))
        .build();
    assertCodeToUCfg("class A { \n" +
        "  Integer method(String arg) {\n" +
        "    Integer instance = new Integer(new Integer(arg));\n" +
        "    return instance;\n" +
        "  }\n" +
        "}", expectedUCFG);
  }

