  @Test
  public void array_getters_and_setters_in_expressions() {
    Expression.Variable foo = UCFGBuilder.variableWithId("foo");
    Expression.Variable array = UCFGBuilder.variableWithId("array");
    Expression.Variable intA = UCFGBuilder.variableWithId("intA");
    Expression.Variable aux0 = UCFGBuilder.variableWithId("%0");
    Expression.Variable aux1 = UCFGBuilder.variableWithId("%1");
    Expression.Variable aux2 = UCFGBuilder.variableWithId("%2");
    Expression.Variable aux3 = UCFGBuilder.variableWithId("%3");
    Expression.Variable aux4 = UCFGBuilder.variableWithId("%4");
    Expression.Variable aux5 = UCFGBuilder.variableWithId("%5");
    Expression.Variable aux6 = UCFGBuilder.variableWithId("%6");
    Expression.Variable aux7 = UCFGBuilder.variableWithId("%7");
    String methodId = "A#foo(Ljava/lang/String;[Ljava/lang/String;[I)Ljava/lang/String;";
    UCFG expectedUCFG = UCFGBuilder.createUCFGForMethod(methodId)
        .addBasicBlock(newBasicBlock("1")
            .assignTo(aux0, call("__arrayGet").withArgs(intA), new LocationInFile(FILE_KEY, 3,14,3,21))
            .assignTo(aux1, call("__arrayGet").withArgs(array), new LocationInFile(FILE_KEY, 3,8,3,22))
            .assignTo(aux2, call(methodId).withArgs(Expression.THIS, aux1, array, intA), new LocationInFile(FILE_KEY, 3,4,3,36))
            .assignTo(aux3, call("__arrayGet").withArgs(array), new LocationInFile(FILE_KEY, 4,4,4,12))
            .assignTo(aux4, call("__concat").withArgs(aux3, foo), new LocationInFile(FILE_KEY, 4,4,4,19))
            .assignTo(aux5, call("__arraySet").withArgs(array, aux4), new LocationInFile(FILE_KEY, 4,4,4,19))
            .assignTo(aux6, call("__arrayGet").withArgs(array), new LocationInFile(FILE_KEY, 5,11,5,19))
            .assignTo(aux7, call("__concat").withArgs(aux6, foo), new LocationInFile(FILE_KEY, 5,11,5,25))
            .ret(aux7, new LocationInFile(FILE_KEY, 5, 4, 5, 26)))
        .build();
    assertCodeToUCfg("class A { \n" +
        "  private String foo(String foo, String[] array, int[] intA) { \n" +
        "    foo(array[intA[0]], array, intA);\n" +
        "    array[0] += foo;\n" +
        "    return array[0] + foo;\n" +
        "  }\n" +
        "}", expectedUCFG);
  }

