  @Test
  public void ConstructorResolution() throws Exception {
    Result result = Result.createFor("PrivateConstructors");
    JavaSymbol.TypeJavaSymbol classSymbol = (JavaSymbol.TypeJavaSymbol) result.symbol("PrivateConstructorClass");
    List<JavaSymbol> constructors = classSymbol.members.lookup("<init>");
    JavaSymbol ObjectConstructor = constructors.get(0);
    JavaSymbol stringConstructor = constructors.get(1);

    JavaSymbol.MethodJavaSymbol constructorReference;

    // this(s) - > PrivateConstructorClass(s)
    constructorReference = (JavaSymbol.MethodJavaSymbol) result.reference(11, 7);
    assertThat(constructorReference.owner()).isSameAs(classSymbol);
    assertThat(constructorReference).isEqualTo(stringConstructor);

    // super(s) -> PrivateConstructorClass(s)
    constructorReference = (JavaSymbol.MethodJavaSymbol) result.reference(17, 7);
    assertThat(constructorReference.owner()).isSameAs(classSymbol);
    assertThat(constructorReference).isEqualTo(stringConstructor);

    // super(s) -> PrivateConstructorClass(o)
    constructorReference = (JavaSymbol.MethodJavaSymbol) result.reference(24, 5);
    assertThat(constructorReference.owner()).isSameAs(classSymbol);
    assertThat(constructorReference).isEqualTo(ObjectConstructor);

    assertThat(stringConstructor.usages()).hasSize(2);
    assertThat(ObjectConstructor.usages()).hasSize(1);

    assertThat(((JavaSymbol.TypeJavaSymbol) result.symbol("Inner")).members().scopeSymbols.get(0)).isSameAs(result.reference(36, 29));
    assertThat(((JavaSymbol.TypeJavaSymbol) result.symbol("Inner2")).members().scopeSymbols.get(0)).isSameAs(result.reference(48, 30));

  }

