  @Test
  public void test_method_resolution_nested_parametrized_type_with_wildcards() {
    List<Type> elementTypes = declaredTypes(
      "class A<X> {"
        + "  void foo1(A<A<X>> a) {}"
        + "  void foo2(A<A<? extends X>> a) {}"

        + "  A<A<String>> qix1() { return null; }"
        + "  A<A<? extends String>> qix2() { return null; }"

        + "  void bar() {"
        + "    new A<String>().foo1(qix1());"
        + "    new A<String>().foo2(qix2());"
        + "  }"
        + "}");

    JavaType aType = (JavaType) elementTypes.get(0);
    JavaSymbol.MethodJavaSymbol foo1 = getMethodSymbol(aType, "foo1");
    assertThat(foo1.usages()).hasSize(1);

    JavaSymbol.MethodJavaSymbol foo2 = getMethodSymbol(aType, "foo2");
    assertThat(foo2.usages()).hasSize(1);
  }

