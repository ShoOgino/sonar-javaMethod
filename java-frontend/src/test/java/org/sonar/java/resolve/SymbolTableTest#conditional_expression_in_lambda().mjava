  @Test
  public void conditional_expression_in_lambda() {
    Result result = Result.createFor("ConditionalExpressionInLambda");
    JavaSymbol foo = result.symbol("foo");
    assertThat(foo.usages()).hasSize(1);

    IdentifierTree map = result.referenceTree(8, 8);
    JavaType mapResultType = ((MethodJavaType) map.symbolType()).resultType;
    assertThat(mapResultType.isTagged(JavaType.DEFERRED)).isFalse();
    assertThat(mapResultType.is("java.util.stream.Stream")).isTrue();
    assertThat(mapResultType.isParameterized()).isTrue();
    JavaType substitutionType = ((ParametrizedTypeJavaType) mapResultType).typeSubstitution.substitutedTypes().get(0);
    assertThat(substitutionType.is("java.lang.Comparable")).isTrue();

    JavaType lambdaType = (JavaType) ((MethodInvocationTree) map.parent().parent()).arguments().get(0).symbolType();
    assertThat(lambdaType.isParameterized()).isTrue();
    assertThat(lambdaType.is("java.util.function.Function")).isTrue();

    // only interested in return type: LUB of Integer and String
    JavaType returnType = ((ParametrizedTypeJavaType) lambdaType).typeSubstitution.substitutedTypes().get(1);
    assertThat(returnType.isSubtypeOf("java.lang.Comparable")).isTrue();

    JavaSymbol bar = result.symbol("bar");
    assertThat(bar.usages()).hasSize(1);

    IdentifierTree flatMap = result.referenceTree(13, 8);
    JavaType flatMapResultType = ((MethodJavaType) flatMap.symbolType()).resultType;
    assertThat(flatMapResultType.isTagged(JavaType.DEFERRED)).isFalse();
    assertThat(flatMapResultType.is("java.util.stream.Stream")).isTrue();
    assertThat(flatMapResultType.isParameterized()).isTrue();
    JavaType flatMapSubstitutionType = ((ParametrizedTypeJavaType) flatMapResultType).typeSubstitution.substitutedTypes().get(0);
    assertThat(flatMapSubstitutionType.is("java.lang.Integer")).isTrue();

    lambdaType = (JavaType) ((MethodInvocationTree) flatMap.parent().parent()).arguments().get(0).symbolType();
    assertThat(lambdaType.isParameterized()).isTrue();
    assertThat(lambdaType.is("java.util.function.Function")).isTrue();

    // only interested in return type: LUB of deferred type Stream.empty() and Stream<Integer>
    returnType = ((ParametrizedTypeJavaType) lambdaType).typeSubstitution.substitutedTypes().get(1);
    assertThat(returnType.isParameterized()).isTrue();
    assertThat(returnType.is("java.util.stream.Stream")).isTrue();

    JavaType substitution = ((ParametrizedTypeJavaType) returnType).typeSubstitution.substitutedTypes().get(0);
    assertThat(substitution.is("java.lang.Integer")).isTrue();
  }

