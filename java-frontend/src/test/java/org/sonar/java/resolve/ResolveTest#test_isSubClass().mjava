  @Test
  public void test_isSubClass() {
    JavaSymbol.PackageJavaSymbol packageJavaSymbol = new JavaSymbol.PackageJavaSymbol(null, null);
    JavaSymbol.TypeJavaSymbol base = new JavaSymbol.TypeJavaSymbol(0, "class", packageJavaSymbol);

    // same class
    JavaSymbol.TypeJavaSymbol c = base;
    assertThat(resolve.isSubClass(c, base)).isTrue();

    // base not extended by class
    c = new JavaSymbol.TypeJavaSymbol(0, "class", packageJavaSymbol);

    // class extends base
    assertThat(resolve.isSubClass(c, base)).isFalse();
    ((ClassJavaType) c.type).supertype = base.type;
    assertThat(resolve.isSubClass(c, base)).isTrue();

    // class extends superclass
    ((ClassJavaType) c.type).supertype = new JavaSymbol.TypeJavaSymbol(0, "superclass", packageJavaSymbol).type;
    assertThat(resolve.isSubClass(c, base)).isFalse();

    // class extends superclass, which extends base
    ((ClassJavaType) ((ClassJavaType) c.type).supertype).supertype = base.type;
    assertThat(resolve.isSubClass(c, base)).isTrue();

    // base - is an interface
    base = new JavaSymbol.TypeJavaSymbol(Flags.INTERFACE, "class", packageJavaSymbol);
    c = new JavaSymbol.TypeJavaSymbol(0, "class", packageJavaSymbol);

    // base not implemented by class
    ((ClassJavaType) c.type).interfaces = ImmutableList.of();
    assertThat(resolve.isSubClass(c, base)).isFalse();

    // class implements base interface
    ((ClassJavaType) c.type).interfaces = ImmutableList.of(base.type);
    assertThat(resolve.isSubClass(c, base)).isTrue();

    // class implements interface, but not base interface
    JavaSymbol.TypeJavaSymbol i = new JavaSymbol.TypeJavaSymbol(Flags.INTERFACE, "class", packageJavaSymbol);
    ((ClassJavaType) i.type).interfaces = ImmutableList.of();
    ((ClassJavaType) c.type).interfaces = ImmutableList.of(i.type);
    assertThat(resolve.isSubClass(c, base)).isFalse();

    // class implements interface, which implements base
    ((ClassJavaType) c.type).interfaces = ImmutableList.of(base.type);
    assertThat(resolve.isSubClass(c, base)).isTrue();

    // class extends superclass
    ((ClassJavaType) c.type).interfaces = ImmutableList.of();
    ((ClassJavaType) c.type).supertype = new JavaSymbol.TypeJavaSymbol(0, "superclass", packageJavaSymbol).type;
    ((ClassJavaType) ((ClassJavaType) c.type).supertype).interfaces = ImmutableList.of();
    assertThat(resolve.isSubClass(c, base)).isFalse();

    // class extends superclass, which implements base
    ((ClassJavaType) ((ClassJavaType) c.type).supertype).interfaces = ImmutableList.of(base.type);
    assertThat(resolve.isSubClass(c, base)).isTrue();
  }

