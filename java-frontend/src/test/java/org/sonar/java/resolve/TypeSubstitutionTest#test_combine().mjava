  @Test
  public void test_combine() throws Exception {
    TypeVariableJavaType a = newTypeVar("A");
    TypeVariableJavaType b = newTypeVar("B");
    TypeVariableJavaType x = newTypeVar("X");
    TypeVariableJavaType y = newTypeVar("Y");
    JavaType s = newType("S");
    JavaType i = newType("I");
    TypeSubstitution t0 = new TypeSubstitution().add(a, s).add(b, i);
    TypeSubstitution t1 = new TypeSubstitution().add(a, x).add(b, y);

    TypeSubstitution combined = t1.combine(t0);
    assertThat(combined.typeVariables()).hasSize(2).containsSequence(x, y);
    assertThat(combined.substitutedTypes()).hasSize(2).containsSequence(s, i);

    TypeSubstitution t3 = new TypeSubstitution().add(a, s).add(b, newParameterizedType("G", i));
    TypeSubstitution t4 = new TypeSubstitution().add(a, x).add(b, newParameterizedType("G", y));
    combined = t4.combine(t3);
    assertThat(combined.typeVariables()).hasSize(2).containsSequence(x, y);
    assertThat(combined.substitutedTypes()).hasSize(2).containsSequence(s, i);

    TypeSubstitution t5 = new TypeSubstitution().add(a, new WildCardType(x, WildCardType.BoundType.SUPER)).add(b, new WildCardType(y, WildCardType.BoundType.EXTENDS));
    combined = t5.combine(t0);
    assertThat(combined.typeVariables()).hasSize(2).containsSequence(x, y);
    assertThat(combined.substitutedTypes()).hasSize(2).containsSequence(s, i);


    TypeSubstitution t6 = new TypeSubstitution().add(a, s).add(b, new ArrayJavaType(i, null));
    TypeSubstitution t7 = new TypeSubstitution().add(a, x).add(b, new ArrayJavaType(y, null));
    combined = t7.combine(t6);
    assertThat(combined.typeVariables()).hasSize(2).containsSequence(x, y);
    assertThat(combined.substitutedTypes()).hasSize(2).containsSequence(s, i);

    ParametrizedTypeJavaType listOfY = newParameterizedType("List", y);
    TypeSubstitution t8 = new TypeSubstitution().add(a, new WildCardType(x, WildCardType.BoundType.SUPER)).add(b, listOfY);
    TypeSubstitution t9 = new TypeSubstitution().add(a, y).add(b, listOfY);
    combined = t8.combine(t9);
    assertThat(combined.typeVariables()).hasSize(2).containsSequence(x, b);
    assertThat(combined.substitutedTypes()).hasSize(2).containsSequence(y, listOfY);
  }

