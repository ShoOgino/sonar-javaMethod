  private TypeSubstitution typeSubstitutionForTypeParameters(List<JavaType> formals, List<JavaType> args, boolean varargs, TypeVariableJavaType... typeParameters) {
    MethodJavaType methodType = new MethodJavaType(formals, symbols.voidType, Collections.emptyList(), symbols.objectType.symbol);
    int flags = Flags.PUBLIC;
    if (varargs) {
      flags |= Flags.VARARGS;
    }
    JavaSymbol.MethodJavaSymbol methodSymbol = new JavaSymbol.MethodJavaSymbol(flags, "foo", methodType, symbols.objectType.symbol);
    for (TypeVariableJavaType typeParameter : typeParameters) {
      methodSymbol.addTypeParameter(typeParameter);
    }
    return typeInferenceSolver.inferTypeSubstitution(methodSymbol, formals, args);
  }

