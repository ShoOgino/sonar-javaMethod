  private JavaType typeOf(String input) {
    SemanticModel semanticModel = mock(SemanticModel.class);
    when(semanticModel.getEnv(any(Tree.class))).thenReturn(env);
    TypeAndReferenceSolver visitor = new TypeAndReferenceSolver(semanticModel, symbols, new Resolve(symbols, bytecodeCompleter, parametrizedTypeCache), parametrizedTypeCache);

    String p = "class Test { void wrapperMethod() { " + input + "; } }";
    CompilationUnitTree tree = parse(p);
    tree.accept(visitor);

    TestedNodeExtractor testedNodeExtractor = new TestedNodeExtractor(false);
    testedNodeExtractor.visitCompilationUnit(tree);
    return visitor.getType(((ExpressionStatementTree) testedNodeExtractor.testedNode).expression());
  }

