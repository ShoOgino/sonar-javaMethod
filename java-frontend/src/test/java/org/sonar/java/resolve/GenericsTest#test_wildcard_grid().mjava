  @Test
  public void test_wildcard_grid() {
    List<Type> elementTypes = declaredTypesUsingHierarchy(
      "A",
      "A<?>",
      "A<Animal>",
      "A<Cat>",
      "A<? extends Animal>",
      "A<? extends Cat>",
      "A<? super Animal>",
      "A<? super Cat>",
      "A<T>",
      "A<? extends T>",
      "A<? super T>");

    Type a = elementTypes.get(0).erasure();
    Type aWc = elementTypes.get(1);
    Type aAnimal = elementTypes.get(2);
    Type aCat = elementTypes.get(3);
    Type aExtendsAnimal = elementTypes.get(4);
    Type aExtendsCat = elementTypes.get(5);
    Type aSuperAnimal = elementTypes.get(6);
    Type aSuperCat = elementTypes.get(7);
    Type aT = elementTypes.get(8);
    Type aExtendsT = elementTypes.get(9);
    Type aSuperT = elementTypes.get(10);

    SubtypeAssert.assertThat(a)
      .isSubtypeOf(a)
      .isNotSubtypeOf(aWc, aAnimal, aCat, aExtendsAnimal, aExtendsCat, aSuperAnimal, aSuperCat, aT, aExtendsT, aSuperT);

    SubtypeAssert.assertThat(aWc)
      .isSubtypeOf(a, aWc)
      .isNotSubtypeOf(aAnimal, aCat, aExtendsAnimal, aExtendsCat, aSuperAnimal, aSuperCat, aT, aExtendsT, aSuperT);

    SubtypeAssert.assertThat(aAnimal)
      .isSubtypeOf(a, aWc, aAnimal, aExtendsAnimal, aSuperAnimal, aSuperCat)
      .isNotSubtypeOf(aCat, aExtendsCat, aT, aExtendsT, aSuperT);

    SubtypeAssert.assertThat(aCat)
      .isSubtypeOf(a, aWc, aCat, aExtendsAnimal, aExtendsCat, aSuperCat)
      .isNotSubtypeOf(aAnimal, aSuperAnimal, aT, aExtendsT, aSuperT);

    SubtypeAssert.assertThat(aExtendsAnimal)
      .isSubtypeOf(a, aWc, aExtendsAnimal)
      .isNotSubtypeOf(aAnimal, aCat, aExtendsCat, aSuperAnimal, aSuperCat, aT, aExtendsT, aSuperT);

    SubtypeAssert.assertThat(aExtendsCat)
      .isSubtypeOf(a, aWc, aExtendsAnimal, aExtendsCat)
      .isNotSubtypeOf(aAnimal, aCat, aSuperAnimal, aSuperCat, aT, aExtendsT, aSuperT);

    SubtypeAssert.assertThat(aSuperAnimal)
      .isSubtypeOf(a, aWc, aSuperAnimal, aSuperCat)
      .isNotSubtypeOf(aAnimal, aCat, aExtendsAnimal, aExtendsCat, aT, aExtendsT, aSuperT);

    SubtypeAssert.assertThat(aSuperCat)
      .isSubtypeOf(a, aWc, aSuperCat)
      .isNotSubtypeOf(aAnimal, aCat, aExtendsAnimal, aExtendsCat, aSuperAnimal, aT, aExtendsT, aSuperT);

    SubtypeAssert.assertThat(aT)
      .isSubtypeOf(a, aWc, aT, aExtendsT, aSuperT)
      .isNotSubtypeOf(aAnimal, aCat, aExtendsAnimal, aExtendsCat, aSuperAnimal, aSuperCat);

    SubtypeAssert.assertThat(aExtendsT)
      .isSubtypeOf(a, aWc, aExtendsT)
      .isNotSubtypeOf(aAnimal, aCat, aExtendsAnimal, aExtendsCat, aSuperAnimal, aSuperCat, aT, aSuperT);

    SubtypeAssert.assertThat(aSuperT)
      .isSubtypeOf(a, aWc, aSuperT)
      .isNotSubtypeOf(aAnimal, aCat, aExtendsAnimal, aExtendsCat, aSuperAnimal, aSuperCat, aT, aExtendsT);
  }

