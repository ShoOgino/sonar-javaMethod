  public static void main(String[] args) throws Exception {
    ClassVisitor cv = new ClassVisitor(ASM_API_VERSION) {
      @Override
      public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
        System.out.println("CLASS");
        System.out.println("access: " + asFlagSet(access));
        System.out.println("name: " + name);
        System.out.println("signature: " + signature);
        System.out.println("superName: " + superName);
        System.out.println("interfaces: " + Arrays.toString(interfaces));
        System.out.println();
      }

      @Override
      public void visitSource(String source, String debug) {
        System.out.println("SOURCE");
        System.out.println();
      }

      @Override
      public void visitOuterClass(String owner, String name, String desc) {
        System.out.println("OUTER CLASS");
        System.out.println("owner: " + owner);
        System.out.println("name: " + name);
        System.out.println("desc: " + desc);
        System.out.println();
      }

      @Override
      public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
        System.out.println("ANNOTATION");
        System.out.println("desc: " + desc);
        System.out.println("visible: " + visible);
        return null;
      }

      @Override
      public void visitAttribute(Attribute attr) {
        System.out.println("ATTRIBUTE");
        System.out.println();
      }

      @Override
      public void visitInnerClass(String name, String outerName, String innerName, int access) {
        System.out.println("INNER CLASS");
        System.out.println("access: " + asFlagSet(access));
        System.out.println("name: " + name);
        System.out.println("outerName: " + outerName);
        System.out.println("innerName: " + innerName);
        System.out.println();
      }

      @Override
      public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
        System.out.println("FIELD");
        System.out.println("access: " + asFlagSet(access));
        System.out.println("name: " + name);
        System.out.println("desc: " + desc);
        System.out.println("signature: " + desc);
        System.out.println();
        return null;
      }

      @Override
      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
        System.out.println("METHOD");
        System.out.println("access: " + asFlagSet(access));
        System.out.println("name: " + name);
        System.out.println("desc: " + desc);
        System.out.println("signature: " + desc);
        System.out.println("exceptions: " + Arrays.toString(exceptions));
        System.out.println();
        return null;
      }

      @Override
      public void visitEnd() {
        System.out.println("END");
      }

      public EnumSet<Flag> asFlagSet(int flags) {
        EnumSet<Flag> result = EnumSet.noneOf(Flag.class);
        int mask = 1;
        for (int i = 0; i < 15; i++) {
          if ((flags & mask) != 0) {
            result.add(Flag.values()[i]);
          }
          mask = mask << 1;
        }
        return result;
      }

    };

    InputStream in = AsmExample.class.getResourceAsStream("/org/sonar/java/resolve/AsmExample.class");
    ClassReader classReader = new ClassReader(in);
    classReader.accept(cv, 0);
  }

