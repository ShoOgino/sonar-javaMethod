  @Test
  public void fully_qualified_name() throws Exception {
    JavaSymbol.PackageJavaSymbol packageSymbol = new JavaSymbol.PackageJavaSymbol("org.foo.bar", null);
    JavaSymbol.TypeJavaSymbol typeSymbol = new JavaSymbol.TypeJavaSymbol(Flags.PUBLIC, "MyType", packageSymbol);
    JavaSymbol.TypeJavaSymbol rootPackageTypeSymbol = new JavaSymbol.TypeJavaSymbol(Flags.PUBLIC, "MyType2", symbols.defaultPackage);
    assertThat(typeSymbol.type.fullyQualifiedName()).isEqualTo("org.foo.bar.MyType");
    assertThat(rootPackageTypeSymbol.type.fullyQualifiedName()).isEqualTo("MyType2");
    JavaSymbol.TypeJavaSymbol typeSymbolNested = new JavaSymbol.TypeJavaSymbol(Flags.PUBLIC, "Nested", typeSymbol);
    assertThat(typeSymbolNested.type.fullyQualifiedName()).isEqualTo("org.foo.bar.MyType$Nested");
    JavaSymbol.TypeJavaSymbol typeSymbolAnonymous = new JavaSymbol.TypeJavaSymbol(Flags.PUBLIC, "", typeSymbol);
    assertThat(typeSymbolAnonymous.type.fullyQualifiedName()).isEqualTo("org.foo.bar.MyType$1");
    JavaSymbol.MethodJavaSymbol methodSymbol = new JavaSymbol.MethodJavaSymbol(Flags.PUBLIC, "<init>", typeSymbolNested);
    JavaSymbol.TypeJavaSymbol typeSymbolAnonymous2 = new JavaSymbol.TypeJavaSymbol(Flags.PUBLIC, "", methodSymbol);
    assertThat(typeSymbolAnonymous2.type.fullyQualifiedName()).isEqualTo("org.foo.bar.MyType$Nested$1");
  }

