  @Test
  public void lub_of_generics_without_loop() {
    List<Type> typesFromInput = declaredTypes(
      "class Parent<X1, X2> {}",
      "class Child<Y1, Y2> extends Parent<Y1, Y2> {}",
      "class GrandChild<Z1, Z2> extends Child<Z1, Z2> {}",

      "class A {}",
      "class B extends A {}",
      "class C extends A {}",
      "class D extends C {}",

      "class ChildBA extends Child<B, A> {}",
      "class ChildCA extends Child<C, A> {}",
      "class GrandChildDA extends GrandChild<D, D> {}");
    Type childBA = typesFromInput.get(7);
    Type childCA = typesFromInput.get(8);
    Type grandChildDD = typesFromInput.get(9);

    JavaType lub = leastUpperBound(childBA, childCA, grandChildDD);
    assertThat(lub.isTagged(JavaType.PARAMETERIZED)).isTrue();
    ParametrizedTypeJavaType ptt = (ParametrizedTypeJavaType) lub;
    assertThat(ptt.rawType.is("Child")).isTrue();
    JavaType substitution = ptt.substitution(ptt.typeParameters().get(0));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.EXTENDS);
    assertThat(((WildCardType) substitution).bound.is("A")).isTrue();
    substitution = ptt.substitution(ptt.typeParameters().get(1));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.EXTENDS);
    assertThat(((WildCardType) substitution).bound.is("A")).isTrue();
  }

