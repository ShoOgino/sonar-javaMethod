  @Test
  public void test_method_resolution_for_parametrized_method_with_provided_substitution() {
    JavaType type = (JavaType) declaredTypesFromFile("src/test/files/resolve/ParametrizedMethodsWithProvidedSubstitution.java").get(0);

    methodHasUsagesWithSameTypeAs(type, "f1", 0, "bString", "bb");
    methodHasUsagesWithSameTypeAs(type, "f1", 1, "aType");

    methodHasUsagesWithSameTypeAs(type, "f2", 0, "integer", "string", "aType");
    methodHasUsagesWithSameTypeAs(type, "f2", 1, "aType");

    methodHasUsagesWithSameTypeAs(type, "f3", "integer");
    methodHasUsagesWithSameTypeAs(type, "f4", (String) null);

    Type stringArray = getMethodInvocationType(getMethodSymbol(type, "f4"), 0);
    assertThat(stringArray.isArray()).isTrue();
    assertThat(((JavaType.ArrayJavaType) stringArray).elementType.is("java.lang.String")).isTrue();

    methodHasUsagesWithSameTypeAs(type, "f5", "cStringInteger", "cStringInteger", "cAB");
    methodHasUsagesWithSameTypeAs(type, "f6", "wcSuperA");
    methodHasUsagesWithSameTypeAs(type, "f7", "integer");

    methodHasUsagesWithSameTypeAs(type, "f8", 0, "object");
    methodHasUsagesWithSameTypeAs(type, "f8", 1, "bType", "dType");

    methodHasUsagesWithSameTypeAs(type, "f9", 0, "object", "object");
    methodHasUsagesWithSameTypeAs(type, "f9", 1, "dType");

    methodHasUsagesWithSameTypeAs(type, "f10", "integer");
  }

