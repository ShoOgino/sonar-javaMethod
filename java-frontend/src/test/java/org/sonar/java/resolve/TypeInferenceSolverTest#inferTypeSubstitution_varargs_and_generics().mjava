  @Test
  public void inferTypeSubstitution_varargs_and_generics() {
    TypeVariableJavaType X = getTypeVariable("X");
    JavaType aType = createType("A", symbols.objectType);

    // A<{X=X}>
    JavaType aXType = parametrizedTypeCache.getParametrizedTypeType(aType.symbol, new TypeSubstitution().add(X, X));
    // A
    JavaType aRawType = aXType.erasure();
    // A<{X=? extends T}>
    JavaType aWCextendsTType = parametrizedTypeCache.getParametrizedTypeType(aType.symbol, new TypeSubstitution().add(X, new WildCardType(T, BoundType.EXTENDS)));

    // formals = A<{X=? extends T}>[]
    List<JavaType> formals = Lists.<JavaType>newArrayList(new ArrayJavaType(aWCextendsTType, symbols.arrayClass));

    // only raw types: args = A, A
    List<JavaType> args = Lists.<JavaType>newArrayList(aRawType, aRawType);
    TypeSubstitution substitution = typeSubstitutionForTypeParametersWithVarargs(formals, args, T);
    assertThat(substitution.substitutedType(T)).isNull();
    assertThat(substitution.isUnchecked()).isTrue();

    // raw type with generic type : A, A<String>
    args = Lists.<JavaType>newArrayList(aRawType, parametrizedTypeCache.getParametrizedTypeType(aType.symbol, new TypeSubstitution().add(X, symbols.stringType)));
    substitution = typeSubstitutionForTypeParametersWithVarargs(formals, args, T);
    assertThat(substitution.substitutedType(T)).isNull();
    assertThat(substitution.isUnchecked()).isTrue();
  }

