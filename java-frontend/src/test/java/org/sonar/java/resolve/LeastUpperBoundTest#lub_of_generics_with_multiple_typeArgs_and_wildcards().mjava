  @Test
  public void lub_of_generics_with_multiple_typeArgs_and_wildcards() {
    List<Type> typesFromInput = declaredTypes(
      "class Parent<X1, X2, X3, X4, X5, X6> {}",

      "class A {}",
      "class B extends A {}",
      "class C extends A {}",
      "class D extends C {}",

      // -------------- Parent< X1 ----- , X2 ------- , X3 ------- , X4 ----- , X5 ------- , X6>
      "class P1 extends Parent< ? super B, ? extends B, ? extends A, A,         ? super A  , ? super B > {}",
      "class P2 extends Parent< ? super C, ? extends C, A,           ? super A, ? extends A, ? extends C > {}",
      "class P3 extends Parent< ? super D, ? extends D, A,           A,         A          , ? > {}");
    Type p1 = typesFromInput.get(5);
    Type p2 = typesFromInput.get(6);
    Type p3 = typesFromInput.get(7);

    JavaType lub = leastUpperBound(p1, p2, p3);
    assertThat(lub.isTagged(JavaType.PARAMETERIZED)).isTrue();
    ParametrizedTypeJavaType ptt = (ParametrizedTypeJavaType) lub;
    assertThat(ptt.rawType.is("Parent")).isTrue();
    JavaType substitution;

    // X1
    substitution = ptt.substitution(ptt.typeParameters().get(0));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.SUPER);
    // FIXME SONARJAVA-1632 - should be B & C & D
    assertThat(((WildCardType) substitution).bound.is("B")).isTrue();

    // X2
    substitution = ptt.substitution(ptt.typeParameters().get(1));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.EXTENDS);
    assertThat(((WildCardType) substitution).bound.is("A")).isTrue();

    // X3
    substitution = ptt.substitution(ptt.typeParameters().get(2));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.EXTENDS);
    assertThat(((WildCardType) substitution).bound.is("A")).isTrue();

    // X4
    substitution = ptt.substitution(ptt.typeParameters().get(3));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.SUPER);
    assertThat(((WildCardType) substitution).bound.is("A")).isTrue();

    // X5
    substitution = ptt.substitution(ptt.typeParameters().get(4));
    assertThat(substitution.isTagged(JavaType.CLASS)).isTrue();
    assertThat(substitution.is("A")).isTrue();

    // X6
    substitution = ptt.substitution(ptt.typeParameters().get(5));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.UNBOUNDED);
  }

