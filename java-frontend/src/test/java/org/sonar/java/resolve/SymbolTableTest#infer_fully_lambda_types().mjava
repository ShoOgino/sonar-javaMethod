  @Test
  public void infer_fully_lambda_types() {
    Result result = Result.createFor("InferLambdaType");

    // Check lambda with a block return type.
    assertThat(getRSubstitution(result, "line0").is("java.lang.String[]")).isTrue();
    // Check lambda with a block with multiple return (using lub).
    assertThat(getRSubstitution(result, "line1").is("java.lang.Number")).isTrue();
    // Check lambda with a block only throwing.
    assertThat(getRSubstitution(result, "line2").isTagged(JavaType.WILDCARD)).isTrue();
    // Check lambda with nested returns
    assertThat(getRSubstitution(result, "line3").is("java.lang.Integer")).isTrue();
    // Check one liner lambdas
    assertThat(getRSubstitution(result, "line").is("java.lang.String[]")).isTrue();


    MethodInvocationTree mapMethod = (MethodInvocationTree) result.symbol("line").declaration().parent().parent().parent();
    Type mapType = mapMethod.symbolType();
    assertThat(mapType.is("java.util.stream.Stream")).as("Found "+ mapType +" instead of Stream").isTrue();
    assertThat(((JavaType) mapType).isParameterized()).isTrue();
    assertThat(((ParametrizedTypeJavaType) mapType).typeSubstitution.substitutedTypes()).hasSize(1);
    assertThat(((ParametrizedTypeJavaType) mapType).typeSubstitution.substitutedTypes().get(0).is("java.lang.String[]")).isTrue();

    JavaSymbol sx = result.symbol("sx");
    assertThat(sx.type.is("java.lang.String")).isTrue();
  }

