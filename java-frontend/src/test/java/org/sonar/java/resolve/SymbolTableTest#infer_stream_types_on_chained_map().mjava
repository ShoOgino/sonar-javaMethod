  @Test
  public void infer_stream_types_on_chained_map() {
    Result result = Result.createFor("InferLambdaType");

    JavaSymbol stringToBoolean = result.symbol("stringToBoolean");
    assertThat(stringToBoolean.usages()).hasSize(2);
    assertThat(result.reference(63, 17)).isEqualTo(stringToBoolean);
    assertThat(result.reference(67, 17)).isEqualTo(stringToBoolean);

    IdentifierTree map = result.referenceTree(63, 8);
    JavaType mapResultType = ((MethodJavaType) map.symbolType()).resultType;
    assertThat(mapResultType.isTagged(JavaType.DEFERRED)).isFalse();
    assertThat(mapResultType.is("java.util.stream.Stream")).isTrue();
    assertThat(mapResultType.isParameterized()).isTrue();
    JavaType substitutionType = ((ParametrizedTypeJavaType) mapResultType).typeSubstitution.substitutedTypes().get(0);
    assertThat(substitutionType.is("java.lang.Boolean")).isTrue();

     JavaSymbol booleanToInt = result.symbol("booleanToInt");
     assertThat(booleanToInt.usages()).hasSize(1);
     assertThat(result.reference(68, 17)).isEqualTo(booleanToInt);

     JavaSymbol intToInt = result.symbol("intToInt");
     assertThat(intToInt.usages()).hasSize(1);
     assertThat(result.reference(72, 20)).isEqualTo(intToInt);
  }

