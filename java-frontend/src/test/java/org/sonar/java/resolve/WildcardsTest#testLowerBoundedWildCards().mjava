  @Test
  public void testLowerBoundedWildCards() {
    List<Type> elementTypes = declaredTypesUsingHierarchy(
      "B<?>",
      "B<? super Object>",
      "A<? super Object>",
      "A<? super Animal>",
      "A<? super Cat>",
      "A<Cat>",
      "A<Cat>");

    Type wcBType = elementTypes.get(0);
    Type wcSuperObjectBType = elementTypes.get(1);
    Type wcSuperObjectAType = elementTypes.get(2);
    Type wcSuperAnimalAType = elementTypes.get(3);
    Type wcSuperCatAType = elementTypes.get(4);
    Type catAType = elementTypes.get(5);
    Type catAType2 = elementTypes.get(6);

    SubtypeAssert.assertThat(wcBType).isNotSubtypeOf(wcSuperObjectAType);
    SubtypeAssert.assertThat(wcSuperObjectAType).isNotSubtypeOf(wcBType);

    SubtypeAssert.assertThat(wcBType).isNotSubtypeOf(wcSuperObjectBType);
    SubtypeAssert.assertThat(wcSuperObjectBType).isSubtypeOf(wcBType);

    SubtypeAssert.assertThat(wcSuperObjectAType).isNotSubtypeOf(wcSuperObjectBType);
    SubtypeAssert.assertThat(wcSuperObjectBType).isSubtypeOf(wcSuperObjectAType);

    SubtypeAssert.assertThat(wcSuperObjectBType).isSubtypeOf(wcSuperAnimalAType);
    SubtypeAssert.assertThat(wcSuperAnimalAType).isNotSubtypeOf(wcSuperObjectBType);

    SubtypeAssert.assertThat(wcSuperAnimalAType).isSubtypeOf(wcSuperCatAType);
    SubtypeAssert.assertThat(wcSuperCatAType).isNotSubtypeOf(wcSuperAnimalAType);

    SubtypeAssert.assertThat(catAType).isSubtypeOf(wcSuperCatAType);
    SubtypeAssert.assertThat(wcSuperCatAType).isNotSubtypeOf(catAType);

    SubtypeAssert.assertThat(catAType).isSubtypeOf(catAType2);
    SubtypeAssert.assertThat(catAType2).isSubtypeOf(catAType);
  }

