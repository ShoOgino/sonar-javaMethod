  @Test
  public void test() throws Exception {
    CompilationUnitTree cut = (CompilationUnitTree) p.parse("class A {\n" +
      "        java.util.function.Consumer<String> c = s -> {\n" +
      "          if(s.length()>0) {\n" +
      "            return;\n" +
      "          }\n" +
      "          System.out.println(s);\n" +
      "        };\n" +
      "\n" +
      "        java.util.function.Function<String, String> f = s -> {\n" +
      "          if(s.length() > 0) {\n" +
      "            return s.replace('a', 'b');\n" +
      "          }\n" +
      "          return unknownSymbol;\n" +
      "        };\n" +
      "      }");
    SemanticModel.createFor(cut, new SquidClassLoader(Collections.emptyList()));
    List<VariableTree> vars = ((ClassTree) cut.types().get(0)).members().stream().map(m -> (VariableTree) m).collect(Collectors.toList());
    LambdaBlockReturnVisitor visitor = new LambdaBlockReturnVisitor();
    ((LambdaExpressionTree) vars.get(0).initializer()).body().accept(visitor);
    assertThat(visitor.types).isEmpty();
    visitor = new LambdaBlockReturnVisitor();
    ((LambdaExpressionTree) vars.get(1).initializer()).body().accept(visitor);
    assertThat(visitor.types).hasSize(1);
  }

