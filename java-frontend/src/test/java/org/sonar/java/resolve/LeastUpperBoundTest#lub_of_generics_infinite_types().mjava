  @Test
  public void lub_of_generics_infinite_types() {
    List<Type> typesFromInput = declaredTypes(
      "class Parent<X> {}",
      "class Child<Y> extends Parent<Y> {}",

      "class ChildInteger extends Child<Integer> {}",
      "class ChildString extends Child<String> {}");
    Type childInteger = typesFromInput.get(2);
    Type childString = typesFromInput.get(3);

    JavaType lub = leastUpperBound(childInteger, childString);
    assertThat(lub.isTagged(JavaType.PARAMETERIZED)).isTrue();
    ParametrizedTypeJavaType ptt = (ParametrizedTypeJavaType) lub;
    assertThat(ptt.rawType.is("Child")).isTrue();
    JavaType substitution = ptt.substitution(ptt.typeParameters().get(0));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.EXTENDS);
    assertThat(((WildCardType) substitution).bound.isSubtypeOf("java.lang.Comparable")).isTrue();
  }

