  @Test
  public void lub_of_generics() {
    List<Type> typesFromInput = declaredTypes(
      "class A extends Exception {}",
      "class B extends Exception implements I1<Exception> {}",
      "interface I1<T> {}");
    Type a = typesFromInput.get(0);
    Type b = typesFromInput.get(1);

    Type lub = leastUpperBound(a, b);
    assertThat(lub).isSameAs(a.symbol().superClass());

    typesFromInput = declaredTypes(
      "class A<T> extends java.util.List<T> {}",
      "class B extends A<String> {}");
    a = typesFromInput.get(0);
    b = typesFromInput.get(1);
    lub = leastUpperBound(a, b);
    assertThat(((JavaType) lub).isTagged(JavaType.PARAMETERIZED)).isTrue();
    assertThat(lub.erasure()).isSameAs(a.erasure());
    assertThat(((ParametrizedTypeJavaType) lub).typeSubstitution.substitutedTypes()).hasSize(1);
    WildCardType substituted = (WildCardType) ((ParametrizedTypeJavaType) lub).typeSubstitution.substitutedTypes().get(0);
    assertThat(substituted.boundType).isSameAs(WildCardType.BoundType.EXTENDS);
    assertThat(substituted.bound.is("java.lang.Object")).isTrue();
  }

