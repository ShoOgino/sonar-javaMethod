  @Test
  public void test_variables_types_parameters_and_wildcards() {
    List<Type> elementTypes = declaredTypesUsingHierarchy(
      "A<?>",
      "A<T>",
      "A<U>",
      "Test<?,?,?>",
      "Test<T,U,V>",
      "Test<?,U,V>",
      "Test<?,V,U>",
      "Test<?,?,U>",
      "Test<?,?,U>",
      "Test<?,?>");

    Type wcAType = elementTypes.get(0);
    Type varTAType = elementTypes.get(1);
    Type varUAType = elementTypes.get(2);
    Type wcTestWcWcWcType = elementTypes.get(3);
    Type varTestTUVType = elementTypes.get(4);
    Type wcTestWcUVType = elementTypes.get(5);
    Type wcTestWcVUType = elementTypes.get(6);
    Type wcTestWcWcUType = elementTypes.get(7);
    Type wcTestWcWcUType2 = elementTypes.get(8);
    Type wcTestWcWcType = elementTypes.get(9);

    SubtypeAssert.assertThat(varTAType).isSubtypeOf(wcAType);
    SubtypeAssert.assertThat(varUAType).isSubtypeOf(wcAType);

    SubtypeAssert.assertThat(varTestTUVType).isSubtypeOf(wcTestWcWcWcType);
    SubtypeAssert.assertThat(wcTestWcUVType).isSubtypeOf(wcTestWcWcWcType);
    SubtypeAssert.assertThat(wcTestWcVUType).isSubtypeOf(wcTestWcWcWcType);

    SubtypeAssert.assertThat(wcTestWcVUType).isNotSubtypeOf(wcTestWcUVType);

    SubtypeAssert.assertThat(wcTestWcWcUType).isSubtypeOf(wcTestWcWcWcType);
    SubtypeAssert.assertThat(wcTestWcWcUType).isSubtypeOf(wcTestWcWcUType2);

    SubtypeAssert.assertThat(wcTestWcWcWcType).isNotSubtypeOf(wcTestWcWcType);
  }

