  @Test
  public void test_method_resolution_with_substitution_in_type_hierarchy() {
    List<Type> elementTypes = declaredTypes(
      "class A {"
        + "  <T> T foo(B<T> b) {"
        + "    return null;"
        + "  }"

        + "  Object foo(Object o) {"
        + "    return null;"
        + "  }"

        + "  void tst() {"
        + "    stringType = foo(new C());"
        + "    stringType = foo(new D());"
        + "    objectType = foo(new A());"
        + "    objectType = foo(new E());"
        + "  }"

        + "  String stringType;"
        + "  Object objectType;"
        + "}"

        + "class B<T> {}"
        + "class C extends B<String> {}"
        + "class D extends C {}"
        + "class E extends A {}");

    JavaType type = (JavaType) elementTypes.get(0);
    JavaSymbol.MethodJavaSymbol methodSymbol = getMethodSymbol(type, "foo");
    assertThat(methodSymbol.usages()).hasSize(2);
  }

