  @Test
  public void primary_qualified_identifier() {

    // qualified_identifier
    assertThat(typeOfExpression("var")).isSameAs(variableSymbol.type);
    assertThat(typeOfExpression("var.length")).isSameAs(symbols.intType);
    assertThat(typeOfExpression("MyClass.var")).isSameAs(variableSymbol.type);

    // qualified_identifier[expression]
    assertThat(typeOf("var[42] = 12")).isSameAs(((ArrayJavaType) variableSymbol.type).elementType);
    assertThat(typeOfExpression("var[42]")).isSameAs(((ArrayJavaType) variableSymbol.type).elementType);

    // qualified_identifier[].class
    assertThat(typeOfExpression("id[].class").erasure()).isSameAs(symbols.classType);
    assertThat(typeOfExpression("id[][].class").erasure()).isSameAs(symbols.classType);

    // qualified_identifier(arguments)
    assertThat(typeOf("argMethod(1)")).isSameAs(symbols.intType);
    assertThat(typeOf("var2.method()")).isSameAs(symbols.intType);
    assertThat(typeOf("MyClass.var2.method()")).isSameAs(symbols.intType);

    // qualified_identifier.class
    JavaType idClassType = typeOfExpression("id.class");
    assertThat(idClassType.erasure()).isSameAs(symbols.classType);
    assertThat(idClassType).isInstanceOf(ParametrizedTypeJavaType.class);
    ParametrizedTypeJavaType idClassTypeParameterized = (ParametrizedTypeJavaType) idClassType;
    assertThat(idClassTypeParameterized.typeSubstitution.substitutedType(idClassTypeParameterized.typeParameters().get(0))).isSameAs(Symbols.unknownType);
    // TODO id.<...>...
    assertThat(typeOfExpression("MyClass.this")).isSameAs(classSymbol.type);
    assertThat(typeOf("id.super(arguments)")).isSameAs(symbols.unknownType);
    // TODO id.new...
  }

