  @Test
  void constant() {
    File bytecodeDir = new File("target/test-classes");
    Map<String,Object> valuesByFieldName = new HashMap<>();
    JavaAstScanner.scanSingleFileForTests(
      TestUtils.inputFile("src/test/java/org/sonar/java/resolve/targets/ClassWithConstants.java"),
      new VisitorsBridge(Collections.singleton(new SubscriptionVisitor() {
        @Override
        public List<Tree.Kind> nodesToVisit() {
          return Collections.singletonList(Tree.Kind.VARIABLE);
        }

        @Override
        public void visitNode(Tree tree) {
          VariableTree variableTree = (VariableTree) tree;
          Object value = null;
          Symbol symbol = variableTree.symbol();
          if (symbol.isVariableSymbol()) {
            value = JUtils.constantValue((Symbol.VariableSymbol) symbol).orElse(null);
          }
          valuesByFieldName.put(variableTree.simpleName().name(), value);
        }
      }), Collections.singletonList(bytecodeDir), null));
    assertThat(valuesByFieldName.keySet()).contains("CONST1", "nonStatic", "nonFinal", "BOOLEAN_TRUE", "BOOLEAN_FALSE");
    assertThat(valuesByFieldName.get("CONST1")).isEqualTo("CONST_VALUE");
    assertThat(valuesByFieldName.get("nonStatic")).isNull();
    assertThat(valuesByFieldName.get("nonFinal")).isNull();
    assertThat(valuesByFieldName.get("BOOLEAN_TRUE")).isEqualTo(Boolean.TRUE);
    assertThat(valuesByFieldName.get("BOOLEAN_FALSE")).isEqualTo(Boolean.FALSE);

    // See Java 13 Virtual Machine Specification 4.7.2:
    // constant values of short, char and byte types are stored in bytecode as CONSTANT_Integer
    assertThat(valuesByFieldName.get("INT"))
      .isInstanceOf(Integer.class);
    assertThat(valuesByFieldName.get("SHORT"))
      .isInstanceOf(Integer.class);
    assertThat(valuesByFieldName.get("CHAR"))
      .isInstanceOf(Integer.class);
    assertThat(valuesByFieldName.get("BYTE"))
      .isInstanceOf(Integer.class);

    assertThat(valuesByFieldName.get("FLOAT"))
      .isInstanceOf(Float.class);
    assertThat(valuesByFieldName.get("LONG"))
      .isInstanceOf(Long.class);
    assertThat(valuesByFieldName.get("DOUBLE"))
      .isInstanceOf(Double.class);
  }

