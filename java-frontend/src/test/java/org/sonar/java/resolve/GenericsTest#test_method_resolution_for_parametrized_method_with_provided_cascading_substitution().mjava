  @Test
  public void test_method_resolution_for_parametrized_method_with_provided_cascading_substitution() {
    List<Type> elementTypes = declaredTypes(
      "class Test {"
        + "  <T extends X, X extends A> void foo(T t) {}"
        + "  void foo(Object o) {}"

        + "  void test() {"
        + "    this.<B, A>foo(new B());"
        + "    this.<A, A>foo(new B());"
        + "    this.<A, B>foo(new B());"
        + "  }"
        + "}"
        + "class A {}"
        + "class B extends A {}");

    JavaType type = (JavaType) elementTypes.get(0);
    JavaSymbol.MethodJavaSymbol methodSymbol = getMethodSymbol(type, "foo", 0);
    assertThat(methodSymbol.usages()).hasSize(2);
    methodSymbol = getMethodSymbol(type, "foo", 1);
    assertThat(methodSymbol.usages()).hasSize(1);
  }

