  private JavaType getRSubstitution(Result result, String symbolName) {
    LambdaExpressionTree lambda = ((LambdaExpressionTree) result.symbol(symbolName).declaration().parent());
    JavaType lambdaType = (JavaType) lambda.symbolType();
    assertThat(lambdaType.isParameterized()).isTrue();
    assertThat(lambdaType.is("java.util.function.Function")).isTrue();
    TypeSubstitution typeSubstitution = ((ParametrizedTypeJavaType) lambdaType).typeSubstitution;
    assertThat(typeSubstitution.size()).isEqualTo(2);
    JavaType Tsubstitution = typeSubstitution.substitutedTypes().get(0);
    // check that T -> ? super String
    assertThat(Tsubstitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) Tsubstitution).boundType).isEqualTo(WildCardType.BoundType.SUPER);
    assertThat(((WildCardType) Tsubstitution).bound.is("java.lang.String")).isTrue();
    return typeSubstitution.substitutedTypes().get(1);
  }

