  @Test
  public void test_method_resolution_based_on_wildcards() {
    List<Type> elementTypes = declaredTypes(
      "class Animal {}",
      "class Cat extends Animal {}",
      "class Lion extends Cat {}",

      "class A<T> {",
      "  void foo(A<? extends Animal> a) {",
      // call to foo with wildcard
      "    foo(new A<Animal>());",
      "    foo(new A<Cat>());",
      "    foo(new A<Lion>());",
      // call to foo with object
      "    foo(new A<Object>());",
      "  }",

      "  void foo(Object o) {}",

      "  void bar(A<? super Cat> a) {",
      // call to bar with wildcard
      "    bar(new A<Object>());",
      "    bar(new A<Animal>());",
      "    bar(new A<Cat>());",
      // call to bar with object
      "    bar(new A<Lion>());",
      "  }",

      "  void bar(Object o) {}",

      "  void qix(A<?> a) {",
      "    qix(new A<Object>());",
      "    qix(new A<Animal>());",
      "    qix(new A<Cat>());",
      "    qix(new A<Lion>());",
      "  }",

      "  void gul(A<Cat> a) {",
      "    gul(new A<Animal>());",
      "    gul(new A<Cat>());",
      "    gul(new A<Object>());",
      "  }",

      "  void gul(Object o) {}",
      "}");

    JavaType aType = (JavaType) elementTypes.get(3);
    JavaSymbol.MethodJavaSymbol fooWildCard = getMethodSymbol(aType, "foo", 0);
    JavaSymbol.MethodJavaSymbol fooObject = getMethodSymbol(aType, "foo", 1);
    assertThat(fooWildCard.usages()).hasSize(3);
    assertThat(fooObject.usages()).hasSize(1);

    JavaSymbol.MethodJavaSymbol barWildCard = getMethodSymbol(aType, "bar", 0);
    JavaSymbol.MethodJavaSymbol barObject = getMethodSymbol(aType, "bar", 1);
    assertThat(barWildCard.usages()).hasSize(3);
    assertThat(barObject.usages()).hasSize(1);

    JavaSymbol.MethodJavaSymbol qix = getMethodSymbol(aType, "qix", 0);
    assertThat(qix.usages()).hasSize(4);

    JavaSymbol.MethodJavaSymbol gulGenerics = getMethodSymbol(aType, "gul", 0);
    JavaSymbol.MethodJavaSymbol gulObject = getMethodSymbol(aType, "gul", 1);

    // FIXME SONARJAVA-1514 generics should be handled correctly
    assertThat(gulGenerics.usages()).hasSize(3); // should be 1
    assertThat(gulObject.usages()).hasSize(0); // should be 2
  }

