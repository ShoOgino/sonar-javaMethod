  @Test
  public void Enum() {
    Result result = Result.createFor("Enum");
    JavaSymbol.TypeJavaSymbol enumSymbol = (JavaSymbol.TypeJavaSymbol) result.symbol("Foo");
    assertThat(enumSymbol.flags()).isEqualTo(Flags.PUBLIC | Flags.ENUM);

    ParametrizedTypeJavaType superType = (ParametrizedTypeJavaType) enumSymbol.getSuperclass();
    JavaSymbol.TypeJavaSymbol superclass = superType.symbol;
    assertThat(superclass.getName()).isEqualTo("Enum");

    // usages of methods values() and valueOf(String s) from an enum when enum definition is in file
    JavaSymbol.MethodJavaSymbol valuesMethod = (JavaSymbol.MethodJavaSymbol) enumSymbol.lookupSymbols("values").iterator().next();
    assertThat(valuesMethod.declaration).isNull();
    assertThat(valuesMethod.isStatic()).isTrue();
    assertThat(valuesMethod.parameterTypes()).isEmpty();
    assertThat(((MethodJavaType) valuesMethod.type).resultType).isInstanceOf(ArrayJavaType.class);
    assertThat(((ArrayJavaType) (((MethodJavaType) valuesMethod.type).resultType)).elementType).isSameAs(enumSymbol.type);
    assertThat(result.reference(9, 19)).isSameAs(valuesMethod);
    assertThat(result.reference(9, 5)).isSameAs(result.symbol("useValues", 13));

    JavaSymbol.MethodJavaSymbol valueOfMethod = (JavaSymbol.MethodJavaSymbol) enumSymbol.lookupSymbols("valueOf").iterator().next();
    assertThat(valueOfMethod.declaration).isNull();
    assertThat(valueOfMethod.isStatic()).isTrue();
    assertThat(valueOfMethod.parameterTypes()).hasSize(1);
    assertThat(valueOfMethod.parameterTypes().get(0).is("java.lang.String")).isTrue();
    assertThat(((MethodJavaType) valueOfMethod.type).resultType).isSameAs(enumSymbol.type);
    assertThat(result.reference(10, 20)).isSameAs(valueOfMethod);
    assertThat(result.reference(10, 5)).isSameAs(result.symbol("useValueOf", 14));

    // usages of methods values() and valueOf(String s) from an enum when read from byte code
    assertThat(result.reference(17, 5)).isSameAs(result.symbol("useValues", 21));
    assertThat(result.reference(18, 5)).isSameAs(result.symbol("useValueOf", 22));

    // deprecated enum constants
    List<Symbol> deprecatedEnumConstant = new ArrayList<>(enumSymbol.lookupSymbols("C"));
    assertThat(deprecatedEnumConstant).hasSize(1);
    assertThat(deprecatedEnumConstant.get(0).isDeprecated()).isTrue();
  }

