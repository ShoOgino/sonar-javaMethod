  @Test
  public void substitutionFromSuperType_complex_inheritance_and_multiple_variables() {
    Result result = Result.createForJavaFile("src/test/files/sym/TypeSubstitutionSolver");
    Type stringType = result.symbol("string").type();
    Type integerType = result.symbol("integer").type();
    Type numberType = result.symbol("number").type();
    ParametrizedTypeJavaType jStringInteger = (ParametrizedTypeJavaType) result.symbol("jStringInteger").type();
    ParametrizedTypeJavaType LNumber = (ParametrizedTypeJavaType) result.symbol("lNumber").type();
    ParametrizedTypeJavaType aString = (ParametrizedTypeJavaType) result.symbol("aString").type();

    ParametrizedTypeJavaType fWXYZ = (ParametrizedTypeJavaType) result.symbol("fWXYZ").type();
    TypeVariableJavaType w = fWXYZ.typeParameters().get(0);
    TypeVariableJavaType x = fWXYZ.typeParameters().get(1);
    TypeVariableJavaType y = fWXYZ.typeParameters().get(2);
    TypeVariableJavaType z = fWXYZ.typeParameters().get(3);

    TypeSubstitution substitution = TypeSubstitutionSolver.substitutionFromSuperType(fWXYZ, jStringInteger);
    assertThat(substitution.size()).isEqualTo(4);
    assertThat(substitution.typeVariables()).containsExactly(w, x, y, z);
    assertThat(substitution.substitutedType(w)).isSameAs(stringType);
    assertThat(substitution.substitutedType(x)).isSameAs(x);
    assertThat(substitution.substitutedType(y)).isSameAs(y);
    assertThat(substitution.substitutedType(z)).isSameAs(integerType);
  }

