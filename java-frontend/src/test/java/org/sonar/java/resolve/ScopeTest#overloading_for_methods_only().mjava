  @Test
  public void overloading_for_methods_only() {
    Scope scope = new Scope(owner);

    JavaSymbol firstMethod = new JavaSymbol(JavaSymbol.MTH, 0, "overloaded", null);
    scope.enter(firstMethod);

    JavaSymbol secondMethod = new JavaSymbol(JavaSymbol.MTH, 0, "overloaded", null);
    scope.enter(secondMethod);

    assertThat(scope.lookup("overloaded")).containsOnly(firstMethod, secondMethod);

    try {
      JavaSymbol firstVar = new JavaSymbol(JavaSymbol.VAR, 0, "overloaded", null);
      scope.enter(firstVar);

      JavaSymbol second = new JavaSymbol(JavaSymbol.VAR, 0, "overloaded", null);
      scope.enter(second);
      fail("second symbol should not be accepted by scope");
    } catch (IllegalStateException iae) {
      assertThat(iae).hasMessage("Registering symbol: 'overloaded' twice in the same scope");
    } catch (Exception e) {
      fail("second symbol should not be accepted by scope");
    }
  }

