  @Test
  public void lub_of_generics() {
    List<Type> typesFromInput = declaredTypes(
      "class A extends Exception {}",
      "class B extends Exception implements I1<Exception> {}",
      "interface I1<T> {}");
    Type a = typesFromInput.get(0);
    Type b = typesFromInput.get(1);

    Type lub = Types.leastUpperBound(Sets.newHashSet(a, b));
    assertThat(lub).isSameAs(a.symbol().superClass());

    typesFromInput = declaredTypes(
      "class A<T> extends java.util.List<T> {}",
      "class B extends A<String> {}");
    a = typesFromInput.get(0);
    b = typesFromInput.get(1);
    lub = Types.leastUpperBound(Sets.newHashSet(a, b));
    assertThat(lub).isSameAs(a);
    // FIXME : should be the other way around but we don't care about type parameter in lub for now.
    assertThat(lub).isSameAs(b.symbol().superClass().erasure());
    assertThat(lub).isNotSameAs(b.symbol().superClass());
  }

