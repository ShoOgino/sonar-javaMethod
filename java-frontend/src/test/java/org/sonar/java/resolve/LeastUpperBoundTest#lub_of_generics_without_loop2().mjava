  @Test
  public void lub_of_generics_without_loop2() {
    List<Type> typesFromInput = declaredTypes(
      "class Parent<X> {}",
      "class Child<Y> extends Parent<Y> {}",
      "class Other<Z> {}",

      "class A {}",

      "class ChildP extends Parent<Other<? extends A>> {}",
      "class ChildC extends Child<Other<? extends A>> {}");
    Type ChildP = typesFromInput.get(4);
    Type childC = typesFromInput.get(5);

    JavaType lub = leastUpperBound(ChildP, childC);
    assertThat(lub.isTagged(JavaType.PARAMETERIZED)).isTrue();
    ParametrizedTypeJavaType ptt = (ParametrizedTypeJavaType) lub;
    assertThat(ptt.rawType.is("Parent")).isTrue();
    JavaType substitution = ptt.substitution(ptt.typeParameters().get(0));
    assertThat(substitution.isTagged(JavaType.PARAMETERIZED)).isTrue();
    ptt = (ParametrizedTypeJavaType) substitution;
    assertThat(ptt.rawType.is("Other")).isTrue();
    substitution = ptt.substitution(ptt.typeParameters().get(0));
    assertThat(substitution.isTagged(JavaType.WILDCARD)).isTrue();
    assertThat(((WildCardType) substitution).boundType).isEqualTo(WildCardType.BoundType.EXTENDS);
    assertThat(((WildCardType) substitution).bound.is("A")).isTrue();
  }

