  private Map<String, UCFG> createUCFG(String source) {
    File java_ucfg_dir = new File(new File(tmp.getRoot(), "ucfg"), "java");
    if(java_ucfg_dir.isDirectory()) {
      for (File file : java_ucfg_dir.listFiles()) {
        file.delete();
      }
    }
    CompilationUnitTree cut = getCompilationUnitTreeWithSemantics(source);
    UCFGJavaVisitor UCFGJavaVisitor = new UCFGJavaVisitor(tmp.getRoot());
    UCFGJavaVisitor.javaFileKey = FILE_KEY;
    UCFGJavaVisitor.visitCompilationUnit(cut);

    Map<String, UCFG> result = new HashMap<String, UCFG>();
    try {
      DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(java_ucfg_dir.getAbsolutePath()), new DirectoryStream.Filter<Path>() {
        @Override
        public boolean accept(final Path entry) {
          return entry.toFile().getName().matches("ucfg_(.*).proto");
        }
      });
      for (Path path : stream) {
        UCFG ucfg = UCFGtoProtobuf.fromProtobufFile(path.toFile());
        result.put(ucfg.methodId(), ucfg);
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
    return result;
  }

