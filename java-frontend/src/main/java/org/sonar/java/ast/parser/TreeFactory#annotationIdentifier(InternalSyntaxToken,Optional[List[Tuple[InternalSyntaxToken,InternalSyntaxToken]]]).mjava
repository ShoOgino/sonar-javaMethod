  public TypeTree annotationIdentifier(InternalSyntaxToken firstIdentifier, Optional<List<Tuple<InternalSyntaxToken, InternalSyntaxToken>>> rests) {
    List<InternalSyntaxToken> children = new ArrayList<>();
    children.add(firstIdentifier);
    if (rests.isPresent()) {
      for (Tuple<InternalSyntaxToken, InternalSyntaxToken> rest : rests.get()) {
        children.add(rest.first());
        children.add(rest.second());
      }
    }

    JavaTree result = null;

    InternalSyntaxToken dotToken = null;
    for (InternalSyntaxToken child : children) {
      if (!child.getGrammarRuleKey().equals(JavaTokenType.IDENTIFIER)) {
        dotToken = child;
      } else {
        InternalSyntaxToken identifierToken = child;

        if (result == null) {
          result = new IdentifierTreeImpl(identifierToken);
        } else {
          IdentifierTreeImpl identifier = new IdentifierTreeImpl(identifierToken);
          result = new MemberSelectExpressionTreeImpl((ExpressionTree) result, dotToken, identifier);
        }
      }
    }

    return (TypeTree) result;
  }

