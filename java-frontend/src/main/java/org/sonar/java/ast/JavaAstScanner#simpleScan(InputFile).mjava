  private void simpleScan(InputFile inputFile) {
    visitor.setCurrentFile(inputFile);
    try {
      String version;
      JavaVersion javaVersion = visitor.getJavaVersion();
      if (javaVersion == null || javaVersion.asInt() < 0) {
        version = /* default */ JParser.MAXIMUM_SUPPORTED_JAVA_VERSION;
      } else if ("module-info.java".equals(inputFile.filename()) && javaVersion.asInt() <= 8) {
        logMisconfiguredVersion(inputFile, javaVersion);
        version = /* default */ JParser.MAXIMUM_SUPPORTED_JAVA_VERSION;
      } else {
        version = Integer.toString(javaVersion.asInt());
      }
      JavaTree.CompilationUnitTreeImpl ast = (JavaTree.CompilationUnitTreeImpl) JParser.parse(
        version,
        inputFile.filename(),
        inputFile.contents(),
        visitor.getClasspath()
      );
      visitor.visitFile(ast);
      collectUndefinedTypes(ast.sema.undefinedTypes());
      // release environment used for semantic resolution
      ast.sema.cleanupEnvironment();
    } catch (RecognitionException e) {
      checkInterrupted(e);
      LOG.error(String.format(LOG_ERROR_UNABLE_TO_PARSE_FILE, inputFile));
      LOG.error(e.getMessage());

      parseErrorWalkAndVisit(e, inputFile);
    } catch (AnalysisException e) {
      throw e;
    } catch (Exception e) {
      checkInterrupted(e);
      interruptIfFailFast(e, inputFile);
    } catch (StackOverflowError error) {
      LOG.error(String.format(LOG_ERROR_STACKOVERFLOW, inputFile), error);
      throw error;
    }
  }

