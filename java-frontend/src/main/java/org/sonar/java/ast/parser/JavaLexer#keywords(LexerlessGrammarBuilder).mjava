  private static void keywords(LexerlessGrammarBuilder b) {
    b.rule(LETTER_OR_DIGIT).is(javaIdentifierPart(b));
    for (JavaKeyword tokenType : JavaKeyword.values()) {
      b.rule(tokenType).is(tokenType.getValue(), b.nextNot(LETTER_OR_DIGIT), SPACING);
    }
    String[] keywords = JavaKeyword.keywordValues();
    Arrays.sort(keywords);
    ArrayUtils.reverse(keywords);
    b.rule(KEYWORD).is(
      b.firstOf(
        keywords[0],
        keywords[1],
        ArrayUtils.subarray(keywords, 2, keywords.length)),
      b.nextNot(LETTER_OR_DIGIT));

    // restricted keywords introduced with java 9 (JLS9 - ยง3.9)
    for (JavaRestrictedKeyword tokenType : JavaRestrictedKeyword.values()) {
      b.rule(tokenType).is(tokenType.getValue(), b.nextNot(LETTER_OR_DIGIT), SPACING);
    }
    String[] restrictedKeywords = JavaRestrictedKeyword.restrictedKeywordValues();
    Arrays.sort(restrictedKeywords);
    ArrayUtils.reverse(restrictedKeywords);
    b.rule(RESTRICTED_KEYWORD).is(
      b.firstOf(
        restrictedKeywords[0],
        restrictedKeywords[1],
        ArrayUtils.subarray(restrictedKeywords, 2, restrictedKeywords.length)),
      b.nextNot(LETTER_OR_DIGIT));

    // special identifier introduced for java10: 'var'
    for (JavaSpecialIdentifier tokenType : JavaSpecialIdentifier.values()) {
      b.rule(tokenType).is(tokenType.getValue(), b.nextNot(LETTER_OR_DIGIT), SPACING);
    }
  }

