  public NewArrayTreeImpl newArrayInitializer(
    InternalSyntaxToken openBraceToken,
    Optional<InternalSyntaxToken> optionalComma,
    Optional<List<Tuple<ExpressionTree, Optional<InternalSyntaxToken>>>> rests,
    InternalSyntaxToken closeBraceToken) {
    ImmutableList.Builder<ExpressionTree> initializers = ImmutableList.builder();
    ImmutableList.Builder<SyntaxToken> separators = ImmutableList.builder();

    if (optionalComma.isPresent()) {
      separators.add(optionalComma.get());
    }
    if (rests.isPresent()) {
      for (Tuple<ExpressionTree, Optional<InternalSyntaxToken>> rest : rests.get()) {
        initializers.add(rest.first());
        if (rest.second().isPresent()) {
          separators.add(rest.second().get());
        }
      }
    }
    return new NewArrayTreeImpl(Collections.emptyList(),
      new InitializerListTreeImpl(initializers.build(), separators.build())).completeWithCurlyBraces(openBraceToken, closeBraceToken);
  }

