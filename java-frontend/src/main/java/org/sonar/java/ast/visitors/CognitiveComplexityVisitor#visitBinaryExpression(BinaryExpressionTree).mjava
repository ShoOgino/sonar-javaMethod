  @Override
  public void visitBinaryExpression(BinaryExpressionTree tree) {
    if (tree.is(CONDITIONAL_AND, CONDITIONAL_OR) && !ignored.contains(tree)) {
      List<BinaryExpressionTree> flattenedLogicalExpressions = flattenLogicalExpression(tree).collect(Collectors.toList());

      BinaryExpressionTree previous = null;
      for (BinaryExpressionTree current : flattenedLogicalExpressions) {
        if (previous == null || !previous.is(current.kind())) {
          increaseComplexityByOne(current.operatorToken());
        }
        previous = current;
      }
    }
    super.visitBinaryExpression(tree);
  }

