    private static List<AnalyzerMessage.TextSpan> textSpansFromRegexSyntaxElement(RegexSyntaxElement tree) {
      List<Location> locs = tree.getLocations().stream()
        .filter(location -> !location.isEmpty())
        .collect(Collectors.toList());
      if (locs.isEmpty()) {
        // contains only empty locations, take the first one
        locs = Collections.singletonList(tree.getLocations().get(0));
      }
      return locs.stream().map(location -> {
          AnalyzerMessage.TextSpan result = AnalyzerMessage.textSpanFor(location.getJavaTree());
          return new AnalyzerMessage.TextSpan(
            result.startLine,
            // Adding 1 to handle beginning of the String with quote
            result.startCharacter + location.getBeginningOffset() + 1,
            result.endLine,
            // Adding 1 to handle beginning of the String with quote
            result.startCharacter + location.getEndingOffset() + 1 + (location.isEmpty() ? 1 : 0));
        }).collect(Collectors.toList());
    }

