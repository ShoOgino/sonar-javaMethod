  private List<RegexTree> parseCharacterClassElement(boolean isAtBeginning) {
    if (characters.isAtEnd()) {
      return Collections.emptyList();
    }
    JavaCharacter startCharacter = characters.getCurrent();
    switch (startCharacter.getCharacter()) {
      case '\\':
        RegexTree escape = parseEscapeSequence();
        if (escape.is(RegexTree.Kind.PLAIN_CHARACTER)) {
          return parseCharacterRange(((PlainCharacterTree)escape).getContents());
        } else {
          return Collections.singletonList(escape);
        }
      case '[':
        return Collections.singletonList(parseCharacterClass());
      case '&':
        characters.moveNext();
        if (characters.currentIs('&')) {
          characters.moveNext();
          return Collections.emptyList();
        }
        return parseCharacterRange(startCharacter);
      case ']':
        if (isAtBeginning) {
          characters.moveNext();
          return parseCharacterRange(startCharacter);
        } else {
          return Collections.emptyList();
        }
      default:
        characters.moveNext();
        return parseCharacterRange(startCharacter);
    }
  }

