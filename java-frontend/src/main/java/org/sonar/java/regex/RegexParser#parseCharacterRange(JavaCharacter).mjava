  /**
   * Start state: a simple character has been consumed and passed as an argument. It might be the start of a range.
   * If it is range: Return a list containing as its single element that range
   * If the next character is a dash and the one after that is the end of the character class: Returns a list containing
   * the current character and the dash
   * Otherwise: Returns a list containing the current character
   */
  private List<RegexTree> parseCharacterRange(JavaCharacter startCharacter) {
    if (characters.currentIs('-')) {
      JavaCharacter dash = characters.getCurrent();
      characters.moveNext();
      if (characters.isAtEnd() || characters.currentIs(']')) {
        return Arrays.asList(plainCharacter(startCharacter), plainCharacter(dash));
      } else if (characters.currentIs('\\')) {
        RegexTree escape = parseEscapeSequence();
        if (escape.is(RegexTree.Kind.PLAIN_CHARACTER)) {
          JavaCharacter endCharacter = ((PlainCharacterTree) escape).getContents();
          return Collections.singletonList(characterRange(startCharacter, endCharacter));
        } else {
          expected("simple character");
          return Arrays.asList(plainCharacter(startCharacter), plainCharacter(dash), escape);
        }
      } else {
        JavaCharacter endCharacter = characters.getCurrent();
        characters.moveNext();
        return Collections.singletonList(characterRange(startCharacter, endCharacter));
      }
    } else {
      return Collections.singletonList(plainCharacter(startCharacter));
    }
  }

