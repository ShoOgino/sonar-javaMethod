  @Override
  protected void init() {
    if (!initialized) {
      validateLibraries = fs.hasFiles(fs.predicates().all());
      Profiler profiler = Profiler.create(LOG).startInfo("JavaClasspath initialization");
      initialized = true;
      binaries = new ArrayList<>(getFilesFromProperty(JavaClasspathProperties.SONAR_JAVA_BINARIES));
      Set<File> libraries = getFilesFromProperty(JavaClasspathProperties.SONAR_JAVA_LIBRARIES);
      if (binaries.isEmpty() && libraries.isEmpty() && useDeprecatedProperties()) {
        throw new AnalysisException(
          "sonar.binaries and sonar.libraries are not supported since version 4.0 of sonar-java-plugin, please use sonar.java.binaries and sonar.java.libraries instead");
      }
      if (binaries.isEmpty() && hasMoreThanOneJavaFile()) {
        throw new AnalysisException("Please provide compiled classes of your project with sonar.java.binaries property");
      }
      elements = new ArrayList<>(binaries);
      if (libraries.isEmpty() && hasJavaSources()) {
        LOG.warn("Bytecode of dependencies was not provided for analysis of source files, " +
          "you might end up with less precise results. Bytecode can be provided using sonar.java.libraries property");
      }
      elements.addAll(libraries);
      profiler.stopInfo();
    }
  }

