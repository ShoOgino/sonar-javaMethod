  private void handleSwitch(CFG.Block programPosition, List<CaseGroupTree> caseGroups) {
    ProgramState state = programState;

    Map<CaseGroupTree, List<ProgramState.SymbolicValueSymbol>> caseValues = new HashMap<>();
    for (CaseGroupTree caseGroup : Lists.reverse(caseGroups)) {
      int numberOfCaseValues = caseGroup.labels()
        .stream()
        .map(CaseLabelTree::expressions)
        .mapToInt(List::size)
        .sum();
      ProgramState.Pop poppedCaseValues = state.unstackValue(numberOfCaseValues);
      state = poppedCaseValues.state;
      caseValues.put(caseGroup, poppedCaseValues.valuesAndSymbols);
    }

    ProgramState.Pop poppedSwitchValue = state.unstackValue(1);
    ProgramState.SymbolicValueSymbol switchValue = poppedSwitchValue.valuesAndSymbols.get(0);

    ProgramState elseState = poppedSwitchValue.state;
    // The block that will be taken when all case-conditions are false. This will either be the default-block or, if no
    // default block exists, the block after the switch statement.
    CFG.Block elseBlock = null;
    for (CFG.Block successor : programPosition.successors()) {
      CaseGroupTree caseGroup = successor.caseGroup();
      if (caseGroup == null || !caseValues.containsKey(caseGroup)) {
        Preconditions.checkState(elseBlock == null);
        elseBlock = successor;
        continue;
      }

      for (ProgramState.SymbolicValueSymbol caseValue : caseValues.get(caseGroup)) {
        SymbolicValue equality = constraintManager.createEquality(switchValue, caseValue);
        ProgramState ps = setConstraint(state, equality, BooleanConstraint.TRUE);
        enqueue(new ProgramPoint(successor), ps, node.exitPath);
        elseState = setConstraint(elseState, equality, BooleanConstraint.FALSE);
      }
      if (successor.isDefaultBlock()) {
        Preconditions.checkState(elseBlock == null);
        elseBlock = successor;
      }
    }
    if (elseBlock != null) {
      // for a switch covering all items from an enum, there will be no elseState
      enqueue(new ProgramPoint(elseBlock), elseState, node.exitPath);
    }
  }

