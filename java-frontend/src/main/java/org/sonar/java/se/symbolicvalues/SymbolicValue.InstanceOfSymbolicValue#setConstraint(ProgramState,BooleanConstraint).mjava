    @Override
    public List<ProgramState> setConstraint(ProgramState programState, BooleanConstraint booleanConstraint) {
      if (booleanConstraint.isTrue()) {
        Constraint constraint = programState.getConstraint(operand);
        if (constraint !=null && constraint.isNull()) {
          // irrealizable constraint : instance of true if operand is null
          return ImmutableList.of();
        }
        // if instanceof is true then we know for sure that expression is not null.
        List<ProgramState> ps = operand.setConstraint(programState, ObjectConstraint.notNull());
        if (ps.size() == 1 && ps.get(0).equals(programState)) {
          // FIXME we already know that operand is NOT NULL, so we add a different constraint to distinguish program state. Typed Constraint
          // should store the deduced type.
          return ImmutableList.of(programState.addConstraint(this, new TypedConstraint()));
        }
        return ps;
      }
      return ImmutableList.of(programState);
    }

