  private void executeBinaryExpression(Tree tree) {
    // Consume two and produce one SV.
    ProgramState.Pop unstackBinary = programState.unstackValue(2);
    programState = unstackBinary.state;
    SymbolicValue symbolicValue = constraintManager.createSymbolicValue(tree);
    symbolicValue.computedFrom(unstackBinary.values);
    if(tree.is(Tree.Kind.PLUS)) {
      BinaryExpressionTree bt = (BinaryExpressionTree) tree;
      if (bt.leftOperand().symbolType().is("java.lang.String")) {
        Constraint leftConstraint = programState.getConstraint(unstackBinary.values.get(1));
        if (leftConstraint != null && !leftConstraint.isNull()) {
          List<ProgramState> programStates = symbolicValue.setConstraint(programState, ObjectConstraint.NOT_NULL);
          Preconditions.checkState(programStates.size() == 1);
          programState = programStates.get(0);
        }

      } else if(bt.rightOperand().symbolType().is("java.lang.String")) {
        Constraint rightConstraint = programState.getConstraint(unstackBinary.values.get(0));
        if (rightConstraint != null && !rightConstraint.isNull()) {
          List<ProgramState> programStates = symbolicValue.setConstraint(programState, ObjectConstraint.NOT_NULL);
          Preconditions.checkState(programStates.size() == 1);
          programState = programStates.get(0);
        }

      }
    }
    programState = programState.stackValue(symbolicValue);
  }

