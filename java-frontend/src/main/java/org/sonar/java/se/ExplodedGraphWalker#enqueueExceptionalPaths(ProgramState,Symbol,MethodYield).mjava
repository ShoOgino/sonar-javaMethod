  private void enqueueExceptionalPaths(ProgramState ps, Symbol methodSymbol, @Nullable MethodYield methodYield) {
    Set<CFG.Block> exceptionBlocks = ((CFG.Block) node.programPoint.block).exceptions();
    List<CFG.Block> catchBlocks = exceptionBlocks.stream().filter(CFG.Block.IS_CATCH_BLOCK).collect(Collectors.toList());
    SymbolicValue peekValue = ps.peekValue();

    Preconditions.checkState(peekValue instanceof SymbolicValue.ExceptionalSymbolicValue, "Top of stack should always contains exceptional SV");
    SymbolicValue.ExceptionalSymbolicValue exceptionSV = (SymbolicValue.ExceptionalSymbolicValue) peekValue;
    // only consider the first match, as order of catch block is important
    Optional<CFG.Block> firstMatchingCatchBlock = catchBlocks.stream()
      .filter(b -> isCaughtByBlock(exceptionSV.exceptionType(), b))
      .sorted((b1, b2) -> Integer.compare(b2.id(), b1.id()))
      .findFirst();
    if (firstMatchingCatchBlock.isPresent()) {
      enqueue(new ProgramPoint(firstMatchingCatchBlock.get()), ps, methodYield);
      return;
    }

    // branch to any unchecked exception catch
    catchBlocks.stream()
      .filter(ExplodedGraphWalker::isCatchingUncheckedException)
      .forEach(b -> enqueue(new ProgramPoint(b), ps, methodYield));

    // store the exception as exit value in case of method exit in next block
    ps.storeExitValue();

    // use other exceptional blocks, i.e. finally block and exit blocks
    List<CFG.Block> otherBlocks = exceptionBlocks.stream()
      .filter(CFG.Block.IS_CATCH_BLOCK.negate().or(b -> methodSymbol.isUnknown()))
      .collect(Collectors.toList());
    if (otherBlocks.isEmpty()) {
      // explicitly add the exception branching to method exit
      CFG.Block methodExit = node.programPoint.block.successors()
        .stream()
        .map(b -> (CFG.Block) b)
        .filter(CFG.Block::isMethodExitBlock)
        .findFirst()
        .orElse(exitBlock);
      enqueue(new ProgramPoint(methodExit), ps, true, methodYield);
    } else {
      otherBlocks.forEach(b -> enqueue(new ProgramPoint(b), ps, true, methodYield));
    }
  }

