  private static String learnedConstraintMessage(Constraint lc, ExplodedGraph.Node currentNode, ExplodedGraph.Node parent) {
    Tree nodeTree = parent.programPoint.syntaxTree();
    String name = SyntaxTreeNameFinder.getName(nodeTree);
    if (nodeTree.is(Tree.Kind.METHOD_INVOCATION)) {
      MethodYield selectedMethodYield = currentNode.selectedMethodYield(parent);
      if (selectedMethodYield != null) {
        Type exceptionType = selectedMethodYield.exceptionType();
        // Only considering exceptional flows
        if (exceptionType != null) {
          return exceptionType.isUnknown() ? String.format("Exception thrown by '%s'", name) : String.format("Exception '%s' thrown by '%s'", exceptionType.name(), name);
        }
      }
      return String.format("'%s' returns %s", name, lc.valueAsString());
    }
    if (nodeTree.is(Tree.Kind.NEW_CLASS)) {
      return String.format("Constructor call creates '%s'", lc.valueAsString());
    }
    return name == null ? lc.valueAsString() : String.format("Implies '%s' is %s", name, lc.valueAsString());
  }

