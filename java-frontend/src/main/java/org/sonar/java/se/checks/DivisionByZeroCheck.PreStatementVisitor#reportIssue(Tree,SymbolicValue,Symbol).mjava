    private void reportIssue(Tree tree, SymbolicValue denominator, Symbol denominatorSymbol) {
      ExpressionTree expression = getDenominator(tree);
      String operation = tree.is(Tree.Kind.REMAINDER, Tree.Kind.REMAINDER_ASSIGNMENT) ? "modulation" : "division";
      String expressionName = expression.is(Tree.Kind.IDENTIFIER) ? ("\"" + ((IdentifierTree) expression).name() + "\"") : "this expression";
      List<Class<? extends Constraint>> domains = Collections.singletonList(ZeroConstraint.class);
      Set<List<JavaFileScannerContext.Location>> flows = FlowComputation.flow(context.getNode(), denominator, domains, denominatorSymbol).stream()
        .filter(f -> !f.isEmpty())
        .map(f -> ImmutableList.<JavaFileScannerContext.Location>builder()
          .add(new JavaFileScannerContext.Location("Division by zero.", tree))
          .addAll(f)
          .build())
        .collect(Collectors.toSet());
      context.reportIssue(expression, DivisionByZeroCheck.this, "Make sure " + expressionName + " can't be zero before doing this " + operation + ".",
        flows);
    }

