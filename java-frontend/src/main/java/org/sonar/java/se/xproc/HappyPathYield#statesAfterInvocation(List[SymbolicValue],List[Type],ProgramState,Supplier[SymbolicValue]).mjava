  @Override
  public Stream<ProgramState> statesAfterInvocation(List<SymbolicValue> invocationArguments, List<Type> invocationTypes, ProgramState programState,
    Supplier<SymbolicValue> svSupplier) {
    Stream<ProgramState> results = parametersAfterInvocation(invocationArguments, invocationTypes, programState);

    // applied all constraints from parameters, stack return value
    SymbolicValue sv;
    if (resultIndex < 0 || resultIndex == invocationArguments.size()) {
      // if returnIndex is the size of invocationArguments : returning vararg parameter on a call with no elements specified
      sv = svSupplier.get();
    } else {
      // returned SV is the same as one of the arguments.
      sv = invocationArguments.get(resultIndex);
    }
    results = results.map(s -> s.stackValue(sv));
    if (resultConstraint != null) {
      results = results.map(s -> s.addConstraints(sv, resultConstraint));
    }
    return results.distinct();
  }

