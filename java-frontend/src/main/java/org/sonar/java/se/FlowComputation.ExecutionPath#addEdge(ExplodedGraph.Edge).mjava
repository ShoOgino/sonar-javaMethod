    Stream<ExecutionPath> addEdge(ExplodedGraph.Edge edge) {
      Flow.Builder flowBuilder = Flow.builder();
      flowBuilder.addAll(flow);

      Flow laFlow = learnedAssociation(edge)
        .map(la -> flowFromLearnedAssociation(la, edge.parent))
        .orElse(Flow.empty());
      flowBuilder.addAll(laFlow);

      PSet<Symbol> newTrackSymbols = newTrackedSymbols(edge);
      SameConstraints newSameConstraints = newTrackSymbols == trackedSymbols ? sameConstraints : new SameConstraints(sameConstraints, newTrackSymbols);

      if (!skipExceptionMessages) {
        flowFromThrownException(edge).ifPresent(loc -> {
          flowBuilder.setAsExceptional();
          flowBuilder.add(loc);
        });
        flowFromCaughtException(edge).ifPresent(loc -> {
          flowBuilder.setAsExceptional();
          flowBuilder.add(loc);
        });
      }

      Set<LearnedConstraint> learnedConstraints = learnedConstraints(edge);
      Flow lcFlow = flowFromLearnedConstraints(edge, filterRedundantObjectDomain(learnedConstraints));
      flowBuilder.addAll(lcFlow);

      boolean endOfPath = visitedAllParents(edge) || shouldTerminate(learnedConstraints);

      if (endOfPath) {
        flowBuilder.addAll(flowForNullableMethodParameters(edge.parent));
      }

      Flow currentFlow = flowBuilder.build();
      Set<Flow> yieldsFlows = flowFromYields(edge);
      if (yieldsFlows.isEmpty()) {
        return Stream.of(new ExecutionPath(edge, visited.add(edge), newTrackSymbols, newSameConstraints, Flow.of(currentFlow), endOfPath));
      }
      return yieldsFlows.stream()
        .map(yieldFlow -> Flow.builder().addAll(currentFlow).addAll(yieldFlow).build())
        .map(f -> new ExecutionPath(edge, visited.add(edge), newTrackSymbols, newSameConstraints, f, endOfPath));
    }

