    Stream<ExecutionPath> addEdge(ExplodedGraph.Edge edge) {
      ImmutableList.Builder<JavaFileScannerContext.Location> flowBuilder = ImmutableList.builder();
      flowBuilder.addAll(flow);

      List<JavaFileScannerContext.Location> laFlow = learnedAssociation(edge)
        .map(la -> flowFromLearnedAssociation(la, edge.parent))
        .orElse(ImmutableList.of());
      flowBuilder.addAll(laFlow);

      Symbol newTrackSymbol = newTrackedSymbol(edge);

      Set<LearnedConstraint> learnedConstraints = learnedConstraints(edge);
      List<JavaFileScannerContext.Location> lcFlow = flowFromLearnedConstraints(edge, learnedConstraints);
      flowBuilder.addAll(lcFlow);

      boolean endOfPath = visitedAllParents(edge) || shouldTerminate(learnedConstraints);

      List<JavaFileScannerContext.Location> currentFlow = flowBuilder.build();
      Set<List<JavaFileScannerContext.Location>> yieldsFlows = flowFromYields(edge);
      return yieldsFlows.stream()
        .map(yieldFlow -> ImmutableList.<JavaFileScannerContext.Location>builder().addAll(currentFlow).addAll(yieldFlow).build())
        .map(f -> new ExecutionPath(edge, visited.add(edge), newTrackSymbol, f, endOfPath));
    }

