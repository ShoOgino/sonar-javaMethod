  public SymbolicValue createBinarySymbolicValue(Instruction inst, List<ProgramState.SymbolicValueSymbol> computedFrom) {
    SymbolicValue result;
    switch (inst.opcode) {
      case IAND:
      case LAND:
        result = new SymbolicValue.AndSymbolicValue();
        result.computedFrom(computedFrom);
        break;
      case IOR:
      case LOR:
        result = new SymbolicValue.OrSymbolicValue();
        result.computedFrom(computedFrom);
        break;
      case IXOR:
      case LXOR:
        result = new SymbolicValue.XorSymbolicValue();
        result.computedFrom(computedFrom);
        break;
      case IF_ICMPEQ:
      case IF_ACMPEQ:
      case IFEQ:
      case IFNULL:
        result = createRelationalSymbolicValue(Kind.EQUAL, computedFrom);
        break;
      case IFNE:
      case IFNONNULL:
      case IF_ICMPNE:
      case IF_ACMPNE:
        result = createRelationalSymbolicValue(Kind.NOT_EQUAL, computedFrom);
        break;
      case IF_ICMPLT:
      case IFLT:
        result = createRelationalSymbolicValue(Kind.LESS_THAN, computedFrom);
        break;
      case IF_ICMPGE:
      case IFGE:
        result = createRelationalSymbolicValue(Kind.GREATER_THAN_OR_EQUAL, computedFrom);
        break;
      case IF_ICMPGT:
      case IFGT:
        result = createRelationalSymbolicValue(Kind.LESS_THAN, Lists.reverse(computedFrom));
        break;
      case IF_ICMPLE:
      case IFLE:
        result = createRelationalSymbolicValue(Kind.GREATER_THAN_OR_EQUAL, Lists.reverse(computedFrom));
        break;
      default:
        throw new IllegalStateException("Unexpected kind for binary SV");
    }
    return result;
  }

