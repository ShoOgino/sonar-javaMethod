  @VisibleForTesting
  Set<RelationalSymbolicValue> transitiveRelations(Set<RelationalSymbolicValue> knownRelations) {
    Set<RelationalSymbolicValue> newRelations = new HashSet<>();
    Deque<RelationalSymbolicValue> workList = new ArrayDeque<>();
    int iterations = 0;
    workList.add(this);
    while (!workList.isEmpty()) {
      if (newRelations.size() * knownRelations.size() > MAX_DEDUCED_RELATIONS || iterations > MAX_ITERATIONS) {
        // safety mechanism in case of an error in the algorithm
        throw new RelationalSymbolicValue.TransitiveRelationExceededException("Used relations: " + newRelations.size() + ". Iterations " + iterations);
      }
      iterations++;
      RelationalSymbolicValue relation = workList.pop();
      for (RelationalSymbolicValue knownRelation : knownRelations) {
        RelationalSymbolicValue r = relation.deduceTransitiveOrSimplified(knownRelation);
        if (r != null && !knownRelations.contains(r) && newRelations.add(r)) {
          workList.add(r);
        }
      }
    }
    return newRelations;
  }

