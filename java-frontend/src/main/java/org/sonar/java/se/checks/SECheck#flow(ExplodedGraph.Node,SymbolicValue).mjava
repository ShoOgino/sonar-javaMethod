  public static List<JavaFileScannerContext.Location> flow(ExplodedGraph.Node currentNode, SymbolicValue currentVal) {
    List<JavaFileScannerContext.Location> flow = new ArrayList<>();
    if (currentVal instanceof BinarySymbolicValue) {
      Set<JavaFileScannerContext.Location> locations = new HashSet<>();
      locations.addAll(SECheck.flow(currentNode.parent(), ((BinarySymbolicValue) currentVal).getLeftOp()));
      locations.addAll(SECheck.flow(currentNode.parent(), ((BinarySymbolicValue) currentVal).getRightOp()));
      flow.addAll(locations);
    }
    ExplodedGraph.Node node = currentNode;
    Symbol lastEvaluated = currentNode.programState.getLastEvaluated();
    while (node != null) {
      ExplodedGraph.Node finalNode = node;
      node = node.parent();
      if (finalNode.programPoint.syntaxTree() == null) {
        continue;
      }
      finalNode.getLearnedConstraints().stream()
        .map(ExplodedGraph.Node.LearnedConstraint::getSv)
        .filter(sv -> sv.equals(currentVal))
        .findFirst()
        .ifPresent(sv -> flow.add(new JavaFileScannerContext.Location("", finalNode.parent().programPoint.syntaxTree())));
      if (lastEvaluated != null) {
        Symbol finalLastEvaluated = lastEvaluated;
        Optional<Symbol> learnedSymbol = finalNode.getLearnedSymbols().stream()
          .map(ExplodedGraph.Node.LearnedValue::getSymbol)
          .filter(sv -> sv.equals(finalLastEvaluated))
          .findFirst();
        if (learnedSymbol.isPresent()) {
          lastEvaluated = finalNode.parent().programState.getLastEvaluated();
          flow.add(new JavaFileScannerContext.Location("", finalNode.parent().programPoint.syntaxTree()));
        }
      }
    }
    return Lists.reverse(flow);
  }

