  private List<ProgramState> copyConstraintFromTo(SymbolicValue from, SymbolicValue to, ProgramState programState) {
    List<ProgramState> states = new ArrayList<>();
    states.add(programState);
    PMap<Class<? extends Constraint>, Constraint> leftConstraints = programState.getConstraints(from);
    if (leftConstraints != null) {
      leftConstraints.forEach((d, c) -> {
        List<ProgramState> newStates = new ArrayList<>();
        Constraint constraint = c.copyOver(kind);
        states.forEach(state -> {
          if (constraint == null) {
            PMap<Class<? extends Constraint>, Constraint> constraints = state.getConstraints(to);
            if (constraints != null) {
              newStates.add(state.removeConstraintsOnDomain(to, c.getClass()));
            } else {
              newStates.add(state);
            }
          } else {
            // special handling of copying inversed non-null constraint
            if (ObjectConstraint.NULL == constraint && c != constraint) {
              newStates.add(state);
            } else {
              newStates.addAll(to.setConstraint(state, constraint));
            }
          }
        });
        states.clear();
        states.addAll(newStates);
      });
    }
    return states;
  }

