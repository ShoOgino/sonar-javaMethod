  @CheckForNull
  private MethodBehavior get(String signature, @Nullable Symbol.MethodSymbol symbol) {
    if (SIGNATURE_BLACKLIST.stream().anyMatch(signature::startsWith)) {
      return null;
    }
    if (!behaviors.containsKey(signature)) {
      if (symbol != null) {
        MethodTree declaration = symbol.declaration();
        if (SymbolicExecutionVisitor.methodCanNotBeOverriden(symbol)) {
          if (declaration != null) {
            sev.execute(declaration);
          } else {
            return new BytecodeEGWalker(this, semanticModel).getMethodBehavior(signature, symbol, classLoader);
          }
        }
      } else {
        return new BytecodeEGWalker(this, semanticModel).getMethodBehavior(signature, symbol, classLoader);
      }
    }
    return behaviors.get(signature);
  }

