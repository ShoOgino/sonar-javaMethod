    private Set<LearnedConstraint> filterRedundantObjectDomain(Set<LearnedConstraint> learnedConstraints) {
      Map<SymbolicValue, Long> constraintsBySV = learnedConstraints.stream()
        .filter(lc -> lc.constraint() != null)
        .collect(Collectors.groupingBy(LearnedConstraint::symbolicValue, Collectors.counting()));
      return learnedConstraints.stream()
        .flatMap(lc -> isConstraintFromObjectDomain(lc.constraint()) && constraintsBySV.get(lc.symbolicValue()) > 1 ? Stream.empty() : Stream.of(lc))
        .collect(Collectors.toSet());
    }

