    private Flow learnedConstraintFlow(LearnedConstraint learnedConstraint, ExplodedGraph.Edge edge) {
      Constraint constraint = learnedConstraint.constraint();
      if (!addToFlow.test(constraint)) {
        return Flow.empty();
      }
      ExplodedGraph.Node parent = edge.parent;
      Tree nodeTree = parent.programPoint.syntaxTree();
      if (isMethodInvocationNode(parent)) {
        return methodInvocationFlow(constraint, edge);
      }
      if (nodeTree.is(Tree.Kind.NEW_CLASS)) {
        return Flow.of(location(parent, String.format("Constructor implies '%s'.", constraint.valueAsString())));
      }
      Symbol finalField = learnedConstraintOnInitializedFinalField(nodeTree);
      if (finalField != null) {
        // constraints on final fields are set on the fly by the EGW when encountering them for the first time
        String msg = String.format(IMPLIES_IS_MSG, finalField.name(), constraint.valueAsString());
        return Flow.of(new JavaFileScannerContext.Location(msg, ((VariableTree) finalField.declaration()).initializer()));
      }

      Symbol trackedSymbol = getSymbol(parent.programState, learnedConstraint.sv);
      String name = trackedSymbol != null ? trackedSymbol.name() : SyntaxTreeNameFinder.getName(nodeTree);
      if (name == null) {
        // unable to deduce name of element on which we learn a constraint. Nothing is reported
        return Flow.empty();
      }
      String msg;
      if (ObjectConstraint.NULL == constraint && !sameConstraints.hasAlwaysSameConstraint(trackedSymbol)) {
        msg = IMPLIES_CAN_BE_MSG;
      } else {
        msg = IMPLIES_IS_MSG;
      }
      return Flow.of(location(parent, String.format(msg, name, constraint.valueAsString())));
    }

