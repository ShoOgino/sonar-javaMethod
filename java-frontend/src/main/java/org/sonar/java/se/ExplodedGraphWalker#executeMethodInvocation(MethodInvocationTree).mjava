  private void executeMethodInvocation(MethodInvocationTree mit) {
    setSymbolicValueOnFields(mit);
    // unstack arguments and method identifier
    ProgramState.Pop unstack = programState.unstackValue(mit.arguments().size() + 1);
    logState(mit);

    programState = unstack.state;
    // Enqueue exceptional paths
    node.programPoint.block.exceptions().forEach(b -> enqueue(new ExplodedGraph.ProgramPoint(b, 0), programState, !b.isCatchBlock()));

    // get method behavior for method with known declaration (ie: within the same file)
    MethodBehavior methodInvokedBehavior = null;
    Tree declaration = mit.symbol().declaration();
    if(declaration != null) {
      methodInvokedBehavior = symbolicExecutionVisitor.execute((MethodTree) declaration);
    }
    if(methodInvokedBehavior != null) {
      List<SymbolicValue> invocationArguments = invocationArguments(unstack.values);
      methodInvokedBehavior.yields()
        .stream()
        .flatMap(yield -> yield.statesAfterInvocation(invocationArguments, programState, () -> constraintManager.createMethodSymbolicValue(mit, unstack.values)).stream())
        .forEach(ps -> {
          ProgramState programState = ps;
          if (isNonNullMethod(mit.symbol())) {
            programState = programState.addConstraint(programState.peekValue(), ObjectConstraint.NOT_NULL);
          } else if (OBJECT_WAIT_MATCHER.matches(mit)) {
            programState = programState.resetFieldValues(constraintManager);
          }
          checkerDispatcher.syntaxNode = mit;
          checkerDispatcher.addTransition(programState);
          clearStack(mit);
        });
    } else {
      final SymbolicValue resultValue = constraintManager.createMethodSymbolicValue(mit, unstack.values);
      programState = programState.stackValue(resultValue);
      if (isNonNullMethod(mit.symbol())) {
        programState = programState.addConstraint(resultValue, ObjectConstraint.NOT_NULL);
      } else if (OBJECT_WAIT_MATCHER.matches(mit)) {
        programState = programState.resetFieldValues(constraintManager);
      }
      checkerDispatcher.executeCheckPostStatement(mit);
      clearStack(mit);
    }
  }

