  public ProgramState cleanupConstraints(Collection<SymbolicValue> protectedSymbolicValues) {
    class CleanAction implements BiConsumer<SymbolicValue, PMap<Class<? extends Constraint>, Constraint>> {
      boolean newProgramState = false;
      PMap<SymbolicValue, PMap<Class<? extends Constraint>, Constraint>> newConstraints = constraints;
      PMap<SymbolicValue, Integer> newReferences = references;

      @Override
      public void accept(SymbolicValue symbolicValue, PMap<Class<? extends Constraint>, Constraint> constraintPMap) {
        constraintPMap.forEach((domain, constraint) -> {
          if (!protectedSymbolicValues.contains(symbolicValue)
            && !isReachable(symbolicValue, newReferences)
            && isDisposable(symbolicValue, constraint)
            && !inStack(stack, symbolicValue)) {
            newProgramState = true;
            PMap<Class<? extends Constraint>, Constraint> removed = newConstraints.get(symbolicValue).remove(domain);
            if (removed.isEmpty()) {
              newConstraints = newConstraints.remove(symbolicValue);
            } else {
              newConstraints = newConstraints.put(symbolicValue, removed);
            }
            newReferences = newReferences.remove(symbolicValue);
          }
        });
      }
    }
    CleanAction cleanAction = new CleanAction();
    constraints.forEach(cleanAction);
    return cleanAction.newProgramState ? new ProgramState(values, cleanAction.newReferences, cleanAction.newConstraints, visitedPoints, stack, exitSymbolicValue,
      lastAssociatedSymbols) : this;
  }

