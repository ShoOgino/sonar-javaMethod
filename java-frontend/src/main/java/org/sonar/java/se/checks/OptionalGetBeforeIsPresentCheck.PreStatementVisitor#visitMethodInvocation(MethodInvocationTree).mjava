    @Override
    public void visitMethodInvocation(MethodInvocationTree tree) {
      SymbolicValue peek = programState.peekValue();
      if (OPTIONAL_IS_PRESENT.matches(tree)) {
        constraintManager.setValueFactory(() -> new IsPresentSymbolicValue(peek));
      } else if (OPTIONAL_GET.matches(tree) && presenceHasNotBeenChecked(peek)) {
        context.addExceptionalYield(peek, programState, "java.util.NoSuchElementException", check);
        reportIssue(tree);
        programState = null;
      } else if (OPTIONAL_ORELSE.matches(tree)) {
        ProgramState.Pop pop = programState.unstackValue(2);
        SymbolicValue orElseValue = pop.values.get(0);
        SymbolicValue optional = pop.values.get(1);
        List<ProgramState> psEmpty = optional.setConstraint(pop.state.stackValue(orElseValue), OptionalConstraint.NOT_PRESENT);
        SymbolicValue symbolicValue;
        if(optional instanceof OptionalSymbolicValue) {
          symbolicValue = ((OptionalSymbolicValue) optional).wrappedValue;
        } else {
          symbolicValue = constraintManager.createSymbolicValue(tree);
        }
        List<ProgramState> psPresent = optional.setConstraint(pop.state.stackValue(symbolicValue), OptionalConstraint.PRESENT);
        psEmpty.forEach(context::addTransition);
        psPresent.forEach(context::addTransition);
        programState = null;
      } else if (OPTIONAL_OF.matches(tree) || OPTIONAL_OF_NULLABLE.matches(tree)) {
        constraintManager.setValueFactory(() -> new OptionalSymbolicValue(peek));
      }
    }

