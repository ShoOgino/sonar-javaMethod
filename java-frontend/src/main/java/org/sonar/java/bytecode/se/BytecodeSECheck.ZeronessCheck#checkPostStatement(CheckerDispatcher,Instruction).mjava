    @Override
    public ProgramState checkPostStatement(CheckerDispatcher dispatcher, Instruction inst) {
      ProgramState currentState = dispatcher.getState();
      ExplodedGraph.Node node = dispatcher.getNode();
      if (node == null) {
        return currentState;
      }
      ProgramState previousState = node.programState;
      switch (inst.opcode) {
        case DADD:
        case FADD:
        case IADD:
        case LADD:
        case DSUB:
        case FSUB:
        case ISUB:
        case LSUB:
          return handlePlusMinus(previousState, currentState);
        case DMUL:
        case FMUL:
        case IMUL:
        case LMUL:
          return handleMultiply(previousState, currentState);
        case DDIV:
        case FDIV:
        case IDIV:
        case LDIV:
        case DREM:
        case FREM:
        case IREM:
        case LREM:
          return handleDivisionRemainder(previousState, currentState);
        case ISHL:
        case LSHL:
        case ISHR:
        case LSHR:
        case IUSHR:
        case LUSHR:
          return handleShift(previousState, currentState);
        case INEG:
        case LNEG:
        case FNEG:
        case DNEG:
          return handleNegation(previousState, currentState);
        default:
          break;
      }
      return currentState;
    }

