  private void executeInstruction(BytecodeCFGBuilder.Instruction instruction) {
    if(!checkerDispatcher.executeCheckPreStatement(instruction)) {
      return;
    }
    switch (instruction.opcode) {
      case Opcodes.ARETURN:
        programState.storeExitValue();
        break;
      case Opcodes.ACONST_NULL:
        programState = programState.stackValue(SymbolicValue.NULL_LITERAL);
        break;
      case Opcodes.ALOAD:
      case Opcodes.DLOAD:
      case Opcodes.FLOAD:
      case Opcodes.ILOAD:
        break;
      case Opcodes.LLOAD:
      case Opcodes.AALOAD:
        break;
      case Opcodes.BALOAD:
      case Opcodes.CALOAD:
      case Opcodes.DALOAD:
      case Opcodes.FALOAD:
      case Opcodes.IALOAD:
      case Opcodes.LALOAD:
      case Opcodes.SALOAD:
        break;
      case Opcodes.LDC:
        SymbolicValue symbolicValue = constraintManager.createSymbolicValue(instruction);
        programState = programState.stackValue(symbolicValue);
        programState = programState.addConstraint(symbolicValue, ObjectConstraint.NOT_NULL);
        break;
      default:
        // do nothing
    }
    checkerDispatcher.executeCheckPostStatement(instruction);
  }

