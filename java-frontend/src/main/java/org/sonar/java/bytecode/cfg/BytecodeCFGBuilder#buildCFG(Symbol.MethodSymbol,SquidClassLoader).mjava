  public static BytecodeCFG buildCFG(Symbol.MethodSymbol methodSymbol, SquidClassLoader classLoader) {
    try(InputStream is = classLoader.getResourceAsStream(Convert.bytecodeName(((JavaSymbol.TypeJavaSymbol) methodSymbol.owner()).getFullyQualifiedName()) + ".class")) {
      byte[] bytes = ByteStreams.toByteArray(is);
      // to read bytecode with ASM not supporting Java 9, we will set major version to Java 8
      if (Java9Support.isJava9Class(bytes)) {
        Java9Support.setJava8MajorVersion(bytes);
      }
      ClassReader cr = new ClassReader(bytes);
      BytecodeCFGMethodVisitor methodVisitor = new BytecodeCFGMethodVisitor(methodSymbol);
      cr.accept(new ClassVisitor(Opcodes.ASM5) {
        @Override
        public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
          // TODO : name matching is not sufficient in case of overloading.
          if (name.equals(methodSymbol.name())) {
            return methodVisitor;
          }
          return null;
        }
      }, ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
      return methodVisitor.cfg;
    } catch (IOException e) {
      throw Throwables.propagate(e);
    }
  }

