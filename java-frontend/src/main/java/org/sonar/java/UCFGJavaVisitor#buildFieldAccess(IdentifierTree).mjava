  private static Optional<Expression.FieldAccess> buildFieldAccess(IdentifierTree identifierTree) {
    Symbol identifierTreeSymbol = identifierTree.symbol();
    if (!identifierTreeSymbol.isVariableSymbol()
        || identifierTreeSymbol.owner().isMethodSymbol()
        || identifierTree.name().equals("this")
        || identifierTree.name().equals("super")) {
      return Optional.empty();
    }
    Expression.Variable rightSide = variableWithId(identifierTree.name());
    if (identifierTreeSymbol.isStatic()) {
      return Optional.of(new Expression.FieldAccess(
        new Expression.ClassName(identifierTreeSymbol.owner().type().fullyQualifiedName()),
        rightSide));
    }
    return Optional.of(new Expression.FieldAccess(rightSide));
  }

