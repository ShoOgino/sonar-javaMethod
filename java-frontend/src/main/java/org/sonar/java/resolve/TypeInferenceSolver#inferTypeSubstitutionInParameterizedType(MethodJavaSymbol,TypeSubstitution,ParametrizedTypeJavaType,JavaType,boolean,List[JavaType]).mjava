  private TypeSubstitution inferTypeSubstitutionInParameterizedType(MethodJavaSymbol method, TypeSubstitution substitution, ParametrizedTypeJavaType formalType, JavaType argType,
    boolean variableArity, List<JavaType> remainingArgTypes) {
    List<JavaType> formalTypeSubstitutedTypes = formalType.typeSubstitution.substitutedTypes();
    TypeSubstitution result = substitution;
    if (argType.isParameterized()) {
      ParametrizedTypeJavaType parametrizedArgType = (ParametrizedTypeJavaType) argType;
      if (parametrizedArgType.rawType == formalType.rawType) {
        List<JavaType> argTypeSubstitutedTypes = parametrizedArgType.typeSubstitution.substitutedTypes();
        TypeSubstitution newSubstitution = inferTypeSubstitutionRec(method, formalTypeSubstitutedTypes, argTypeSubstitutedTypes);
        return mergeTypeSubstitutions(substitution, newSubstitution);
      }
      JavaType superclass = argType.symbol.getSuperclass();
      if (superclass != null) {
        superclass = typeSubstitutionSolver.applySubstitution(superclass, parametrizedArgType.typeSubstitution);
        TypeSubstitution newSubstitution = inferTypeSubstitutionInParameterizedType(method, substitution, formalType, superclass, variableArity, remainingArgTypes);
        if (!newSubstitution.substitutedTypes().isEmpty()) {
          result = mergeTypeSubstitutions(substitution, newSubstitution);
        }
      }
      for (JavaType superInterface : argType.symbol.getInterfaces()) {
        superclass = typeSubstitutionSolver.applySubstitution(superInterface, parametrizedArgType.typeSubstitution);
        TypeSubstitution newSubstitution = inferTypeSubstitutionInParameterizedType(method, substitution, formalType, superclass, variableArity, remainingArgTypes);
        if (!newSubstitution.substitutedTypes().isEmpty()) {
          result = mergeTypeSubstitutions(result, newSubstitution);
        }
      }

    } else if (isRawTypeOfType(argType, formalType) || isNullType(argType)) {
      return TypeSubstitution.uncheckedTypeSubstitution();
    } else if (argType.isSubtypeOf(formalType.erasure()) && argType.isClass()) {
      for (JavaType superType : ((ClassJavaType) argType).superTypes()) {
        if (sameErasure(formalType, superType)) {
          TypeSubstitution newSubstitution = inferTypeSubstitution(method, substitution, formalType, superType, variableArity, remainingArgTypes);
          result = mergeTypeSubstitutions(substitution, newSubstitution);
          break;
        }
      }
    }
    return result;
  }

