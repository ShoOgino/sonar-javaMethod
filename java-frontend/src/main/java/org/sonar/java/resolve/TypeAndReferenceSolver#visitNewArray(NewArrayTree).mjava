  @Override
  public void visitNewArray(NewArrayTree tree) {
    resolveAs(tree.type(), JavaSymbol.TYP);
    scan(tree.dimensions());
    resolveAs((List<? extends Tree>) tree.initializers(), JavaSymbol.VAR);
    JavaType type = getType(tree.type());
    if (tree.type() == null) {
      if (((NewArrayTreeImpl) tree).isTypeSet() && tree.symbolType().isArray()) {
        type = ((ArrayJavaType) tree.symbolType()).elementType;
      } else {
        registerType(tree, symbols.deferedType((AbstractTypedTree) tree));
        return;
      }
    }
    int dimensions = tree.dimensions().size();
    // TODO why?
    type = new ArrayJavaType(type, symbols.arrayClass);
    for (int i = 1; i < dimensions; i++) {
      type = new ArrayJavaType(type, symbols.arrayClass);
    }
    registerType(tree, type);
    for (ExpressionTree expressionTree : tree.initializers()) {
      if(((JavaType) expressionTree.symbolType()).isTagged(JavaType.DEFERRED)) {
        setInferedType(((ArrayJavaType) type).elementType, (DeferredType) expressionTree.symbolType());
      }
    }
  }

