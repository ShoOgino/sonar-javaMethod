  private JavaType getIteratedObjectType(JavaType type, Set<String> knownTypes) {
    if (type.isUnknown()) {
      return Symbols.unknownType;
    }
    String fullyQualifiedName = type.fullyQualifiedName();
    if (knownTypes.contains(fullyQualifiedName)) {
      // already visited, early return to avoid loops in type hierarchy
      return Symbols.unknownType;
    }
    knownTypes.add(fullyQualifiedName);
    if (type.is("java.lang.Iterable")) {
      if (!type.isParameterized()) {
        // raw type
        return symbols.objectType;
      }
      ParametrizedTypeJavaType ptjt = (ParametrizedTypeJavaType) type;
      return ptjt.substitution(ptjt.typeParameters().get(0));
    }
    return type.directSuperTypes().stream()
      .map(superType -> getIteratedObjectType(superType, knownTypes))
      .filter(resolved -> !resolved.isUnknown())
      .findFirst().orElse(Symbols.unknownType);
  }

