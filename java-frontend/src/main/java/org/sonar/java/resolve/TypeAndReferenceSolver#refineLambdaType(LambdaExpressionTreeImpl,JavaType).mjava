  private void refineLambdaType(LambdaExpressionTreeImpl lambdaExpressionTree, JavaType lambdaType) {
    JavaSymbol.MethodJavaSymbol samMethod = getSamMethod(lambdaType);
    if(samMethod == null) {
      return;
    }
    JavaType samReturnType = (JavaType) samMethod.returnType().type();
    JavaType capturedReturnType = resolve.resolveTypeSubstitution(samReturnType, lambdaType);
    if (capturedReturnType.is("void") || !lambdaType.isParameterized()) {
      return;
    }
    JavaType refinedReturnType = capturedReturnType;
    if (lambdaExpressionTree.body().is(Tree.Kind.BLOCK)) {
      LambdaBlockReturnVisitor lambdaBlockReturnVisitor = new LambdaBlockReturnVisitor();
      lambdaExpressionTree.body().accept(lambdaBlockReturnVisitor);
      if(!lambdaBlockReturnVisitor.types.isEmpty()) {
        refinedReturnType = (JavaType) resolve.leastUpperBound(lambdaBlockReturnVisitor.types);
      }
    } else {
      refinedReturnType = (JavaType) ((AbstractTypedTree) lambdaExpressionTree.body()).symbolType();
    }
    refineType(lambdaExpressionTree, lambdaType, capturedReturnType, refinedReturnType);
  }

