  /**
   * @return true, if signature of m1 is more specific than signature of m2
   */
  private boolean isSignatureMoreSpecific(JavaSymbol m1, JavaSymbol m2, TypeSubstitution substitution) {
    List<JavaType> m1ArgTypes = ((MethodJavaType) m1.type).argTypes;
    List<JavaType> m2ArgTypes = ((MethodJavaType) m2.type).argTypes;
    JavaSymbol.MethodJavaSymbol methodJavaSymbol = (JavaSymbol.MethodJavaSymbol) m1;
    boolean m1VarArity = methodJavaSymbol.isVarArgs();
    boolean m2VarArity = ((JavaSymbol.MethodJavaSymbol) m2).isVarArgs();
    if (m1VarArity != m2VarArity) {
      return m2VarArity;
    }
    if (m1VarArity) {
      m1ArgTypes = expandVarArgsToFitSize(m1ArgTypes, m2ArgTypes.size());
    }
    if(!hasCompatibleArity(m1ArgTypes.size(), m2ArgTypes.size(), m2VarArity)) {
      return false;
    }
    m1ArgTypes = typeSubstitutionSolver.applySubstitutionToFormalParameters(m1ArgTypes, substitution);
    return isArgumentsAcceptable(m1ArgTypes, m2ArgTypes, m2VarArity, false);
  }

