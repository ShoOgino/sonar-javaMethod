  private JavaType refinedTypeForConstructor(JavaType capturedReturnType, JavaType refinedReturnType) {
    JavaType sanitizedCaptured = capturedReturnType;
    JavaType refinedConstructorType = refinedReturnType;
    if (refinedConstructorType.symbol().isTypeSymbol() && !((JavaSymbol.TypeJavaSymbol) refinedConstructorType.symbol()).typeParameters().scopeSymbols().isEmpty()) {
      refinedConstructorType = parametrizedTypeCache.getParametrizedTypeType(refinedConstructorType.symbol, new TypeSubstitution());
    }
    if (sanitizedCaptured.isTagged(JavaType.TYPEVAR)) {
      sanitizedCaptured = ((TypeVariableJavaType) sanitizedCaptured).bounds.get(0);
    }
    if (refinedConstructorType.isParameterized()) {
      refinedConstructorType = resolve.resolveTypeSubstitutionWithDiamondOperator((ParametrizedTypeJavaType) refinedConstructorType, sanitizedCaptured);
    }
    return refinedConstructorType;
  }

