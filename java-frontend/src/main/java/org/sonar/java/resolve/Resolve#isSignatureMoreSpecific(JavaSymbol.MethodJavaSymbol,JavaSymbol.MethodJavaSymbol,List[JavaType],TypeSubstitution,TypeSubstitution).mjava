  /**
   * @return true, if signature of m1 is more specific than signature of m2
   */
  private boolean isSignatureMoreSpecific(JavaSymbol.MethodJavaSymbol m1, JavaSymbol.MethodJavaSymbol m2, List<JavaType> argTypes,
                                          TypeSubstitution m1Substitution, TypeSubstitution m2Substitution) {
    List<JavaType> m1ArgTypes = ((MethodJavaType) m1.type).argTypes;
    List<JavaType> m2ArgTypes = ((MethodJavaType) m2.type).argTypes;
    boolean m1VarArity = m1.isVarArgs();
    boolean m2VarArity = m2.isVarArgs();
    if (m1VarArity != m2VarArity) {
      // last arg is an array
      boolean lastArgIsArray = !argTypes.isEmpty() && argTypes.get(argTypes.size() -1).isArray() && (argTypes.size() == m2ArgTypes.size() || argTypes.size() == m1ArgTypes.size());
      // general case : prefer strict arity invocation over varArity, so if m2 is variadic, m1 is most specific, but not if last arg of invocation is an array
      return lastArgIsArray ^ m2VarArity;
    }
    if (m1VarArity) {
      m1ArgTypes = expandVarArgsToFitSize(m1ArgTypes, m2ArgTypes.size());
    }
    if(!hasCompatibleArity(m1ArgTypes.size(), m2ArgTypes.size(), m2VarArity)) {
      return false;
    }
    List<JavaType> m1SubstitutedArgTypes = typeSubstitutionSolver.applySubstitutionToFormalParameters(m1ArgTypes, m1Substitution);
    List<JavaType> m2SubstitutedArgTypes = typeSubstitutionSolver.applySubstitutionToFormalParameters(m2ArgTypes, m2Substitution);
    if (m1SubstitutedArgTypes.equals(m2SubstitutedArgTypes)
      // approximation for generic methods
      || (m1.isParametrized() && m2.isParametrized() && erasure(m1SubstitutedArgTypes).equals(erasure(m2SubstitutedArgTypes)))) {
      // Same types once substituted, so we should select the most specific one before substitution.
      // i.e: 'T[]' is more specific than 'T', or 'List<T>' is more specific than 'T'
      return isArgumentsAcceptable(m1ArgTypes, m2ArgTypes, m2VarArity, true);
    }
    return isArgumentsAcceptable(m1SubstitutedArgTypes, m2SubstitutedArgTypes, m2VarArity, true);
  }

