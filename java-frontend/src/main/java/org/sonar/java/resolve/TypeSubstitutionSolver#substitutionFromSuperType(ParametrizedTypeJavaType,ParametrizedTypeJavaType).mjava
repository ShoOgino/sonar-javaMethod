  static TypeSubstitution substitutionFromSuperType(ParametrizedTypeJavaType target, ParametrizedTypeJavaType source) {
    TypeSubstitution result = new TypeSubstitution(target.typeSubstitution);
    if (target.rawType != source.rawType) {
      TypeJavaSymbol targetSymbol = target.symbol;
      Type superClass = targetSymbol.superClass();
      if (superClass != null && isParametrizedType(superClass)) {
        TypeSubstitution newSub = substitutionFromSuperType((ParametrizedTypeJavaType) superClass, source);
        result = result.combine(newSub);
      }
      for (Type superInterface : targetSymbol.interfaces()) {
        if (isParametrizedType(superInterface)) {
          TypeSubstitution newSub = substitutionFromSuperType((ParametrizedTypeJavaType) superInterface, source);
          result = result.combine(newSub);
        }
      }
    } else {
      result = target.typeSubstitution.combine(source.typeSubstitution);
    }
    return result;
  }

