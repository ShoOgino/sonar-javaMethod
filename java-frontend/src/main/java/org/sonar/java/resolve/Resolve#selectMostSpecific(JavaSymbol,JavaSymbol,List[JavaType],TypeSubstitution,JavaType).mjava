  /**
   * JLS7 15.12.2.5. Choosing the Most Specific Method
   */
  private JavaSymbol selectMostSpecific(JavaSymbol m1, JavaSymbol m2, List<JavaType> argTypes, TypeSubstitution m1Substitution, JavaType callSite) {
    // FIXME get rig of null check
    if (m2.type == null || !m2.isKind(JavaSymbol.MTH)) {
      return m1;
    }

    JavaSymbol.MethodJavaSymbol m1MethodSymbol = (JavaSymbol.MethodJavaSymbol) m1;
    JavaSymbol.MethodJavaSymbol m2MethodSymbol = (JavaSymbol.MethodJavaSymbol) m2;

    TypeSubstitution m2Substitution = null;
    boolean m1IsGeneric = m1MethodSymbol.isParametrized();
    boolean m2IsGeneric = m2MethodSymbol.isParametrized();
    if (m2IsGeneric) {
      m2Substitution = typeSubstitutionSolver.getTypeSubstitution(m2MethodSymbol, callSite, Collections.emptyList(), argTypes);
    }
    if (m2Substitution == null) {
      m2Substitution = new TypeSubstitution();
    }
    boolean m1SignatureMoreSpecific = isSignatureMoreSpecific(m1MethodSymbol, m2MethodSymbol, argTypes, m1Substitution, m2Substitution);
    boolean m2SignatureMoreSpecific = isSignatureMoreSpecific(m2MethodSymbol, m1MethodSymbol, argTypes, m2Substitution, m1Substitution);
    if (m1SignatureMoreSpecific && m2SignatureMoreSpecific) {
      // JLS8 18.5.4 naive implementation of most specific when inferring of parametric method is involved
      if(!m1IsGeneric && m2IsGeneric) {
        return m1;
      } else if(m1IsGeneric && !m2IsGeneric) {
        return m2;
      }
      return new AmbiguityErrorJavaSymbol();
    } else if (m1SignatureMoreSpecific) {
      return m1;
    } else if (m2SignatureMoreSpecific) {
      return m2;
    }
    return new AmbiguityErrorJavaSymbol();
  }

