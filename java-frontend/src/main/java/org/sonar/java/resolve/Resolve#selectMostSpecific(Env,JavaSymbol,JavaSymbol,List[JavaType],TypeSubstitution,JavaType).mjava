  /**
   * JLS7 15.12.2.5. Choosing the Most Specific Method
   */
  private JavaSymbol selectMostSpecific(Env env, JavaSymbol m1, JavaSymbol m2, List<JavaType> argTypes, TypeSubstitution m1Substitution, JavaType callSite) {
    // FIXME get rig of null check
    if (m2.type == null || !m2.isKind(JavaSymbol.MTH)) {
      return m1;
    }
    TypeSubstitution m2Substitution = null;
    if (((JavaSymbol.MethodJavaSymbol) m2).isParametrized()) {
      m2Substitution = typeSubstitutionSolver.getTypeSubstitution((JavaSymbol.MethodJavaSymbol) m2, callSite, ImmutableList.of(), argTypes);
    }
    if (m2Substitution == null) {
      m2Substitution = new TypeSubstitution();
    }
    boolean m1SignatureMoreSpecific = isSignatureMoreSpecific(env, m1, m2, argTypes, m1Substitution, m2Substitution);
    boolean m2SignatureMoreSpecific = isSignatureMoreSpecific(env, m2, m1, argTypes, m1Substitution, m2Substitution);
    if (m1SignatureMoreSpecific && m2SignatureMoreSpecific) {
      return new AmbiguityErrorJavaSymbol();
    } else if (m1SignatureMoreSpecific) {
      return m1;
    } else if (m2SignatureMoreSpecific) {
      return m2;
    }
    return new AmbiguityErrorJavaSymbol();
  }

