  private void setInferedType(Type infered, DeferredType deferredType) {
    AbstractTypedTree inferedExpression = deferredType.tree();
    Type newType = infered;
    if (inferedExpression.is(Tree.Kind.NEW_CLASS)) {
      Type newClassType = ((NewClassTree) inferedExpression).identifier().symbolType();
      if(((JavaType) newClassType).isParameterized()) {
        newType = resolve.resolveTypeSubstitutionWithDiamondOperator((ParametrizedTypeJavaType) newClassType, (JavaType) infered);
      }
    }
    inferedExpression.setInferedType(newType);
    inferedExpression.accept(this);
    if (inferedExpression.is(Tree.Kind.VAR_TYPE)) {
      // change type of the variable
      JavaSymbol.VariableJavaSymbol variableSymbol = ((VariableTreeImpl) inferedExpression.parent()).getSymbol();
      variableSymbol.type = (JavaType) newType;
    }
  }

