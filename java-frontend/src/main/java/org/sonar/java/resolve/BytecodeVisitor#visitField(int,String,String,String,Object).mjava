  @Override
  public FieldVisitor visitField(int flags, String name, String desc, @Nullable String signature, @Nullable Object value) {
    Preconditions.checkNotNull(name);
    Preconditions.checkNotNull(desc);
    if (isNotSynthetic(flags)) {
      //Flags from asm lib are defined in Opcodes class and map to flags defined in Flags class
      int filteredFlags = Flags.filterAccessBytecodeFlags(flags);
      JavaType type = convertAsmType(Type.getType(desc));
      JavaSymbol.VariableJavaSymbol symbol = new JavaSymbol.VariableJavaSymbol(filteredFlags, name, type, classSymbol);
      if (Flags.isFlagged(flags, Flags.STATIC) && Flags.isFlagged(flags, Flags.FINAL)) {
        symbol = new JavaSymbol.ConstantJavaSymbol(filteredFlags, name, type, classSymbol, value);
      }
      classSymbol.members.enter(symbol);
      if (signature != null) {
        ReadType typeReader = new ReadType();
        new SignatureReader(signature).accept(typeReader);
        symbol.type = typeReader.typeRead;
      }
      // checks for annotations on the field
      return new BytecodeFieldVisitor(symbol, this);
    }
    return null;
  }

