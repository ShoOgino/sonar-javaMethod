  @Override
  public void visitReturnStatement(ReturnStatementTree tree) {
    super.visitReturnStatement(tree);
    ExpressionTree expression = tree.expression();
    if (expression != null && ((JavaType) expression.symbolType()).isTagged(JavaType.DEFERRED)) {
      // get owner of return (method or lambda)
      Tree parent = tree.parent();
      while (!parent.is(Tree.Kind.METHOD, Tree.Kind.LAMBDA_EXPRESSION)) {
        parent = parent.parent();
        if(parent == null) {
          throw new IllegalStateException("Return statement was unexpected here");
        }
      }
      Type infered;
      if(parent.is(Tree.Kind.METHOD)) {
        infered = ((MethodTree) parent).returnType().symbolType();
      } else {
        infered = ((LambdaExpressionTree) parent).symbolType();
      }
      setInferedType(infered, (DeferredType) expression.symbolType());
    }
  }

