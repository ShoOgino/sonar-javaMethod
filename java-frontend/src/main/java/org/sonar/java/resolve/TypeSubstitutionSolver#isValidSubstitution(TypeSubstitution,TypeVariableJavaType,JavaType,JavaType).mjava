  private boolean isValidSubstitution(TypeSubstitution candidate, TypeVariableJavaType typeVar, JavaType typeParam, JavaType site) {
    for (JavaType bound : typeVar.bounds) {
      JavaType currentBound = applySubstitution(bound, candidate);
      while (currentBound.isTagged(JavaType.TYPEVAR) && !currentBound.symbol().owner().isMethodSymbol()) {
        JavaType newBound = candidate.substitutedType(currentBound);
        if (newBound == null && site.isParameterized()) {
          newBound = ((ParametrizedTypeJavaType) site).typeSubstitution.substitutedType(currentBound);
        }
        if (newBound == null) {
          return ((JavaSymbol.TypeJavaSymbol) site.symbol()).typeVariableTypes.contains(currentBound);
        }
        if (currentBound.equals(newBound)) {
          // exploring the same substitution, we cannot deduce anything
          break;
        }
        currentBound = newBound;
      }
      if (!isUnboundedWildcard(typeParam) && !typeParam.isSubtypeOf(currentBound)) {
        return false;
      }
    }
    return true;
  }

