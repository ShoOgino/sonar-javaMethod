  private static int computeFlagsForInterfaceMember(Tree tree) {
    int result;
    if (tree.is(Tree.Kind.METHOD)) {
      MethodTree methodTree = (MethodTree) tree;
      // JLS9 9.4 A method in the body of an interface may be declared public or private
      if (ModifiersUtils.hasModifier(methodTree.modifiers(), Modifier.PRIVATE)) {
        result = Flags.PRIVATE;
      } else {
        result = Flags.PUBLIC;
      }
      if (methodTree.block() == null) {
        // JLS8 9.4: methods lacking a block are implicitly abstract
        result |= Flags.ABSTRACT;
      }
    } else {
      // JLS7 9.5: member type declarations are implicitly static and public
      result = Flags.PUBLIC | Flags.STATIC;
      if (tree.is(Tree.Kind.VARIABLE)) {
        // JLS7 9.3: fields are implicitly public, static and final
        result |= Flags.FINAL;
      }
    }
    return result;
  }

