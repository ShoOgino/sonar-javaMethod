  private boolean validMethodReference(Env env, MethodReferenceTree tree, JavaType formal, List<JavaType> samMethodArgs) {
    Tree expression = tree.expression();
    if (expression instanceof AbstractTypedTree) {
      String searchedMethod = getMethodReferenceMethodName(tree.method().name());

      JavaType expressionType = (JavaType) ((AbstractTypedTree) expression).symbolType();
      if (isArrayConstructor(expressionType, searchedMethod)) {
        setMethodRefType(tree, formal, expressionType);
        return true;
      }

      Resolution resolution = findMethod(env, expressionType, searchedMethod, samMethodArgs);
      // JLS ยง15.13.1
      if (secondSearchRequired(expression, expressionType, resolution.symbol, samMethodArgs)) {
        resolution = findMethod(env, expressionType, searchedMethod, samMethodArgs.stream().skip(1).collect(Collectors.toList()));
      }

      if (!resolution.symbol.isUnknown()) {
        if (tree.method().symbol().isUnknown()) {
          associateReference(tree.method(), (JavaSymbol.MethodJavaSymbol) resolution.symbol);
          setMethodRefType(tree, formal, resolution.type);
        }
        return true;
      }
    }
    return false;
  }

