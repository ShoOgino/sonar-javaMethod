  private JavaType getAnonymousClassType(JavaType identifierType, JavaType constructedType, ClassTree classBody) {
    JavaType parentType = (constructedType.isTagged(JavaType.DEFERRED) || identifierType.symbol().isInterface()) ? identifierType : constructedType;
    ClassJavaType anonymousClassType = (ClassJavaType) classBody.symbol().type();
    if (parentType.getSymbol().isInterface()) {
      anonymousClassType.interfaces = ImmutableList.of(parentType);
      anonymousClassType.supertype = symbols.objectType;
    } else {
      anonymousClassType.supertype = parentType;
      anonymousClassType.interfaces = ImmutableList.of();
    }
    anonymousClassType.symbol.members.enter(new JavaSymbol.VariableJavaSymbol(Flags.FINAL, "super", anonymousClassType.supertype, anonymousClassType.symbol));
    scan(classBody);
    return anonymousClassType;
  }

