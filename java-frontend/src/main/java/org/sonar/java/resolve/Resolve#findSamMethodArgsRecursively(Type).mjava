  private Optional<List<JavaType>> findSamMethodArgsRecursively(@Nullable Type type) {
    if(type == null) {
      return Optional.empty();
    }
    Optional<List<JavaType>> result = type.symbol().memberSymbols().stream()
      .filter(Resolve::isAbstractMethod).findFirst()
      .map(s -> ((MethodJavaType) ((JavaSymbol.MethodJavaSymbol) s).type).argTypes);

    if(!result.isPresent()) {
      result = findSamMethodArgsRecursively(type.symbol().superClass());
      if(!result.isPresent()) {
        result = type.symbol().interfaces().stream()
          .map(this::findSamMethodArgsRecursively)
          .filter(Optional::isPresent)
          .map(Optional::get)
          .findFirst();
      }
    }
    return result.map(samTypes -> applySamSubstitution(type, samTypes));
  }

