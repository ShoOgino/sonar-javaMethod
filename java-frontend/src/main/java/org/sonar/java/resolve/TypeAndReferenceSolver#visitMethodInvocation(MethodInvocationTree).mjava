  @Override
  public void visitMethodInvocation(MethodInvocationTree tree) {
    Tree methodSelect = tree.methodSelect();
    Resolve.Env methodEnv = semanticModel.getEnv(tree);
    scan(tree.arguments());
    scan(tree.typeArguments());
    List<JavaType> argTypes = getParameterTypes(tree.arguments());
    List<JavaType> typeParamTypes = Lists.newArrayList();
    if(tree.typeArguments() != null ) {
      typeParamTypes = getParameterTypes(tree.typeArguments());
    }
    Resolve.Resolution resolution = resolveMethodSymbol(methodSelect, methodEnv, argTypes, typeParamTypes);
    JavaSymbol symbol = resolution.symbol();
    ((MethodInvocationTreeImpl) tree).setSymbol(symbol);
    registerType(tree, resolution.type());
    Type formal = Symbols.unknownType;
    for (int i = 0; i < argTypes.size(); i++) {
      if (symbol.isMethodSymbol()) {
        Symbol.MethodSymbol methodSymbol = (Symbol.MethodSymbol) symbol;
        int size = methodSymbol.parameterTypes().size();
        formal = methodSymbol.parameterTypes().get(i < size ? i : size - 1);
      }
      JavaType arg = argTypes.get(i);
      if (arg.isTagged(JavaType.DEFERRED)) {
        setInferedType(formal, (DeferredType) arg);
      }
    }
  }

