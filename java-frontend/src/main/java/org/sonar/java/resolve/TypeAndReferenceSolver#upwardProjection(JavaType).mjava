  /**
   * Upward projection: JLS10 - ยง14.4.1, ยง4.10.5, ยง5.1.10
   *
   * Find a close supertype of a type, where that supertype does not mention certain synthetic type variables
   * (type variables introduced by the compiler during capture conversion or inference variable resolution).
   *
   * NOTE: Capture conversions or intersection types are not implemented as proper types in SonarJava, so
   * approximating to type of the expression, except for wildcards, which are the closest thing we have from
   * capture conversions.
   *
   * @param initializerType the type computed for the initializer of a local variable, to be projected upward
   * @return the upward projection of the initializer type
   */
  private JavaType upwardProjection(JavaType initializerType) {

    if (initializerType.isTagged(JavaType.WILDCARD)) {
      // JLS10 - ยง5.1.10: the result is the upward projection of the upper bound of T.
      WildCardType type = (WildCardType) initializerType;
      switch (type.boundType) {
        case UNBOUNDED:
          return symbols.objectType;
        case EXTENDS:
          return type.bound;
        case SUPER:
          // the highest upper bound of the the bound
          return symbols.objectType;
      }
    }
    if (initializerType.isTagged(JavaType.TYPEVAR)) {
      return initializerType.erasure();
    }
    // identity
    return initializerType;
  }

