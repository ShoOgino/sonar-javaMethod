  private boolean isAcceptableDeferredType(Env env, DeferredType arg, JavaType formal) {
    AbstractTypedTree tree = arg.tree();
    List<JavaType> samMethodArgs = findSamMethodArgs(formal);
    if (tree.is(Tree.Kind.METHOD_REFERENCE)) {
      return validMethodReference(env, (MethodReferenceTree) tree, samMethodArgs);
    }
    // we accept all deferred type as we will resolve this later, but reject lambdas with incorrect arity
    return !tree.is(Tree.Kind.LAMBDA_EXPRESSION) || ((LambdaExpressionTree) tree).parameters().size() == samMethodArgs.size();
  }

