  /**
   * For any element G of MEC that is a generic type, let the "relevant" parameterizations of G, Relevant(G), be:
   * Relevant(G) = { V | 1 ≤ i ≤ k: V in ST(Ui) and V = G<...> }
   *
   * @param minimalErasedCandidates MEC
   * @param supertypes
   * @return the set of known parameterizations for each generic type G of MEC 
   */
  private static Multimap<Type, Type> relevantParameterizations(List<Type> minimalErasedCandidates, List<Set<Type>> supertypes) {
    Multimap<Type, Type> result = Multimaps.newSetMultimap(new HashMap<>(), () -> new LinkedHashSet<>());
    for (Set<Type> supertypesSet : supertypes) {
      for (Type supertype : supertypesSet) {
        Type erasedSupertype = supertype.erasure();
        if (minimalErasedCandidates.contains(erasedSupertype)) {
          result.put(erasedSupertype, supertype);
        }
      }
    }
    return result;
  }

