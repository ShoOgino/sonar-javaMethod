  @Override
  public void visitMethodReference(MethodReferenceTree methodReferenceTree) {
    MethodReferenceTreeImpl methodRefTree = (MethodReferenceTreeImpl) methodReferenceTree;
    if(methodRefTree.isTypeSet()) {
      resolveAs(methodReferenceTree.expression(), JavaSymbol.VAR | JavaSymbol.TYP);
      scan(methodReferenceTree.typeArguments());
      // TODO : SONARJAVA-1663 : consider type arguments for method resolution and substitution
      Resolve.Env methodEnv = semanticModel.getEnv(methodReferenceTree);
      List<JavaType> samMethodArgs = resolve.findSamMethodArgs(methodReferenceTree.symbolType());
      Resolve.Resolution resolution;
      if("new".equals(methodReferenceTree.method().name())) {
        resolution = resolve.findMethod(methodEnv, getType(methodReferenceTree.expression()), "<init>", samMethodArgs);
        associateReference(methodReferenceTree.method(), resolution.symbol());
      } else {
        resolveMethodSymbol(methodReferenceTree.method(), methodEnv, samMethodArgs, ImmutableList.<JavaType>of());
      }
    } else {
      registerType(methodRefTree, symbols.deferedType(methodRefTree));
    }
  }

