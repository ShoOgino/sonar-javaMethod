  private Resolution findMethod(Env env, JavaType callSite, JavaType site, String name, List<JavaType> argTypes, List<JavaType> typeParams, boolean looseInvocation) {
    JavaType superclass = site.getSymbol().getSuperclass();
    Resolution bestSoFar = unresolved();

    bestSoFar = lookupInScope(env, callSite, site, name, argTypes, typeParams, looseInvocation, site.getSymbol().members(), bestSoFar);
    // FIXME SONARJAVA-2096: interrupt exploration if the most specific method has already been found by strict invocation context

    //look in supertypes for more specialized method (overloading).
    if (superclass != null) {
      Resolution method = findMethod(env, callSite, superclass, name, argTypes, typeParams, looseInvocation);
      method.type = typeSubstitutionSolver.applySiteSubstitution(method.type, site, superclass);
      Resolution best = selectBest(env, superclass, callSite, argTypes, typeParams, method.symbol, bestSoFar, looseInvocation);
      if (best.symbol == method.symbol) {
        bestSoFar = method;
      }
    }
    for (JavaType interfaceType : site.getSymbol().getInterfaces()) {
      Resolution method = findMethod(env, callSite, interfaceType, name, argTypes, typeParams, looseInvocation);
      method.type = typeSubstitutionSolver.applySiteSubstitution(method.type, site, interfaceType);
      Resolution best = selectBest(env, interfaceType, callSite, argTypes, typeParams, method.symbol, bestSoFar, looseInvocation);
      if (best.symbol == method.symbol) {
        bestSoFar = method;
      }
    }
    return bestSoFar;
  }

