  private Resolution findMethod(Env env, JavaType callSite, JavaType site, String name, List<JavaType> argTypes, List<JavaType> typeParams, boolean autoboxing) {
    JavaType superclass = site.getSymbol().getSuperclass();
    Resolution bestSoFar = unresolved();
    // handle constructors
    if ("this".equals(name)) {
      return findConstructor(env, site, argTypes, typeParams, autoboxing);
    } else if ("super".equals(name)) {
      if (superclass == null) {
        return bestSoFar;
      }
      return findConstructor(env, superclass, argTypes, typeParams, autoboxing);
    }
    // look in site members
    for (JavaSymbol symbol : site.getSymbol().members().lookup(name)) {
      if (symbol.kind == JavaSymbol.MTH) {
        Resolution best = selectBest(env, site, callSite, argTypes, typeParams, symbol, bestSoFar, autoboxing);
        if (best.symbol == symbol) {
          bestSoFar = best;
        }
      }
    }
    //look in supertypes for more specialized method (overloading).
    if (superclass != null) {
      Resolution method = findMethod(env, callSite, superclass, name, argTypes, typeParams);
      method.type = typeSubstitutionSolver.applySiteSubstitution(method.type, site, superclass);
      Resolution best = selectBest(env, superclass, callSite, argTypes, typeParams, method.symbol, bestSoFar, autoboxing);
      if (best.symbol == method.symbol) {
        bestSoFar = method;
      }
    }
    for (JavaType interfaceType : site.getSymbol().getInterfaces()) {
      Resolution method = findMethod(env, callSite, interfaceType, name, argTypes, typeParams);
      method.type = typeSubstitutionSolver.applySiteSubstitution(method.type, site, interfaceType);
      Resolution best = selectBest(env, interfaceType, callSite, argTypes, typeParams, method.symbol, bestSoFar, autoboxing);
      if (best.symbol == method.symbol) {
        bestSoFar = method;
      }
    }
    if(bestSoFar.symbol.kind >= JavaSymbol.ERRONEOUS && !autoboxing) {
      bestSoFar = findMethod(env, callSite, site, name, argTypes, typeParams, true);
    }
    return bestSoFar;
  }

