  private void handleExceptionalPaths(Symbol symbol) {
    TryStatement pop = enclosingTry.pop();
    TryStatement tryStatement;
    Block exceptionPredecessor = currentBlock;
    if (Boolean.TRUE.equals(enclosedByCatch.peek())) {
      tryStatement = enclosingTry.peek();
    } else {
      tryStatement = pop;
    }
    enclosingTry.push(pop);
    if(pop != outerTry) {
      currentBlock = createBlock(currentBlock);
      currentBlock.exceptions.add(exitBlocks.peek());
      if (!Boolean.TRUE.equals(enclosedByCatch.peek())) {
        exceptionPredecessor = currentBlock;
      }
    }
    if (symbol.isMethodSymbol()) {
      List<Type> thrownTypes = ((Symbol.MethodSymbol) symbol).thrownTypes();
      thrownTypes.forEach(thrownType -> {
        for (Type caughtType : tryStatement.catches.keySet()) {
          if (thrownType.isSubtypeOf(caughtType) ||
            caughtType.isSubtypeOf(thrownType) ||
            thrownType.isUnknown() ||
            // note that this condition is not necessary, because unknown type will be added to runtimeCatches due to condition in
            // org.sonar.java.cfg.CFG.TryStatement#addCatch ,however, it is here for clarity
            caughtType.isUnknown()) {
            currentBlock.exceptions.add(tryStatement.catches.get(caughtType));
          }
        }
      });
    }
    exceptionPredecessor.exceptions.addAll(tryStatement.runtimeCatches);
  }

