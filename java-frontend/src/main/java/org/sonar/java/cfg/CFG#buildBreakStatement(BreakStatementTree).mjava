  private void buildBreakStatement(BreakStatementTree tree) {
    IdentifierTree label = tree.label();
    boolean isLabel = false;
    Block targetBlock = null;
    if (label == null) {
      if (breakTargets.isEmpty()) {
        if (!ignoreBreakAndContinue) {
          throw new IllegalStateException("'break' statement not in loop or switch statement");
        }
      } else {
        targetBlock = breakTargets.getLast();
      }
    } else {
      isLabel = label.symbol() instanceof Symbol.LabelSymbol;
      if (isLabel) {
        targetBlock = labelsBreakTarget.get(label.name());
      } else {
        targetBlock = breakTargets.getLast();
      }
    }
    currentBlock = createUnconditionalJump(tree, targetBlock, currentBlock);
    ExpressionTree value = tree.value();
    if (value != null && !isLabel) {
      build(value);
    }
    if(currentBlock.exitBlock != null) {
      currentBlock.exitBlock = null;
    }
  }

