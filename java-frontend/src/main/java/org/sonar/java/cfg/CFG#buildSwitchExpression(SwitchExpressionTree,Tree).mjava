  private void buildSwitchExpression(SwitchExpressionTree switchExpressionTree, Tree terminator) {
    Block switchSuccessor = currentBlock;
    // process condition
    currentBlock = createBlock();
    currentBlock.terminator = terminator;
    Block switchBlock = currentBlock;
    List<ExpressionTree> switchCasesExpressions = switchExpressionTree.cases()
      .stream()
      .map(CaseGroupTree::labels)
      .flatMap(List::stream)
      .map(CaseLabelTree::expressions)
      .flatMap(List::stream).collect(Collectors.toList());
    ListUtils.reverse(switchCasesExpressions).forEach(this::build);

    build(switchExpressionTree.expression());
    Block conditionBlock = currentBlock;
    // process body
    currentBlock = createBlock(switchSuccessor);
    breakTargets.addLast(switchSuccessor);
    boolean hasDefaultCase = false;
    if (!switchExpressionTree.cases().isEmpty()) {
      boolean withoutFallTrough = switchWithoutFallThrough(switchExpressionTree);
      CaseGroupTree firstCase = switchExpressionTree.cases().get(0);
      for (CaseGroupTree caseGroupTree : ListUtils.reverse(switchExpressionTree.cases())) {
        if (withoutFallTrough) {
          currentBlock.successors().clear();
          currentBlock.addSuccessor(switchSuccessor);
        }
        build(caseGroupTree.body());
        currentBlock.elements.add(caseGroupTree);
        if (!hasDefaultCase) {
          hasDefaultCase = containsDefaultCase(caseGroupTree.labels());
          currentBlock.isDefaultBlock = hasDefaultCase;
        }
        currentBlock.setCaseGroup(caseGroupTree);
        switchBlock.addSuccessor(currentBlock);
        if (!caseGroupTree.equals(firstCase)) {
          // No block preceding the first case group.
          currentBlock = createBlock(currentBlock);
        }
      }
    }
    breakTargets.removeLast();
    // process condition
    currentBlock = switchBlock;
    if (!hasDefaultCase && !terminator.is(Tree.Kind.SWITCH_EXPRESSION)) {
      currentBlock.addSuccessor(switchSuccessor);
    }
    currentBlock = conditionBlock;
  }

