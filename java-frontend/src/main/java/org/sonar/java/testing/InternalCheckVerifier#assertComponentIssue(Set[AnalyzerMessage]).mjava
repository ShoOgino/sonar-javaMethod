  private void assertComponentIssue(Set<AnalyzerMessage> issues) {
    String expectedMessage = expectations.expectedFileIssue();
    String component = "file";
    String otherComponent = "project";

    if (expectations.expectIssueAtProjectLevel()) {
      expectedMessage = expectations.expectedProjectIssue();
      component = "project";
      otherComponent = "file";
    }

    if (issues.size() != 1) {
      String issueNumberMessage = issues.isEmpty() ? "none has been raised" : String.format("%d issues have been raised", issues.size());
      throw new AssertionError(String.format("A single issue is expected on the %s, but %s", component, issueNumberMessage));
    }
    AnalyzerMessage issue = Iterables.getFirst(issues, null);
    if (issue.getLine() != null) {
      throw new AssertionError(String.format("Expected an issue directly on %s but was raised on line %d", component, issue.getLine()));
    }
    if ((expectations.expectIssueAtProjectLevel() && issue.getInputComponent().isFile())
      || (expectations.expectIssueAtFileLevel() && !issue.getInputComponent().isFile())) {
      throw new AssertionError(String.format("Expected the issue to be raised at %s level, not at %s level", component, otherComponent));
    }
    if (!expectedMessage.equals(issue.getMessage())) {
      throw new AssertionError(String.format("Expected the issue message to be:%n\t\"%s\"%nbut was:%n\t\"%s\"", expectedMessage, issue.getMessage()));
    }
  }

