  Optional<String> containFlow(List<AnalyzerMessage> actual) {
    List<Integer> actualLines = flowToLines(actual, AnalyzerMessage::getLine);
    Set<String> expectedFlows = flows.keySet().stream()
      .filter(flowId -> !seenFlowIds.contains(flowId))
      .filter(flowId -> flowToLines(flows.get(flowId), f -> f.line).equals(actualLines))
      .collect(Collectors.toSet());
    if (expectedFlows.isEmpty()) {
      return Optional.empty();
    }
    if (expectedFlows.size() == 1) {
      String flowId = Iterables.getOnlyElement(expectedFlows);
      seenFlowIds.add(flowId);
      return Optional.of(flowId);
    }
    // more than 1 flow with same lines, let's check messages
    List<String> actualMessages = actual.stream().map(AnalyzerMessage::getMessage).collect(toList());
    Optional<String> foundFlow = expectedFlows.stream().filter(flowId -> hasSameMessages(flowId, actualMessages)).findFirst();
    foundFlow.ifPresent(flowId -> seenFlowIds.add(flowId));
    return foundFlow;
  }

