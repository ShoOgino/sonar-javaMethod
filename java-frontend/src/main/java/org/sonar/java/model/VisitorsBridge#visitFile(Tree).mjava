  public void visitFile(@Nullable Tree parsedTree) {
    JavaTree.CompilationUnitTreeImpl tree = new JavaTree.CompilationUnitTreeImpl(null, new ArrayList<>(), new ArrayList<>(), null, null);
    boolean fileParsed = parsedTree != null;
    if (fileParsed && parsedTree.is(Tree.Kind.COMPILATION_UNIT)) {
      tree = (JavaTree.CompilationUnitTreeImpl) parsedTree;
      createSonarSymbolTable(tree);
    }

    JavaFileScannerContext javaFileScannerContext = createScannerContext(tree, tree.sema, sonarComponents, fileParsed);

    // Symbolic execution checks
    if (symbolicExecutionEnabled) {
      try {
        runScanner(javaFileScannerContext, new SymbolicExecutionVisitor(executableScanners, behaviorCache), AnalysisError.Kind.SE_ERROR);
        behaviorCache.cleanup();
      } catch (CheckFailureException e) {
        interruptIfFailFast(e);
      }
    }

    for (JavaFileScanner scanner : executableScanners) {
      try {
        runScanner(javaFileScannerContext, scanner, AnalysisError.Kind.CHECK_ERROR);
      } catch (CheckFailureException e) {
        interruptIfFailFast(e);
      }
    }

    try {
      issuableSubscriptionVisitorsRunner.run(javaFileScannerContext);
    } catch (CheckFailureException e) {
      interruptIfFailFast(e);
    }
  }

