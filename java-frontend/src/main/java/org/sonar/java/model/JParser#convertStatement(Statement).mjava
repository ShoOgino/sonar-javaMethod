  private StatementTree convertStatement(Statement node) {
    switch (node.getNodeType()) {
      case ASTNode.BLOCK:
        return convertBlock((Block) node);
      case ASTNode.EMPTY_STATEMENT: {
        EmptyStatement e = (EmptyStatement) node;
        return new EmptyStatementTreeImpl(
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.RETURN_STATEMENT: {
        ReturnStatement e = (ReturnStatement) node;
        Expression expression = e.getExpression();
        return new ReturnStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNamereturn),
          expression == null ? null : convertExpression(expression),
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.FOR_STATEMENT: {
        ForStatement e = (ForStatement) node;

        StatementExpressionListTreeImpl forInitStatement = new StatementExpressionListTreeImpl(new ArrayList<>(), new ArrayList<>());
        for (int i = 0; i < e.initializers().size(); i++) {
          Expression o = (Expression) e.initializers().get(i);
          if (i > 0) {
            forInitStatement.separators().add(firstTokenBefore(o, TerminalTokens.TokenNameCOMMA));
          }
          if (ASTNode.VARIABLE_DECLARATION_EXPRESSION == o.getNodeType()) {
            addVariableToList(
              (VariableDeclarationExpression) o,
              forInitStatement
            );
          } else {
            forInitStatement.add(new ExpressionStatementTreeImpl(
              convertExpression(o),
              null
            ));
          }
        }

        StatementExpressionListTreeImpl forUpdateStatement = new StatementExpressionListTreeImpl(new ArrayList<>(), new ArrayList<>());
        for (int i = 0; i < e.updaters().size(); i++) {
          Expression o = (Expression) e.updaters().get(i);
          if (i > 0) {
            forUpdateStatement.separators().add(firstTokenBefore(o, TerminalTokens.TokenNameCOMMA));
          }
          forUpdateStatement.add(new ExpressionStatementTreeImpl(
            convertExpression(o),
            null
          ));
        }

        final int firstSemicolonTokenIndex = e.initializers().isEmpty()
          ? tokenManager.firstIndexIn(e, TerminalTokens.TokenNameSEMICOLON)
          : tokenManager.firstIndexAfter((ASTNode) e.initializers().get(e.initializers().size() - 1), TerminalTokens.TokenNameSEMICOLON);
        Expression expression = e.getExpression();
        final int secondSemicolonTokenIndex = expression == null
          ? nextTokenIndex(firstSemicolonTokenIndex, TerminalTokens.TokenNameSEMICOLON)
          : tokenManager.firstIndexAfter(expression, TerminalTokens.TokenNameSEMICOLON);

        return new ForStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNamefor),
          firstTokenIn(e, TerminalTokens.TokenNameLPAREN),
          forInitStatement,
          createSyntaxToken(firstSemicolonTokenIndex),
          expression == null ? null : convertExpression(expression),
          createSyntaxToken(secondSemicolonTokenIndex),
          forUpdateStatement,
          firstTokenBefore(e.getBody(), TerminalTokens.TokenNameRPAREN),
          convertStatement(e.getBody())
        );
      }
      case ASTNode.WHILE_STATEMENT: {
        WhileStatement e = (WhileStatement) node;
        return new WhileStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNamewhile),
          firstTokenBefore(e.getExpression(), TerminalTokens.TokenNameLPAREN),
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameRPAREN),
          convertStatement(e.getBody())
        );
      }
      case ASTNode.IF_STATEMENT: {
        IfStatement e = (IfStatement) node;
        Expression expression = e.getExpression();
        Statement elseStatement = e.getElseStatement();
        if (elseStatement != null) {
          return new IfStatementTreeImpl(
            firstTokenAfter(e.getThenStatement(), TerminalTokens.TokenNameelse),
            convertStatement(elseStatement)
          ).complete(
            firstTokenIn(e, TerminalTokens.TokenNameif),
            firstTokenBefore(expression, TerminalTokens.TokenNameLPAREN),
            convertExpression(expression),
            firstTokenAfter(expression, TerminalTokens.TokenNameRPAREN),
            convertStatement(e.getThenStatement())
          );
        } else {
          return new IfStatementTreeImpl(
            firstTokenIn(e, TerminalTokens.TokenNameif),
            firstTokenBefore(expression, TerminalTokens.TokenNameLPAREN),
            convertExpression(expression),
            firstTokenAfter(expression, TerminalTokens.TokenNameRPAREN),
            convertStatement(e.getThenStatement())
          );
        }
      }
      case ASTNode.BREAK_STATEMENT: {
        BreakStatement e = (BreakStatement) node;
        IdentifierTreeImpl identifier = e.getLabel() == null ? null : convertSimpleName(e.getLabel());
        usageLabel(identifier);
        return new BreakStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNamebreak),
          identifier,
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.DO_STATEMENT: {
        DoStatement e = (DoStatement) node;
        return new DoWhileStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNamedo),
          convertStatement(e.getBody()),
          firstTokenAfter(e.getBody(), TerminalTokens.TokenNamewhile),
          firstTokenBefore(e.getExpression(), TerminalTokens.TokenNameLPAREN),
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameRPAREN),
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.ASSERT_STATEMENT: {
        AssertStatement e = (AssertStatement) node;
        if (e.getMessage() != null) {
          return new AssertStatementTreeImpl(
            firstTokenBefore(e.getMessage(), TerminalTokens.TokenNameCOLON),
            convertExpression(e.getMessage())
          ).complete(
            firstTokenIn(e, TerminalTokens.TokenNameassert),
            convertExpression(e.getExpression()),
            lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
          );
        } else {
          return new AssertStatementTreeImpl(
            firstTokenIn(e, TerminalTokens.TokenNameassert),
            convertExpression(e.getExpression()),
            lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
          );
        }
      }
      case ASTNode.SWITCH_STATEMENT: {
        SwitchStatement e = (SwitchStatement) node;
        return new SwitchStatementTreeImpl(new SwitchExpressionTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNameswitch),
          firstTokenBefore(e.getExpression(), TerminalTokens.TokenNameLPAREN),
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameRPAREN),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameLBRACE),
          convertSwitchStatements(e.statements()),
          lastTokenIn(e, TerminalTokens.TokenNameRBRACE)
        ));
      }
      case ASTNode.SYNCHRONIZED_STATEMENT: {
        SynchronizedStatement e = (SynchronizedStatement) node;
        return new SynchronizedStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNamesynchronized),
          firstTokenBefore(e.getExpression(), TerminalTokens.TokenNameLPAREN),
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameRPAREN),
          convertBlock(e.getBody())
        );
      }
      case ASTNode.EXPRESSION_STATEMENT: {
        ExpressionStatement e = (ExpressionStatement) node;
        return new ExpressionStatementTreeImpl(
          convertExpression(e.getExpression()),
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.CONTINUE_STATEMENT: {
        ContinueStatement e = (ContinueStatement) node;
        SimpleName label = e.getLabel();
        IdentifierTreeImpl i = label == null ? null : convertSimpleName(label);
        usageLabel(i);
        return new ContinueStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNamecontinue),
          i,
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.LABELED_STATEMENT: {
        LabeledStatement e = (LabeledStatement) node;
        IdentifierTreeImpl i = convertSimpleName(e.getLabel());

        JLabelSymbol symbol = new JLabelSymbol(i.name());
        labels.push(symbol);

        LabeledStatementTreeImpl t = new LabeledStatementTreeImpl(
          i,
          firstTokenAfter(e.getLabel(), TerminalTokens.TokenNameCOLON),
          convertStatement(e.getBody())
        );

        labels.pop();
        symbol.declaration = t;
        t.labelSymbol = symbol;
        return t;
      }
      case ASTNode.ENHANCED_FOR_STATEMENT: {
        EnhancedForStatement e = (EnhancedForStatement) node;
        return new ForEachStatementImpl(
          firstTokenIn(e, TerminalTokens.TokenNamefor),
          firstTokenBefore(e.getParameter(), TerminalTokens.TokenNameLPAREN),
          createVariable(e.getParameter()),
          firstTokenAfter(e.getParameter(), TerminalTokens.TokenNameCOLON),
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameRPAREN),
          convertStatement(e.getBody())
        );
      }
      case ASTNode.THROW_STATEMENT: {
        ThrowStatement e = (ThrowStatement) node;
        return new ThrowStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNamethrow),
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.TRY_STATEMENT: {
        TryStatement e = (TryStatement) node;

        List<CatchTree> catches = new ArrayList<>();
        for (Object o : e.catchClauses()) {
          CatchClause e2 = (CatchClause) o;
          catches.add(new CatchTreeImpl(
            firstTokenIn(e2, TerminalTokens.TokenNamecatch),
            firstTokenBefore(e2.getException(), TerminalTokens.TokenNameLPAREN),
            createVariable(e2.getException()),
            firstTokenAfter(e2.getException(), TerminalTokens.TokenNameRPAREN),
            convertBlock(e2.getBody())
          ));
        }

        ResourceListTreeImpl resources = new ResourceListTreeImpl(
          new ArrayList<>(), new ArrayList<>()
        );
        for (int i = 0; i < e.resources().size(); i++) {
          Expression o = (Expression) e.resources().get(i);
          if (ASTNode.VARIABLE_DECLARATION_EXPRESSION == o.getNodeType()) {
            addVariableToList(
              (VariableDeclarationExpression) o,
              resources
            );
          } else {
            resources.add(convertExpression(o));
          }
          if (i < e.resources().size() - 1) {
            resources.separators().add(firstTokenAfter(o, TerminalTokens.TokenNameSEMICOLON));
          } else {
            int tokenIndex = tokenManager.firstIndexBefore(e.getBody(), TerminalTokens.TokenNameRPAREN);
            while (true) {
              Token token;
              do {
                tokenIndex--;
                token = tokenManager.get(tokenIndex);
              } while (token.isComment());
              if (token.tokenType == TerminalTokens.TokenNameSEMICOLON) {
                resources.separators().add(
                  createSyntaxToken(tokenIndex)
                );
              } else {
                break;
              }
            }
          }
        }

        Block f = e.getFinally();
        return new TryStatementTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNametry),
          e.resources().isEmpty() ? null : firstTokenIn(e, TerminalTokens.TokenNameLPAREN),
          resources,
          e.resources().isEmpty() ? null : firstTokenBefore(e.getBody(), TerminalTokens.TokenNameRPAREN),
          convertBlock(e.getBody()),
          catches,
          f == null ? null : firstTokenBefore(f, TerminalTokens.TokenNamefinally),
          f == null ? null : convertBlock(f)
        );
      }
      case ASTNode.TYPE_DECLARATION_STATEMENT: {
        TypeDeclarationStatement e = (TypeDeclarationStatement) node;
        return convertTypeDeclaration(e.getDeclaration());
      }
      case ASTNode.CONSTRUCTOR_INVOCATION: {
        ConstructorInvocation e = (ConstructorInvocation) node;

        ArgumentListTreeImpl arguments = convertArguments(
          e.arguments().isEmpty() ? lastTokenIn(e, TerminalTokens.TokenNameLPAREN) : firstTokenBefore((ASTNode) e.arguments().get(0), TerminalTokens.TokenNameLPAREN),
          e.arguments(),
          lastTokenIn(e, TerminalTokens.TokenNameRPAREN)
        );

        IdentifierTreeImpl i = new IdentifierTreeImpl(e.arguments().isEmpty()
          ? lastTokenIn(e, TerminalTokens.TokenNamethis)
          : firstTokenBefore((ASTNode) e.arguments().get(0), TerminalTokens.TokenNamethis));
        MethodInvocationTreeImpl t = new MethodInvocationTreeImpl(
          i,
          convertTypeArguments(e.typeArguments()),
          arguments
        );
        t.methodBinding = e.resolveConstructorBinding();
        if (t.methodBinding != null) {
          t.typeBinding = t.methodBinding.getDeclaringClass();
          t.methodBinding = excludeRecovery(t.methodBinding, arguments.size());
        }
        i.binding = t.methodBinding;
        usage(i.binding, i);
        return new ExpressionStatementTreeImpl(
          t,
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.SUPER_CONSTRUCTOR_INVOCATION: {
        SuperConstructorInvocation e = (SuperConstructorInvocation) node;

        IdentifierTreeImpl i = new IdentifierTreeImpl(firstTokenIn(e, TerminalTokens.TokenNamesuper));
        ExpressionTree methodSelect = i;
        if (e.getExpression() != null) {
          methodSelect = new MemberSelectExpressionTreeImpl(
            convertExpression(e.getExpression()),
            firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameDOT),
            i
          );
        }

        ArgumentListTreeImpl arguments = convertArguments(
          firstTokenIn(e, TerminalTokens.TokenNameLPAREN),
          e.arguments(),
          lastTokenIn(e, TerminalTokens.TokenNameRPAREN)
        );

        MethodInvocationTreeImpl t = new MethodInvocationTreeImpl(
          methodSelect,
          convertTypeArguments(e.typeArguments()),
          arguments
        );
        t.methodBinding = e.resolveConstructorBinding();
        if (t.methodBinding != null) {
          t.typeBinding = t.methodBinding.getDeclaringClass();
          t.methodBinding = excludeRecovery(t.methodBinding, arguments.size());
        }
        i.binding = t.methodBinding;
        usage(i.binding, i);
        return new ExpressionStatementTreeImpl(
          t,
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      case ASTNode.YIELD_STATEMENT: {
        YieldStatement e = (YieldStatement) node;
        if (e.isImplicit()) {
          return new ExpressionStatementTreeImpl(
            convertExpression(e.getExpression()),
            lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
          );
        }
        return new BreakStatementTreeImpl(
          firstTokenIn(e, ANY_TOKEN),
          convertExpression(e.getExpression()),
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        );
      }
      default:
        throw new IllegalStateException(ASTNode.nodeClassForType(node.getNodeType()).toString());
    }
  }

