  private void processBodyDeclaration(ASTNode node, List<Tree> members) {
    final int lastTokenIndex;

    switch (node.getNodeType()) {
      default:
        throw new IllegalStateException(ASTNode.nodeClassForType(node.getNodeType()).toString());
      case ASTNode.ANNOTATION_TYPE_DECLARATION:
      case ASTNode.ENUM_DECLARATION:
      case ASTNode.TYPE_DECLARATION: {
        members.add(convertTypeDeclaration((AbstractTypeDeclaration) node));
        lastTokenIndex = tokenManager.lastIndexIn(node, TerminalTokens.TokenNameRBRACE);
        break;
      }
      case ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION: {
        AnnotationTypeMemberDeclaration e = (AnnotationTypeMemberDeclaration) node;
        members.add(new MethodTreeImpl(
          new FormalParametersListTreeImpl(
            firstTokenAfter(e.getName(), TerminalTokens.TokenNameLPAREN),
            firstTokenAfter(e.getName(), TerminalTokens.TokenNameRPAREN)
          ),
          e.getDefault() == null ? null : firstTokenBefore(e.getDefault(), TerminalTokens.TokenNamedefault),
          e.getDefault() == null ? null : convertExpression(e.getDefault())
        ).complete(
          convertType(e.getType()),
          convertSimpleName(e.getName()),
          lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON)
        ).completeWithModifiers(
          convertModifiers(e.modifiers())
        ));
        lastTokenIndex = tokenManager.lastIndexIn(node, TerminalTokens.TokenNameSEMICOLON);
        break;
      }
      case ASTNode.INITIALIZER: {
        Initializer e = (Initializer) node;
        BlockTreeImpl blockTree = convertBlock(e.getBody());
        if (org.eclipse.jdt.core.dom.Modifier.isStatic(e.getModifiers())) {
          members.add(new StaticInitializerTreeImpl(
            firstTokenIn(e, TerminalTokens.TokenNamestatic),
            (InternalSyntaxToken) blockTree.openBraceToken(),
            blockTree.body(),
            (InternalSyntaxToken) blockTree.closeBraceToken()
          ));
        } else {
          members.add(new BlockTreeImpl(
            Tree.Kind.INITIALIZER,
            (InternalSyntaxToken) blockTree.openBraceToken(),
            blockTree.body(),
            (InternalSyntaxToken) blockTree.closeBraceToken()
          ));
        }
        lastTokenIndex = tokenManager.lastIndexIn(node, TerminalTokens.TokenNameRBRACE);
        break;
      }
      case ASTNode.METHOD_DECLARATION: {
        MethodDeclaration e = (MethodDeclaration) node;

        FormalParametersListTreeImpl parameters = new FormalParametersListTreeImpl(
          firstTokenAfter(e.getName(), TerminalTokens.TokenNameLPAREN),
          firstTokenAfter(
            e.parameters().isEmpty() ? e.getName() : (ASTNode) e.parameters().get(e.parameters().size() - 1),
            TerminalTokens.TokenNameRPAREN
          ));
        for (int i = 0; i < e.parameters().size(); i++) {
          SingleVariableDeclaration o = (SingleVariableDeclaration) e.parameters().get(i);
          VariableTreeImpl parameter = createVariable(o);
          if (i < e.parameters().size() - 1) {
            parameter.setEndToken(firstTokenAfter(o, TerminalTokens.TokenNameCOMMA));
          }
          parameters.add(parameter);
        }

        QualifiedIdentifierListTreeImpl thrownExceptionTypes = new QualifiedIdentifierListTreeImpl(new ArrayList<>(), new ArrayList<>());
        for (int i = 0; i < e.thrownExceptionTypes().size(); i++) {
          Type o = (Type) e.thrownExceptionTypes().get(i);
          if (i > 0) {
            thrownExceptionTypes.separators().add(firstTokenBefore(o, TerminalTokens.TokenNameCOMMA));
          }
          thrownExceptionTypes.add(convertType(o));
        }

        MethodTreeImpl t = new MethodTreeImpl(
          applyExtraDimensions(convertType(e.getReturnType2()), e.extraDimensions()),
          convertSimpleName(e.getName()),
          parameters,
          e.thrownExceptionTypes().isEmpty() ? null : firstTokenBefore((Type) e.thrownExceptionTypes().get(0), TerminalTokens.TokenNamethrows),
          thrownExceptionTypes,
          convertBlock(e.getBody()),
          e.getBody() == null ? lastTokenIn(e, TerminalTokens.TokenNameSEMICOLON) : null
        ).completeWithModifiers(
          convertModifiers(e.modifiers())
        ).completeWithTypeParameters(
          convertTypeParameters(e.typeParameters())
        );
        t.methodBinding = e.resolveBinding();

        members.add(t);
        lastTokenIndex = tokenManager.lastIndexIn(node, e.getBody() == null ? TerminalTokens.TokenNameSEMICOLON : TerminalTokens.TokenNameRBRACE);
        break;
      }
      case ASTNode.FIELD_DECLARATION: {
        FieldDeclaration fieldDeclaration = (FieldDeclaration) node;
        ModifiersTreeImpl modifiers = convertModifiers(fieldDeclaration.modifiers());
        TypeTree type = convertType(fieldDeclaration.getType());

        for (int i = 0; i < fieldDeclaration.fragments().size(); i++) {
          VariableDeclarationFragment fragment = (VariableDeclarationFragment) fieldDeclaration.fragments().get(i);
          VariableTreeImpl t = new VariableTreeImpl(
            convertSimpleName(fragment.getName())
          ).completeModifiersAndType(
            modifiers,
            applyExtraDimensions(type, fragment.extraDimensions())
          );
          if (fragment.getInitializer() != null) {
            t.completeTypeAndInitializer(
              t.type(),
              firstTokenAfter(fragment.getName(), TerminalTokens.TokenNameEQUAL),
              convertExpression(fragment.getInitializer())
            );
          }

          t.setEndToken(
            firstTokenAfter(fragment, i + 1 < fieldDeclaration.fragments().size() ? TerminalTokens.TokenNameCOMMA : TerminalTokens.TokenNameSEMICOLON)
          );

          members.add(t);
        }
        lastTokenIndex = tokenManager.lastIndexIn(node, TerminalTokens.TokenNameSEMICOLON);
        break;
      }
    }

    addEmptyDeclarationsToList(lastTokenIndex, members);
  }

