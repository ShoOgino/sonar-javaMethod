  IAnnotationBinding[] resolvePackageAnnotations(String packageName) {
    // See org.eclipse.jdt.core.dom.PackageBinding#getAnnotations()
    try {
      Method methodGetBindingResolver = ast.getClass()
        .getDeclaredMethod("getBindingResolver");
      methodGetBindingResolver.setAccessible(true);
      Object bindingResolver = methodGetBindingResolver.invoke(ast);

      Method methodLookupEnvironment = bindingResolver.getClass()
        .getDeclaredMethod("lookupEnvironment");
      methodLookupEnvironment.setAccessible(true);
      LookupEnvironment lookupEnvironment = (LookupEnvironment) methodLookupEnvironment.invoke(bindingResolver);

      NameEnvironmentAnswer answer = lookupEnvironment.nameEnvironment.findType(
        TypeConstants.PACKAGE_INFO_NAME,
        CharOperation.splitOn('.', packageName.toCharArray())
      );
      if (answer == null) {
        return new IAnnotationBinding[0];
      }

      IBinaryType type = answer.getBinaryType();
      if (type == null) {
        // Can happen for instance with ant, as ant only generates 'package-info.class'
        // when there is annotations in the package-info.java file.
        return new IAnnotationBinding[0];
      }
      IBinaryAnnotation[] binaryAnnotations = type.getAnnotations();
      AnnotationBinding[] binaryInstances =
        BinaryTypeBinding.createAnnotations(binaryAnnotations, lookupEnvironment, type.getMissingTypeNames());
      AnnotationBinding[] allInstances =
        AnnotationBinding.addStandardAnnotations(binaryInstances, type.getTagBits(), lookupEnvironment);

      Method methodGetAnnotationInstance = bindingResolver.getClass()
        .getDeclaredMethod("getAnnotationInstance", AnnotationBinding.class);
      methodGetAnnotationInstance.setAccessible(true);

      IAnnotationBinding[] domInstances = new IAnnotationBinding[allInstances.length];
      for (int i = 0; i < allInstances.length; i++) {
        // FIXME can be null if annotation can not be resolved e.g. due to incomplete classpath
        domInstances[i] = (IAnnotationBinding) methodGetAnnotationInstance.invoke(bindingResolver, allInstances[i]);
      }
      return domInstances;

    } catch (ReflectiveOperationException e) {
      throw new RuntimeException(e);
    }
  }

