  private TypeTree convertType(Type node) {
    switch (node.getNodeType()) {
      case ASTNode.PRIMITIVE_TYPE: {
        PrimitiveType e = (PrimitiveType) node;
        final JavaTree.PrimitiveTypeTreeImpl t;
        switch (e.getPrimitiveTypeCode().toString()) {
          case "byte":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNamebyte));
            break;
          case "short":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNameshort));
            break;
          case "char":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNamechar));
            break;
          case "int":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNameint));
            break;
          case "long":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNamelong));
            break;
          case "float":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNamefloat));
            break;
          case "double":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNamedouble));
            break;
          case "boolean":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNameboolean));
            break;
          case "void":
            t = new JavaTree.PrimitiveTypeTreeImpl(lastTokenIn(e, TerminalTokens.TokenNamevoid));
            break;
          default:
            throw new IllegalStateException(e.getPrimitiveTypeCode().toString());
        }
        t.complete(
          convertAnnotations(e.annotations())
        );
        t.typeBinding = e.resolveBinding();
        return t;
      }
      case ASTNode.SIMPLE_TYPE: {
        SimpleType e = (SimpleType) node;
        List<AnnotationTree> annotations = new ArrayList<>();
        for (Object o : e.annotations()) {
          annotations.add((AnnotationTree) convertExpression(
            ((Annotation) o)
          ));
        }
        JavaTree.AnnotatedTypeTree t = e.isVar() ? convertVarType(e) : (JavaTree.AnnotatedTypeTree) convertExpression(e.getName());
        t.complete(annotations);
        // typeBinding is assigned by convertVarType or convertExpression
        return t;
      }
      case ASTNode.UNION_TYPE: {
        UnionType e = (UnionType) node;
        TypeUnionListTreeImpl alternatives = new TypeUnionListTreeImpl(
          new ArrayList<>(), new ArrayList<>()
        );
        for (int i = 0; i < e.types().size(); i++) {
          Type o = (Type) e.types().get(i);
          alternatives.add(convertType(o));
          if (i < e.types().size() - 1) {
            alternatives.separators().add(firstTokenAfter(o, TerminalTokens.TokenNameOR));
          }
        }
        JavaTree.UnionTypeTreeImpl t = new JavaTree.UnionTypeTreeImpl(alternatives);
        t.typeBinding = e.resolveBinding();
        return t;
      }
      case ASTNode.ARRAY_TYPE: {
        ArrayType e = (ArrayType) node;
        @Nullable ITypeBinding elementTypeBinding = e.getElementType().resolveBinding();
        TypeTree t = convertType(e.getElementType());
        int tokenIndex = tokenManager.firstIndexAfter(e.getElementType(), TerminalTokens.TokenNameLBRACKET);
        for (int i = 0; i < e.dimensions().size(); i++) {
          if (i > 0) {
            tokenIndex = nextTokenIndex(tokenIndex, TerminalTokens.TokenNameLBRACKET);
          }
          t = new JavaTree.ArrayTypeTreeImpl(
            t,
            (List) convertAnnotations(((Dimension) e.dimensions().get(i)).annotations()),
            createSyntaxToken(tokenIndex),
            createSyntaxToken(nextTokenIndex(tokenIndex, TerminalTokens.TokenNameRBRACKET))
          );
          if (elementTypeBinding != null) {
            ((JavaTree.ArrayTypeTreeImpl) t).typeBinding = elementTypeBinding.createArrayType(i + 1);
          }
        }
        return t;
      }
      case ASTNode.PARAMETERIZED_TYPE: {
        ParameterizedType e = (ParameterizedType) node;
        int pos = e.getStartPosition() + e.getLength() - 1;
        JavaTree.ParameterizedTypeTreeImpl t = new JavaTree.ParameterizedTypeTreeImpl(
          convertType(e.getType()),
          convertTypeArguments(
            firstTokenAfter(e.getType(), TerminalTokens.TokenNameLESS),
            e.typeArguments(),
            new InternalSyntaxToken(
              compilationUnit.getLineNumber(pos),
              compilationUnit.getColumnNumber(pos),
              ">",
              /* TODO */ Collections.emptyList(),
              0, 0, false
            )
          )
        );
        t.typeBinding = e.resolveBinding();
        return t;
      }
      case ASTNode.QUALIFIED_TYPE: {
        QualifiedType e = (QualifiedType) node;
        MemberSelectExpressionTreeImpl t = new MemberSelectExpressionTreeImpl(
          (ExpressionTree) convertType(e.getQualifier()),
          firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNameDOT),
          convertSimpleName(e.getName())
        );
        ((IdentifierTreeImpl) t.identifier()).complete(
          convertAnnotations(e.annotations())
        );
        t.typeBinding = e.resolveBinding();
        return t;
      }
      case ASTNode.NAME_QUALIFIED_TYPE: {
        NameQualifiedType e = (NameQualifiedType) node;
        MemberSelectExpressionTreeImpl t = new MemberSelectExpressionTreeImpl(
          convertExpression(e.getQualifier()),
          firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNameDOT),
          convertSimpleName(e.getName())
        );
        ((IdentifierTreeImpl) t.identifier()).complete(
          convertAnnotations(e.annotations())
        );
        t.typeBinding = e.resolveBinding();
        return t;
      }
      case ASTNode.WILDCARD_TYPE: {
        WildcardType e = (WildcardType) node;
        final InternalSyntaxToken questionToken = e.annotations().isEmpty()
          ? firstTokenIn(e, TerminalTokens.TokenNameQUESTION)
          : firstTokenAfter((ASTNode) e.annotations().get(e.annotations().size() - 1), TerminalTokens.TokenNameQUESTION);
        JavaTree.WildcardTreeImpl t;
        Type bound = e.getBound();
        if (bound == null) {
          t = new JavaTree.WildcardTreeImpl(
            questionToken
          );
        } else {
          t = new JavaTree.WildcardTreeImpl(
            e.isUpperBound() ? Tree.Kind.EXTENDS_WILDCARD : Tree.Kind.SUPER_WILDCARD,
            e.isUpperBound() ? firstTokenBefore(bound, TerminalTokens.TokenNameextends) : firstTokenBefore(bound, TerminalTokens.TokenNamesuper),
            convertType(bound)
          ).complete(
            questionToken
          );
        }
        t.complete(
          convertAnnotations(e.annotations())
        );
        t.typeBinding = e.resolveBinding();
        return t;
      }
      default:
        throw new IllegalStateException(ASTNode.nodeClassForType(node.getNodeType()).toString());
    }
  }

