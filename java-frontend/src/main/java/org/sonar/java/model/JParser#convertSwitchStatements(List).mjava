  private List<CaseGroupTreeImpl> convertSwitchStatements(List list) {
    List<CaseGroupTreeImpl> groups = new ArrayList<>();
    List<CaseLabelTreeImpl> caselabels = null;
    BlockStatementListTreeImpl body = null;
    for (Object o : list) {
      if (o instanceof SwitchCase) {
        if (caselabels == null) {
          caselabels = new ArrayList<>();
          body = new BlockStatementListTreeImpl(new ArrayList<>());
        }

        SwitchCase c = (SwitchCase) o;

        final List expressionsToConvert;
        if (c.getAST().isPreviewEnabled()) {
          expressionsToConvert = c.expressions();
        } else if (c.isDefault()) {
          expressionsToConvert = Collections.emptyList();
        } else {
          expressionsToConvert = Collections.singletonList(c.getExpression());
        }

        List<ExpressionTree> expressions = new ArrayList<>();
        for (Object oo : expressionsToConvert) {
          expressions.add(
            convertExpression((Expression) oo)
          );
        }

        caselabels.add(new CaseLabelTreeImpl(
          firstTokenIn(c, c.isDefault() ? TerminalTokens.TokenNamedefault : TerminalTokens.TokenNamecase),
          expressions,
          lastTokenIn(c, /* TerminalTokens.TokenNameCOLON or TerminalTokens.TokenNameARROW */ ANY_TOKEN)
        ));
      } else {
        if (caselabels != null) {
          groups.add(new CaseGroupTreeImpl(
            caselabels,
            body
          ));
        }
        caselabels = null;
        addStatementToList((Statement) o, body);
      }
    }
    if (caselabels != null) {
      groups.add(new CaseGroupTreeImpl(
        caselabels,
        body
      ));
    }
    return groups;
  }

