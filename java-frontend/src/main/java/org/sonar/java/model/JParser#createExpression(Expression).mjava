  private ExpressionTree createExpression(Expression node) {
    switch (node.getNodeType()) {
      default:
        throw new IllegalStateException(ASTNode.nodeClassForType(node.getNodeType()).toString());
      case ASTNode.SIMPLE_NAME: {
        SimpleName e = (SimpleName) node;
        IdentifierTreeImpl t = convertSimpleName(e);
        usage(t.binding, t);
        return t;
      }
      case ASTNode.QUALIFIED_NAME: {
        QualifiedName e = (QualifiedName) node;
        IdentifierTreeImpl rhs = convertSimpleName(e.getName());
        usage(rhs.binding, rhs);
        return new MemberSelectExpressionTreeImpl(
          convertExpression(e.getQualifier()),
          firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNameDOT),
          rhs
        );
      }
      case ASTNode.FIELD_ACCESS: {
        FieldAccess e = (FieldAccess) node;
        IdentifierTreeImpl rhs = convertSimpleName(e.getName());
        usage(rhs.binding, rhs);
        return new MemberSelectExpressionTreeImpl(
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameDOT),
          rhs
        );
      }
      case ASTNode.SUPER_FIELD_ACCESS: {
        SuperFieldAccess e = (SuperFieldAccess) node;
        IdentifierTreeImpl rhs = convertSimpleName(e.getName());
        usage(rhs.binding, rhs);
        if (e.getQualifier() == null) {
          // super.name
          return new MemberSelectExpressionTreeImpl(
            new IdentifierTreeImpl(firstTokenIn(e, TerminalTokens.TokenNamesuper)),
            firstTokenIn(e, TerminalTokens.TokenNameDOT),
            rhs
          );
        } else {
          // qualifier.super.name
          return new MemberSelectExpressionTreeImpl(
            new MemberSelectExpressionTreeImpl(
              convertExpression(e.getQualifier()),
              firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNameDOT),
              new IdentifierTreeImpl(firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNamesuper))
            ),
            firstTokenBefore(e.getName(), TerminalTokens.TokenNameDOT),
            rhs
          );
        }
      }
      case ASTNode.THIS_EXPRESSION: {
        ThisExpression e = (ThisExpression) node;
        if (e.getQualifier() == null) {
          return new IdentifierTreeImpl(
            firstTokenIn(e, TerminalTokens.TokenNamethis)
          );
        } else {
          IdentifierTreeImpl keywordThis = new IdentifierTreeImpl(
            firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNamethis)
          );
          keywordThis.typeBinding = e.resolveTypeBinding();
          return new MemberSelectExpressionTreeImpl(
            convertExpression(e.getQualifier()),
            firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNameDOT),
            keywordThis
          );
        }
      }
      case ASTNode.TYPE_LITERAL: {
        TypeLiteral e = (TypeLiteral) node;
        return new MemberSelectExpressionTreeImpl(
          (ExpressionTree) convertType(e.getType()),
          lastTokenIn(e, TerminalTokens.TokenNameDOT),
          new IdentifierTreeImpl(
            lastTokenIn(e, TerminalTokens.TokenNameclass)
          )
        );
      }
      case ASTNode.ARRAY_ACCESS: {
        ArrayAccess e = (ArrayAccess) node;
        return new ArrayAccessExpressionTreeImpl(
          new ArrayDimensionTreeImpl(
            firstTokenBefore(e.getIndex(), TerminalTokens.TokenNameLBRACKET),
            convertExpression(e.getIndex()),
            firstTokenAfter(e.getIndex(), TerminalTokens.TokenNameRBRACKET)
          )
        ).complete(
          convertExpression(e.getArray())
        );
      }
      case ASTNode.ARRAY_CREATION: {
        ArrayCreation e = (ArrayCreation) node;

        List<ArrayDimensionTree> dimensions = new ArrayList<>();
        for (Object o : e.dimensions()) {
          dimensions.add(new ArrayDimensionTreeImpl(
            firstTokenBefore((Expression) o, TerminalTokens.TokenNameLBRACKET),
            convertExpression((Expression) o),
            firstTokenAfter((Expression) o, TerminalTokens.TokenNameRBRACKET)
          ));
        }

        InitializerListTreeImpl initializers = new InitializerListTreeImpl(new ArrayList<>(), new ArrayList<>());
        if (e.getInitializer() != null) {
          assert dimensions.isEmpty();

          TypeTree type = convertType(e.getType());
          while (type.is(Tree.Kind.ARRAY_TYPE)) {
            ArrayTypeTree arrayType = (ArrayTypeTree) type;
            dimensions.add(/* TODO suboptimal */ 0, new ArrayDimensionTreeImpl(
              arrayType.openBracketToken(),
              null,
              arrayType.closeBracketToken()
            ));
            type = arrayType.type();
          }

          return ((NewArrayTreeImpl) convertExpression(e.getInitializer()))
            .completeWithNewKeyword(firstTokenIn(e, TerminalTokens.TokenNamenew))
            .complete(type)
            .completeDimensions(dimensions);
        } else {
          TypeTree type = convertType(e.getType());
          while (type.is(Tree.Kind.ARRAY_TYPE)) {
            type = ((ArrayTypeTree) type).type();
          }

          return new NewArrayTreeImpl(
            dimensions,
            initializers
          ).complete(
            type
          ).completeWithNewKeyword(
            firstTokenIn(e, TerminalTokens.TokenNamenew)
          );
        }
      }
      case ASTNode.ARRAY_INITIALIZER: {
        ArrayInitializer e = (ArrayInitializer) node;

        InitializerListTreeImpl initializers = new InitializerListTreeImpl(new ArrayList<>(), new ArrayList<>());
        for (int i = 0; i < e.expressions().size(); i++) {
          Expression o = (Expression) e.expressions().get(i);
          initializers.add(convertExpression(o));
          final int commaTokenIndex = firstTokenIndexAfter(o);
          if (tokenManager.get(commaTokenIndex).tokenType == TerminalTokens.TokenNameCOMMA) {
            initializers.separators().add(firstTokenAfter(o, TerminalTokens.TokenNameCOMMA));
          }
        }
        return new NewArrayTreeImpl(
          Collections.emptyList(),
          initializers
        ).completeWithCurlyBraces(
          firstTokenIn(e, TerminalTokens.TokenNameLBRACE),
          lastTokenIn(e, TerminalTokens.TokenNameRBRACE)
        );
      }
      case ASTNode.ASSIGNMENT: {
        Assignment e = (Assignment) node;
        Op op = operators.get(e.getOperator());
        return new AssignmentExpressionTreeImpl(
          op.kind,
          convertExpression(e.getLeftHandSide()),
          firstTokenAfter(e.getLeftHandSide(), op.tokenType),
          convertExpression(e.getRightHandSide())
        );
      }
      case ASTNode.CAST_EXPRESSION: {
        CastExpression e = (CastExpression) node;
        if (e.getType().getNodeType() == ASTNode.INTERSECTION_TYPE) {
          IntersectionType intersectionType = (IntersectionType) e.getType();
          TypeTree type = convertType((Type) intersectionType.types().get(0));
          BoundListTreeImpl bounds = new BoundListTreeImpl(
            new ArrayList<>(), new ArrayList<>()
          );
          for (int i = 1; i < intersectionType.types().size(); i++) {
            Type o = (Type) intersectionType.types().get(i);
            bounds.add(
              convertType(o)
            );
            if (i < intersectionType.types().size() - 1) {
              bounds.separators().add(
                firstTokenAfter(o, TerminalTokens.TokenNameAND)
              );
            }
          }
          return new TypeCastExpressionTreeImpl(
            type,
            firstTokenAfter((Type) intersectionType.types().get(0), TerminalTokens.TokenNameAND),
            bounds,
            firstTokenAfter(e.getType(), TerminalTokens.TokenNameRPAREN),
            convertExpression(e.getExpression())
          ).complete(
            firstTokenBefore(e.getType(), TerminalTokens.TokenNameLPAREN)
          );
        } else {
          return new TypeCastExpressionTreeImpl(
            convertType(e.getType()),
            firstTokenAfter(e.getType(), TerminalTokens.TokenNameRPAREN),
            convertExpression(e.getExpression())
          ).complete(
            firstTokenIn(e, TerminalTokens.TokenNameLPAREN)
          );
        }
      }
      case ASTNode.CLASS_INSTANCE_CREATION: {
        ClassInstanceCreation e = (ClassInstanceCreation) node;

        ArgumentListTreeImpl arguments = convertArguments(
          firstTokenAfter(e.getType(), TerminalTokens.TokenNameLPAREN),
          e.arguments(),
          firstTokenAfter(e.arguments().isEmpty() ? e.getType() : (ASTNode) e.arguments().get(e.arguments().size() - 1), TerminalTokens.TokenNameRPAREN)
        );

        ClassTreeImpl classBody = null;
        if (e.getAnonymousClassDeclaration() != null) {
          List<Tree> members = new ArrayList<>();
          for (Object o : e.getAnonymousClassDeclaration().bodyDeclarations()) {
            processBodyDeclaration((BodyDeclaration) o, members);
          }
          classBody = new ClassTreeImpl(
            Tree.Kind.CLASS,
            firstTokenIn(e.getAnonymousClassDeclaration(), TerminalTokens.TokenNameLBRACE),
            members,
            lastTokenIn(e.getAnonymousClassDeclaration(), TerminalTokens.TokenNameRBRACE)
          );
          classBody.typeBinding = e.getAnonymousClassDeclaration().resolveBinding();
          declaration(classBody.typeBinding, classBody);
        }

        NewClassTreeImpl t = new NewClassTreeImpl(
          arguments,
          classBody
        ).completeWithNewKeyword(
          e.getExpression() == null ? firstTokenIn(e, TerminalTokens.TokenNamenew) : firstTokenAfter(e.getExpression(), TerminalTokens.TokenNamenew)
        ).completeWithIdentifier(
          convertType(e.getType())
        ).completeWithTypeArguments(
          convertTypeArguments(e.typeArguments())
        );
        if (e.getExpression() != null) {
          t.completeWithEnclosingExpression(convertExpression(e.getExpression()));
          t.completeWithDotToken(firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameDOT));
        }

        IdentifierTreeImpl i = (IdentifierTreeImpl) t.getConstructorIdentifier();
        // TODO should be constructor of i.typeBinding instead of constructor of anonymous class ?
        i.binding = e.resolveConstructorBinding();
        usage(i.binding, i);

        return t;
      }
      case ASTNode.CONDITIONAL_EXPRESSION: {
        ConditionalExpression e = (ConditionalExpression) node;
        return new ConditionalExpressionTreeImpl(
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameQUESTION),
          convertExpression(e.getThenExpression()),
          firstTokenAfter(e.getThenExpression(), TerminalTokens.TokenNameCOLON),
          convertExpression(e.getElseExpression())
        ).complete(
          convertExpression(e.getExpression())
        );
      }
      case ASTNode.INFIX_EXPRESSION: {
        InfixExpression e = (InfixExpression) node;
        Op op = operators.get(e.getOperator());
        BinaryExpressionTreeImpl t = new BinaryExpressionTreeImpl(
          op.kind,
          convertExpression(e.getLeftOperand()),
          firstTokenAfter(e.getLeftOperand(), op.tokenType),
          convertExpression(e.getRightOperand())
        );
        for (Object o : e.extendedOperands()) {
          Expression e2 = (Expression) o;
          t.typeBinding = e.resolveTypeBinding();
          t = new BinaryExpressionTreeImpl(
            op.kind,
            t,
            firstTokenBefore(e2, op.tokenType),
            convertExpression(e2)
          );
        }
        return t;
      }
      case ASTNode.METHOD_INVOCATION: {
        MethodInvocation e = (MethodInvocation) node;

        ArgumentListTreeImpl arguments = convertArguments(
          firstTokenAfter(e.getName(), TerminalTokens.TokenNameLPAREN),
          e.arguments(),
          lastTokenIn(e, TerminalTokens.TokenNameRPAREN)
        );

        IdentifierTreeImpl rhs = convertSimpleName(e.getName());
        usage(rhs.binding, rhs);

        ExpressionTree memberSelect;
        if (e.getExpression() == null) {
          memberSelect = rhs;
        } else {
          memberSelect = new MemberSelectExpressionTreeImpl(
            convertExpression(e.getExpression()),
            firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameDOT),
            rhs
          );
        }
        MethodInvocationTreeImpl t = new MethodInvocationTreeImpl(
          memberSelect,
          convertTypeArguments(e.typeArguments()),
          arguments
        );
        t.methodBinding = e.resolveMethodBinding();
        return t;
      }
      case ASTNode.SUPER_METHOD_INVOCATION: {
        SuperMethodInvocation e = (SuperMethodInvocation) node;

        ArgumentListTreeImpl arguments = convertArguments(
          firstTokenIn(e, TerminalTokens.TokenNameLPAREN),
          e.arguments(),
          lastTokenIn(e, TerminalTokens.TokenNameRPAREN)
        );

        IdentifierTreeImpl rhs = convertSimpleName(e.getName());
        usage(rhs.binding, rhs);

        ExpressionTree outermostSelect;
        if (e.getQualifier() == null) {
          outermostSelect = new MemberSelectExpressionTreeImpl(
            new IdentifierTreeImpl(firstTokenIn(e, TerminalTokens.TokenNamesuper)),
            firstTokenIn(e, TerminalTokens.TokenNameDOT),
            rhs
          );
        } else {
          final int firstDotTokenIndex = tokenManager.firstIndexAfter(e.getQualifier(), TerminalTokens.TokenNameDOT);
          outermostSelect = new MemberSelectExpressionTreeImpl(
            new MemberSelectExpressionTreeImpl(
              convertExpression(e.getQualifier()),
              createSyntaxToken(firstDotTokenIndex),
              new IdentifierTreeImpl(firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNamesuper))
            ),
            createSyntaxToken(nextTokenIndex(firstDotTokenIndex, TerminalTokens.TokenNameDOT)),
            rhs
          );
        }

        MethodInvocationTreeImpl t = new MethodInvocationTreeImpl(
          outermostSelect,
          null,
          arguments
        );
        t.methodBinding = e.resolveMethodBinding();
        return t;
      }
      case ASTNode.PARENTHESIZED_EXPRESSION: {
        ParenthesizedExpression e = (ParenthesizedExpression) node;
        return new ParenthesizedTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNameLPAREN),
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameRPAREN)
        );
      }
      case ASTNode.POSTFIX_EXPRESSION: {
        PostfixExpression e = (PostfixExpression) node;
        Op op = operators.get(e.getOperator());
        return new InternalPostfixUnaryExpression(
          op.kind,
          convertExpression(e.getOperand()),
          firstTokenAfter(e.getOperand(), op.tokenType)
        );
      }
      case ASTNode.PREFIX_EXPRESSION: {
        PrefixExpression e = (PrefixExpression) node;
        Op op = operators.get(e.getOperator());
        return new InternalPrefixUnaryExpression(
          op.kind,
          firstTokenIn(e, op.tokenType),
          convertExpression(e.getOperand())
        );
      }
      case ASTNode.INSTANCEOF_EXPRESSION: {
        InstanceofExpression e = (InstanceofExpression) node;
        return new InstanceOfTreeImpl(
          firstTokenAfter(e.getLeftOperand(), TerminalTokens.TokenNameinstanceof),
          convertType(e.getRightOperand())
        ).complete(
          convertExpression(e.getLeftOperand())
        );
      }
      case ASTNode.LAMBDA_EXPRESSION: {
        LambdaExpression e = (LambdaExpression) node;
        List<VariableTree> parameters = new ArrayList<>();
        for (int i = 0; i < e.parameters().size(); i++) {
          VariableDeclaration o = (VariableDeclaration) e.parameters().get(i);
          VariableTreeImpl t;
          if (o.getNodeType() == ASTNode.VARIABLE_DECLARATION_FRAGMENT) {
            t = new VariableTreeImpl(convertSimpleName(o.getName()));
            IVariableBinding variableBinding = o.resolveBinding();
            if (variableBinding != null) {
              t.variableBinding = variableBinding;
              ((InferedTypeTree) t.type()).typeBinding = variableBinding.getType();
              declaration(t.variableBinding, t);
            }
          } else {
            t = createVariable((SingleVariableDeclaration) o);
          }
          parameters.add(t);
          if (i < e.parameters().size() - 1) {
            t.setEndToken(
              firstTokenAfter(o, TerminalTokens.TokenNameCOMMA)
            );
          }
        }
        return new LambdaExpressionTreeImpl(
          e.hasParentheses() ? firstTokenIn(e, TerminalTokens.TokenNameLPAREN) : null,
          parameters,
          e.hasParentheses() ? firstTokenBefore(e.getBody(), TerminalTokens.TokenNameRPAREN) : null,
          firstTokenBefore(e.getBody(), TerminalTokens.TokenNameARROW),
          e.getBody().getNodeType() == ASTNode.BLOCK ? convertBlock((Block) e.getBody()) : convertExpression((Expression) e.getBody())
        );
      }
      case ASTNode.CREATION_REFERENCE: {
        CreationReference e = (CreationReference) node;
        MethodReferenceTreeImpl t = new MethodReferenceTreeImpl(
          convertType(e.getType()),
          lastTokenIn(e, TerminalTokens.TokenNameCOLON_COLON)
        );
        IdentifierTreeImpl i = new IdentifierTreeImpl(lastTokenIn(e, TerminalTokens.TokenNamenew));
        i.binding = e.resolveMethodBinding();
        usage(i.binding, i);
        t.complete(convertTypeArguments(e.typeArguments()), i);
        return t;
      }
      case ASTNode.EXPRESSION_METHOD_REFERENCE: {
        ExpressionMethodReference e = (ExpressionMethodReference) node;
        MethodReferenceTreeImpl t = new MethodReferenceTreeImpl(
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameCOLON_COLON)
        );
        IdentifierTreeImpl i = convertSimpleName(e.getName());
        usage(i.binding, i);
        t.complete(convertTypeArguments(e.typeArguments()), i);
        return t;
      }
      case ASTNode.TYPE_METHOD_REFERENCE: {
        TypeMethodReference e = (TypeMethodReference) node;
        MethodReferenceTreeImpl t = new MethodReferenceTreeImpl(
          convertType(e.getType()),
          firstTokenAfter(e.getType(), TerminalTokens.TokenNameCOLON_COLON)
        );
        IdentifierTreeImpl i = convertSimpleName(e.getName());
        usage(i.binding, i);
        t.complete(convertTypeArguments(e.typeArguments()), i);
        return t;
      }
      case ASTNode.SUPER_METHOD_REFERENCE: {
        SuperMethodReference e = (SuperMethodReference) node;
        MethodReferenceTreeImpl t;
        if (e.getQualifier() != null) {
          t = new MethodReferenceTreeImpl(
            new MemberSelectExpressionTreeImpl(
              convertExpression(e.getQualifier()),
              firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNameDOT),
              new IdentifierTreeImpl(firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNamesuper))
            ),
            firstTokenAfter(e.getQualifier(), TerminalTokens.TokenNameCOLON_COLON)
          );
        } else {
          t = new MethodReferenceTreeImpl(
            new IdentifierTreeImpl(firstTokenIn(e, TerminalTokens.TokenNamesuper)),
            firstTokenIn(e, TerminalTokens.TokenNameCOLON_COLON)
          );
        }
        IdentifierTreeImpl i = convertSimpleName(e.getName());
        usage(i.binding, i);
        t.complete(convertTypeArguments(e.typeArguments()), i);
        return t;
      }
      case ASTNode.SWITCH_EXPRESSION: {
        SwitchExpression e = (SwitchExpression) node;
        return new SwitchExpressionTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNameswitch),
          firstTokenIn(e, TerminalTokens.TokenNameLPAREN),
          convertExpression(e.getExpression()),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameRPAREN),
          firstTokenAfter(e.getExpression(), TerminalTokens.TokenNameLBRACE),
          convertSwitchStatements(e.statements()),
          lastTokenIn(e, TerminalTokens.TokenNameRBRACE)
        );
      }
      case ASTNode.NULL_LITERAL: {
        NullLiteral e = (NullLiteral) node;
        return new LiteralTreeImpl(
          Tree.Kind.NULL_LITERAL,
          firstTokenIn(e, TerminalTokens.TokenNamenull)
        );
      }
      case ASTNode.NUMBER_LITERAL: {
        NumberLiteral e = (NumberLiteral) node;
        int tokenIndex = tokenManager.findIndex(e.getStartPosition(), ANY_TOKEN, true);
        int tokenType = tokenManager.get(tokenIndex).tokenType;
        boolean unaryMinus = tokenType == TerminalTokens.TokenNameMINUS;
        if (unaryMinus) {
          tokenIndex++;
          tokenType = tokenManager.get(tokenIndex).tokenType;
        }
        ExpressionTree result;
        switch (tokenType) {
          default:
            throw new IllegalStateException();
          case TerminalTokens.TokenNameIntegerLiteral:
            result = new LiteralTreeImpl(Tree.Kind.INT_LITERAL, createSyntaxToken(tokenIndex));
            break;
          case TerminalTokens.TokenNameLongLiteral:
            result = new LiteralTreeImpl(Tree.Kind.LONG_LITERAL, createSyntaxToken(tokenIndex));
            break;
          case TerminalTokens.TokenNameFloatingPointLiteral:
            result = new LiteralTreeImpl(Tree.Kind.FLOAT_LITERAL, createSyntaxToken(tokenIndex));
            break;
          case TerminalTokens.TokenNameDoubleLiteral:
            result = new LiteralTreeImpl(Tree.Kind.DOUBLE_LITERAL, createSyntaxToken(tokenIndex));
            break;
        }
        ((LiteralTreeImpl) result).typeBinding = e.resolveTypeBinding();
        if (unaryMinus) {
          result = new InternalPrefixUnaryExpression(Tree.Kind.UNARY_MINUS, createSyntaxToken(tokenIndex - 1), result);
        }
        return result;
      }
      case ASTNode.CHARACTER_LITERAL: {
        CharacterLiteral e = (CharacterLiteral) node;
        return new LiteralTreeImpl(
          Tree.Kind.CHAR_LITERAL,
          firstTokenIn(e, TerminalTokens.TokenNameCharacterLiteral)
        );
      }
      case ASTNode.BOOLEAN_LITERAL: {
        BooleanLiteral e = (BooleanLiteral) node;
        return new LiteralTreeImpl(
          Tree.Kind.BOOLEAN_LITERAL,
          firstTokenIn(e, e.booleanValue() ? TerminalTokens.TokenNametrue : TerminalTokens.TokenNamefalse)
        );
      }
      case ASTNode.STRING_LITERAL: {
        StringLiteral e = (StringLiteral) node;
        return new LiteralTreeImpl(
          Tree.Kind.STRING_LITERAL,
          firstTokenIn(e, TerminalTokens.TokenNameStringLiteral)
        );
      }
      case ASTNode.NORMAL_ANNOTATION:
      case ASTNode.MARKER_ANNOTATION:
      case ASTNode.SINGLE_MEMBER_ANNOTATION: {
        Annotation e = (Annotation) node;
        ArgumentListTreeImpl arguments = new ArgumentListTreeImpl(
          new ArrayList<>(), new ArrayList<>()
        );
        if (e.getNodeType() == ASTNode.SINGLE_MEMBER_ANNOTATION) {
          arguments.add(
            convertExpression(((SingleMemberAnnotation) e).getValue())
          );
          arguments.complete(
            firstTokenIn(e, TerminalTokens.TokenNameLPAREN),
            lastTokenIn(e, TerminalTokens.TokenNameRPAREN)
          );
        } else if (e.getNodeType() == ASTNode.NORMAL_ANNOTATION) {
          for (int i = 0; i < ((NormalAnnotation) e).values().size(); i++) {
            MemberValuePair o = (MemberValuePair) ((NormalAnnotation) e).values().get(i);
            arguments.add(new AssignmentExpressionTreeImpl(
              Tree.Kind.ASSIGNMENT,
              convertSimpleName(o.getName()),
              firstTokenAfter(o.getName(), TerminalTokens.TokenNameEQUAL),
              convertExpression(o.getValue())
            ));
            if (i < ((NormalAnnotation) e).values().size() - 1) {
              arguments.separators().add(
                firstTokenAfter(o, TerminalTokens.TokenNameCOMMA)
              );
            }
          }
          arguments.complete(
            firstTokenIn(e, TerminalTokens.TokenNameLPAREN),
            lastTokenIn(e, TerminalTokens.TokenNameRPAREN)
          );
        }
        return new AnnotationTreeImpl(
          firstTokenIn(e, TerminalTokens.TokenNameAT),
          (TypeTree) convertExpression(e.getTypeName()),
          arguments
        );
      }
    }
  }

