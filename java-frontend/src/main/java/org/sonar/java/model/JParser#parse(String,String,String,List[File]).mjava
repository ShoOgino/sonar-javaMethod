  /**
   * @param unitName see {@link ASTParser#setUnitName(String)}
   * @throws RecognitionException in case of syntax errors
   */
  public static CompilationUnitTree parse(
    String version,
    String unitName,
    String source,
    List<File> classpath
  ) {
    ASTParser astParser = ASTParser.newParser(AST.JLS15);
    Map<String, String> options = new HashMap<>();
    options.put(JavaCore.COMPILER_COMPLIANCE, version);
    options.put(JavaCore.COMPILER_SOURCE, version);
    if (MAXIMUM_SUPPORTED_JAVA_VERSION.equals(version)) {
      options.put(JavaCore.COMPILER_PB_ENABLE_PREVIEW_FEATURES, "enabled");
    }

    astParser.setCompilerOptions(options);

    boolean includeRunningVMBootclasspath = classpath.stream().noneMatch(f -> JRE_JARS.contains(f.getName()));

    astParser.setEnvironment(
      classpath.stream().map(File::getAbsolutePath).toArray(String[]::new),
      new String[]{},
      new String[]{},
      includeRunningVMBootclasspath
    );
    astParser.setUnitName(unitName);

    astParser.setResolveBindings(true);
    astParser.setBindingsRecovery(true);

    char[] sourceChars = source.toCharArray();
    astParser.setSource(sourceChars);

    CompilationUnit astNode;
    try {
      astNode = (CompilationUnit) astParser.createAST(null);
    } catch (Exception e) {
      LOG.error("ECJ: Unable to parse file", e);
      throw new RecognitionException(-1, "ECJ: Unable to parse file.", e);
    }

    List<IProblem> errors = Stream.of(astNode.getProblems()).filter(IProblem::isError).collect(Collectors.toList());
    Optional<IProblem> possibleSyntaxError = errors.stream().filter(IS_SYNTAX_ERROR).findFirst();
    if (possibleSyntaxError.isPresent()) {
      IProblem syntaxError = possibleSyntaxError.get();
      int line = syntaxError.getSourceLineNumber();
      int column = astNode.getColumnNumber(syntaxError.getSourceStart());
      String message = String.format("Parse error at line %d column %d: %s", line, column, syntaxError.getMessage());
      // interrupt parsing
      throw new RecognitionException(line, message);
    }

    Set<String> undefinedTypes = errors.stream()
      .filter(IS_UNDEFINED_TYPE_ERROR)
      .map(IProblem::getMessage)
      .collect(Collectors.toSet());

    JParser converter = new JParser();
    converter.sema = new JSema(astNode.getAST());
    converter.sema.undefinedTypes.addAll(undefinedTypes);
    converter.compilationUnit = astNode;
    converter.tokenManager = new TokenManager(lex(version, unitName, sourceChars), source, new DefaultCodeFormatterOptions(new HashMap<>()));

    JavaTree.CompilationUnitTreeImpl tree = converter.convertCompilationUnit(astNode);
    tree.sema = converter.sema;

    ASTUtils.mayTolerateMissingType(astNode.getAST());

    setParents(tree);
    return tree;
  }

