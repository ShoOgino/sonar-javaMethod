  private void buildCall(Tree element, UCFGBuilder.BlockBuilder blockBuilder, IdentifierGenerator idGenerator) {
    if (isObjectVarDeclaration(element)) {
      VariableTree variableTree = (VariableTree) element;

      String lhs = idGenerator.lookupIdFor(variableTree.simpleName());
      if (!idGenerator.isConst(lhs)) {
        ExpressionTree initializer = variableTree.initializer();
        String source = idGenerator.lookupIdFor(initializer);
        blockBuilder.assignTo(variableWithId(lhs), UCFGBuilder.call("__id").withArgs(variableWithId(source)), location(element));
      }
      return;
    }

    if (element.is(METHOD_INVOCATION)) {
      MethodInvocationTree methodInvocationTree = (MethodInvocationTree) element;
      buildMethodInvocation(blockBuilder, idGenerator, methodInvocationTree);
    } else if (element.is(NEW_CLASS)) {
      NewClassTree newClassTree = (NewClassTree) element;
      buildConstructorInvocation(blockBuilder, idGenerator, newClassTree);
    } else if (element.is(PLUS, PLUS_ASSIGNMENT, ASSIGNMENT) && isObject(((ExpressionTree) element).symbolType())) {
      buildPlusOrAssignmentInvocation(blockBuilder, idGenerator, element);
    }
  }

