  private void buildMethodInvocation(UCFGBuilder.BlockBuilder blockBuilder, IdentifierGenerator idGenerator, MethodInvocationTree tree) {
    if (tree.symbol().isUnknown()) {
      return;
    }

    List<Expression> arguments = null;

    if (isString(tree.symbol().owner().type())) {
      // myStr.myMethod(args) -> myMethod(myStr, args)
      arguments = new ArrayList<>();
      if (tree.methodSelect().is(MEMBER_SELECT)) {
        arguments.add(idGenerator.lookupExpressionFor(((MemberSelectExpressionTree) tree.methodSelect()).expression()));
      }
      arguments.addAll(argumentIds(idGenerator, tree.arguments()));
    } else if (isString(tree.symbolType()) || tree.arguments().stream().map(ExpressionTree::symbolType).anyMatch(UCFGJavaVisitor::isString)) {
      arguments = argumentIds(idGenerator, tree.arguments());
    }

    if (arguments != null) {
      buildAssignCall(blockBuilder, idGenerator, arguments, tree, (Symbol.MethodSymbol) tree.symbol());
    }
  }

