    /**
     * Test a typical form bean configuration extension where various
     * properties should be inherited from a base form.  This method checks
     * all the properties.
     */
    public void testInheritFrom()
        throws Exception {
        // give baseForm some arbitrary parameters
        String baseFormCount = "1";

        baseForm.setProperty("count", baseFormCount);

        // create a basic subform
        FormBeanConfig subForm = new FormBeanConfig();
        String subFormName = "subForm";

        subForm.setName(subFormName);
        subForm.setExtends("baseForm");

        // override score
        FormPropertyConfig property = new FormPropertyConfig();

        property.setName("score");
        property.setType("java.lang.Integer");
        subForm.addFormPropertyConfig(property);

        // ... and id
        property = new FormPropertyConfig();
        property.setName("id");
        property.setType("java.lang.String");
        property.setInitial("unknown");
        subForm.addFormPropertyConfig(property);

        // ... and message
        property = new FormPropertyConfig();
        property.setName("message");
        property.setType("java.lang.String");
        property.setSize(10);
        subForm.addFormPropertyConfig(property);

        config.addFormBeanConfig(subForm);

        subForm.inheritFrom(baseForm);

        // check that our subForm is still the one in the config
        assertSame("subForm no longer in ModuleConfig", subForm,
            config.findFormBeanConfig("subForm"));

        // check our configured sub form
        assertNotNull("Form bean type was not inherited", subForm.getType());
        assertEquals("Wrong form bean name", subFormName, subForm.getName());
        assertEquals("Wrong form bean type", baseForm.getType(),
            subForm.getType());
        assertEquals("Wrong restricted value", baseForm.isRestricted(),
            subForm.isRestricted());

        FormPropertyConfig[] formPropertyConfigs =
            subForm.findFormPropertyConfigs();

        assertEquals("Wrong prop count", 4, formPropertyConfigs.length);

        // we want to check that the form is EXACTLY as we want it, so
        //  here are some fine grain checks
        property = subForm.findFormPropertyConfig("name");

        FormPropertyConfig original = baseForm.findFormPropertyConfig("name");

        assertNotNull("'name' property was not inherited", property);
        assertEquals("Wrong type for name", original.getType(),
            property.getType());
        assertEquals("Wrong initial value for name", original.getInitial(),
            property.getInitial());
        assertEquals("Wrong size value for name", original.getSize(),
            property.getSize());

        property = subForm.findFormPropertyConfig("id");
        original = baseForm.findFormPropertyConfig("id");
        assertNotNull("'id' property was not found", property);
        assertEquals("Wrong type for id", original.getType(), property.getType());
        assertEquals("Wrong initial value for id", "unknown",
            property.getInitial());
        assertEquals("Wrong size value for id", original.getSize(),
            property.getSize());

        property = subForm.findFormPropertyConfig("score");
        original = baseForm.findFormPropertyConfig("score");
        assertNotNull("'score' property was not found", property);
        assertEquals("Wrong type for score", "java.lang.Integer",
            property.getType());
        assertEquals("Wrong initial value for score", original.getInitial(),
            property.getInitial());
        assertEquals("Wrong size value for score", original.getSize(),
            property.getSize());

        property = subForm.findFormPropertyConfig("message");
        original = baseForm.findFormPropertyConfig("message");
        assertNotNull("'message' property was not found", property);
        assertEquals("Wrong type for message", original.getType(),
            property.getType());
        assertEquals("Wrong initial value for message", original.getInitial(),
            property.getInitial());
        assertEquals("Wrong size value for message", 10, property.getSize());

        property = subForm.findFormPropertyConfig("name");
        original = baseForm.findFormPropertyConfig("name");
        assertEquals("Arbitrary property not found",
            original.getProperty("count"), property.getProperty("count"));

        String count = subForm.getProperty("count");

        assertEquals("Arbitrary property was not inherited", baseFormCount,
            count);
    }

