    /**
     * Initialization method.
     * Init the factory by reading appropriate configuration file.
     * This method is called exactly once immediately after factory creation in
     * case of internal creation (by DefinitionUtil).
     * @param servletContext Servlet Context passed to newly created factory.
     * @param properties Map of name/property passed to newly created factory. Map can contains
     * more properties than requested.
     * @throws DefinitionsFactoryException An error occur during initialization.
     */
    public void initFactory(ServletContext servletContext, Map properties)
        throws DefinitionsFactoryException {

        // Set some property values
        String value = (String) properties.get(PARSER_VALIDATE_PARAMETER_NAME);
        if (value != null) {
            isValidatingParser = Boolean.valueOf(value).booleanValue();
        }

        value = (String) properties.get(PARSER_DETAILS_PARAMETER_NAME);
        if (value != null) {
            try {
                parserDetailLevel = Integer.valueOf(value).intValue();

            } catch (NumberFormatException ex) {
                log.error(
                    "Bad format for parameter '"
                        + PARSER_DETAILS_PARAMETER_NAME
                        + "'. Integer expected.");
            }
        }

        // init factory withappropriate configuration file
        // Try to use provided filename, if any.
        // If no filename are provided, try to use default ones.
        String filename = (String) properties.get(DEFINITIONS_CONFIG_PARAMETER_NAME);
        if (filename != null) { // Use provided filename
            try {
                initFactory(servletContext, filename);
                if (log.isDebugEnabled()) {
                    log.debug("Factory initialized from file '" + filename + "'.");
                }

            } catch (FileNotFoundException ex) { // A filename is specified, throw appropriate error.
                log.error(ex.getMessage() + " : Can't find file '" + filename + "'");
                throw new FactoryNotFoundException(
                    ex.getMessage() + " : Can't find file '" + filename + "'");
            }

        } else { // try each default file names
            for (int i = 0; i < DEFAULT_DEFINITION_FILENAMES.length; i++) {
                filename = DEFAULT_DEFINITION_FILENAMES[i];
                try {
                    initFactory(servletContext, filename);
                    if (log.isInfoEnabled()) {
                        log.info(
                            "Factory initialized from file '" + filename + "'.");
                    }
                } catch (FileNotFoundException ex) {
                    // Do nothing
                }
            }
        }

    }

