  @Test
  public void java_aware_visitor_rely_on_java_version() {
    String sonarJavaSource = "sonar.java.source";

    MavenBuild build = MavenBuild.create(TestUtils.projectPom("java-version-aware-visitor"))
      .setCleanSonarGoals()
      .setProperty("sonar.profile", "java-version-aware-visitor");

    // no java version specified. maven scanner gets maven default version : java 5.
    orchestrator.executeBuild(build);
    assertThat(getMeasureAsInteger("org.example:example", "violations")).isEqualTo(0);

    // invalid java version. got issue on java 7 code
    build.setProperty(sonarJavaSource, "jdk_1.6");
    BuildResult buildResult = orchestrator.executeBuild(build);
    // build should not fail
    assertThat(buildResult.getLastStatus()).isEqualTo(0);
    // build logs should contains warning related to sources
    assertThat(buildResult.getLogs()).contains("Invalid java version");
    assertThat(getMeasureAsInteger("org.example:example", "violations")).isEqualTo(1);

    // upper version. got issue on java 7 code
    build.setProperty(sonarJavaSource, "1.8");
    orchestrator.executeBuild(build);
    assertThat(getMeasureAsInteger("org.example:example", "violations")).isEqualTo(1);

    // lower version. no issue on java 7 code
    build.setProperty(sonarJavaSource, "1.6");
    orchestrator.executeBuild(build);
    assertThat(getMeasureAsInteger("org.example:example", "violations")).isEqualTo(0);

    SonarScanner scan = SonarScanner.create(TestUtils.projectDir("java-version-aware-visitor"))
      .setProperty("sonar.projectKey", "org.example:example-scanner")
      .setProperty("sonar.projectName", "example")
      .setProperty("sonar.projectVersion", "1.0-SNAPSHOT")
      .setProperty("sonar.profile", "java-version-aware-visitor")
      .setProperty("sonar.sources", "src/main/java");
    orchestrator.executeBuild(scan);
    // no java version specified, got issue on java 7 code
    assertThat(getMeasureAsInteger("org.example:example-scanner", "violations")).isEqualTo(1);
  }

