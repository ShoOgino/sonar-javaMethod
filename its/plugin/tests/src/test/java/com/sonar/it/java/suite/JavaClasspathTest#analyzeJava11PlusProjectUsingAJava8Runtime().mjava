  @Test
  public void analyzeJava11PlusProjectUsingAJava8Runtime() {
    String projectKey = "jvm-type-resolution";
    SonarScanner scanner = SonarScanner.create(TestUtils.projectDir("jvm-type-resolution"))
      .setProperty("sonar.projectKey", projectKey)
      .setProperty("sonar.projectName", "jvm-type-resolution")
      .setProperty("sonar.projectVersion", "1.0-SNAPSHOT")
      .setProperty("sonar.sources", "src/main/java")
      .setProperty("sonar.java.source", "11")
      .setProperty("sonar.java.binaries", "fakeoutput");

    // assume tests are executed with a JVM 11+
    Path modularJvmHome = Paths.get(System.getProperty("java.home"));
    Path jrtFsPath = modularJvmHome.resolve("lib/jrt-fs.jar");
    assertThat(jrtFsPath).exists();

    Path jre8Home = Paths.get("target/jre/jdk8u265-b01-jre");
    if (SystemUtils.IS_OS_MAC_OSX) {
      jre8Home = jre8Home.resolve("Contents/Home");
    }
    Path rtJar = jre8Home.resolve("lib/rt.jar");
    assertThat(rtJar).exists();

    scanner.setEnvironmentVariable("JAVA_HOME", jre8Home.toAbsolutePath().toString());
    scanner.setProperty("sonar.java.libraries", jrtFsPath.toAbsolutePath().toString());

    TestUtils.provisionProject(ORCHESTRATOR, projectKey, projectKey, "java", "depends-on-jdk-types");
    ORCHESTRATOR.executeBuild(scanner);

    List<Issue> issues = TestUtils.issuesForComponent(ORCHESTRATOR, projectKey);
    assertThat(issues).extracting(Issue::getComponent, Issue::getRule, Issue::getMessage, Issue::getLine)
      .containsOnly(
        tuple("jvm-type-resolution:src/main/java/foo/Main.java", "java:S1481", "Remove this unused \"unused\" local variable.", 13));
  }

