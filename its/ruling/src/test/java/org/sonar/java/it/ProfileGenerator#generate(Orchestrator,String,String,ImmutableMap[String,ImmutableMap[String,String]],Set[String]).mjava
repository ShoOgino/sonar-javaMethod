  static void generate(Orchestrator orchestrator, String language, String repositoryKey, ImmutableMap<String, ImmutableMap<String, String>> rulesParameters, Set<String> excluded) {
    try {
      StringBuilder sb = new StringBuilder()
        .append("<profile>")
        .append("<name>rules</name>")
        .append("<language>").append(language).append("</language>")
        .append("<alerts>")
        .append("<alert>")
        .append("<metric>blocker_violations</metric>")
        .append("<operator>&gt;</operator>")
        .append("<warning></warning>")
        .append("<error>0</error>")
        .append("</alert>")
        .append("<alert>")
        .append("<metric>info_violations</metric>")
        .append("<operator>&gt;</operator>")
        .append("<warning></warning>")
        .append("<error>0</error>")
        .append("</alert>")
        .append("</alerts>")
        .append("<rules>");

      List<String> ruleKeys = Lists.newArrayList();
      String json = new HttpRequestFactory(orchestrator.getServer().getUrl())
        .get("/api/rules/search", ImmutableMap.<String, Object>of("languages", language, "repositories", repositoryKey, "ps", "1000"));
      @SuppressWarnings("unchecked")
      List<Map> jsonRules = (List<Map>) ((Map) JSONValue.parse(json)).get("rules");
      for (Map jsonRule : jsonRules) {
        String key = (String) jsonRule.get("internalKey");
        ruleKeys.add(key);
      }

      for (String key : ruleKeys) {
        if (excluded.contains(key)) {
          continue;
        }
        sb.append("<rule>")
          .append("<repositoryKey>").append(repositoryKey).append("</repositoryKey>")
          .append("<key>").append(key).append("</key>")
          .append("<priority>INFO</priority>");
        if (rulesParameters.containsKey(key)) {
          sb.append("<parameters>");
          for (Map.Entry<String, String> parameter : rulesParameters.get(key).entrySet()) {
            sb.append("<parameter>")
              .append("<key>").append(parameter.getKey()).append("</key>")
              .append("<value>").append(parameter.getValue()).append("</value>")
              .append("</parameter>");
          }
          sb.append("</parameters>");
        }
        sb.append("</rule>");
      }

      sb.append("</rules>")
        .append("</profile>");

      File file = File.createTempFile("profile", ".xml");
      Files.write(sb, file, Charsets.UTF_8);
      orchestrator.getServer().restoreProfile(FileLocation.of(file));
      file.delete();
    } catch (IOException e) {
      throw Throwables.propagate(e);
    }
  }

