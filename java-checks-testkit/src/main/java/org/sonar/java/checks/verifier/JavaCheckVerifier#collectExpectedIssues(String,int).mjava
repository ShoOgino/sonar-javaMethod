  private void collectExpectedIssues(String comment, int line) {
    if (comment.startsWith(TRIGGER)) {
      String cleanedComment = StringUtils.remove(comment, TRIGGER);

      String expectedMessage = StringUtils.substringBetween(cleanedComment, "{{", "}}");
      int expectedLine = line;

      cleanedComment = StringUtils.stripEnd(StringUtils.remove(cleanedComment, "{{" + expectedMessage + "}}"), " \t");
      if (StringUtils.startsWith(cleanedComment, "@")) {
        final int lineAdjustment;
        final char firstChar = cleanedComment.charAt(1);
        final int endIndex = cleanedComment.indexOf(' ');
        if (endIndex == -1) {
          lineAdjustment = Integer.parseInt(cleanedComment.substring(2));
          cleanedComment = "";
        } else {
          lineAdjustment = Integer.parseInt(cleanedComment.substring(2, endIndex));
          cleanedComment = cleanedComment.substring(endIndex + 1).trim();
        }
        if (firstChar == '+') {
          expectedLine += lineAdjustment;
        } else if (firstChar == '-') {
          expectedLine -= lineAdjustment;
        } else {
          throw Fail.fail("Use only '@+N' or '@-N' to shifts messages.");
        }
      }
      cleanedComment = StringUtils.trim(cleanedComment);
      int times = StringUtils.isEmpty(cleanedComment) ? 1 : Integer.parseInt(cleanedComment);
      for (int i = 0; i < times; i++) {
        expected.put(expectedLine, expectedMessage);
      }
    }
  }

